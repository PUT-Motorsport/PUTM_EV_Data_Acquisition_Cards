
AC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007430  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080075f0  080075f0  000175f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076a4  080076a4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080076a4  080076a4  000176a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076ac  080076ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076ac  080076ac  000176ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076b0  080076b0  000176b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080076b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000070  08007724  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08007724  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ef4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002afa  00000000  00000000  00038f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001558  00000000  00000000  0003ba90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001450  00000000  00000000  0003cfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ddf9  00000000  00000000  0003e438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000165f9  00000000  00000000  0006c231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00125a9e  00000000  00000000  0008282a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a82c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000600c  00000000  00000000  001a831c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080075d8 	.word	0x080075d8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	080075d8 	.word	0x080075d8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b08c      	sub	sp, #48	; 0x30
 800059c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800059e:	f000 fdaa 	bl	80010f6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005a2:	f000 f8c5 	bl	8000730 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005a6:	f000 fab3 	bl	8000b10 <MX_GPIO_Init>
	MX_DMA_Init();
 80005aa:	f000 fa87 	bl	8000abc <MX_DMA_Init>
	MX_CAN1_Init();
 80005ae:	f000 f9b5 	bl	800091c <MX_CAN1_Init>
	MX_ADC1_Init();
 80005b2:	f000 f93d 	bl	8000830 <MX_ADC1_Init>
	MX_UART4_Init();
 80005b6:	f000 fa35 	bl	8000a24 <MX_UART4_Init>
	MX_TIM2_Init();
 80005ba:	f000 f9e5 	bl	8000988 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	CAN_TxHeaderTypeDef tx_header_ac;
	tx_header_ac.StdId = CARD_B_CAN_ID;
 80005be:	230a      	movs	r3, #10
 80005c0:	617b      	str	r3, [r7, #20]
	tx_header_ac.RTR = CAN_RTR_DATA;
 80005c2:	2300      	movs	r3, #0
 80005c4:	623b      	str	r3, [r7, #32]
	tx_header_ac.IDE = CAN_ID_STD;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
	tx_header_ac.DLC = CARD_B_CAN_DLC;
 80005ca:	2302      	movs	r3, #2
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
	tx_header_ac.TransmitGlobalTime = DISABLE;
 80005ce:	2300      	movs	r3, #0
 80005d0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	HAL_ADC_Start_DMA(&hadc1, ADC_MEANSURE_VALUE, 5);
 80005d4:	2205      	movs	r2, #5
 80005d6:	4946      	ldr	r1, [pc, #280]	; (80006f0 <main+0x158>)
 80005d8:	4846      	ldr	r0, [pc, #280]	; (80006f4 <main+0x15c>)
 80005da:	f001 f93b 	bl	8001854 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 80005de:	4846      	ldr	r0, [pc, #280]	; (80006f8 <main+0x160>)
 80005e0:	f004 fd48 	bl	8005074 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (send_CAN_flag) {
 80005e4:	4b45      	ldr	r3, [pc, #276]	; (80006fc <main+0x164>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d00e      	beq.n	800060a <main+0x72>
			if (HAL_CAN_AddTxMessage(&hcan1, &tx_header_ac, ac_data,
 80005ec:	f107 0114 	add.w	r1, r7, #20
 80005f0:	4b43      	ldr	r3, [pc, #268]	; (8000700 <main+0x168>)
 80005f2:	4a44      	ldr	r2, [pc, #272]	; (8000704 <main+0x16c>)
 80005f4:	4844      	ldr	r0, [pc, #272]	; (8000708 <main+0x170>)
 80005f6:	f002 f8b6 	bl	8002766 <HAL_CAN_AddTxMessage>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <main+0x6c>
					&mail_can_ac) != HAL_OK) {
				//ERROR
				Error_Handler();
 8000600:	f000 fb3a 	bl	8000c78 <Error_Handler>
			}
		//	while (HAL_CAN_IsTxMessagePending(&hcan1, mail_can_ac))

			send_CAN_flag = 0;
 8000604:	4b3d      	ldr	r3, [pc, #244]	; (80006fc <main+0x164>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
		}
		if(timer2_it_flag){
 800060a:	4b40      	ldr	r3, [pc, #256]	; (800070c <main+0x174>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0e8      	beq.n	80005e4 <main+0x4c>
			timer2_it_flag = 0;
 8000612:	4b3e      	ldr	r3, [pc, #248]	; (800070c <main+0x174>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
			cnt++;
 8000618:	4b3d      	ldr	r3, [pc, #244]	; (8000710 <main+0x178>)
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	3301      	adds	r3, #1
 800061e:	b29a      	uxth	r2, r3
 8000620:	4b3b      	ldr	r3, [pc, #236]	; (8000710 <main+0x178>)
 8000622:	801a      	strh	r2, [r3, #0]

			uint8_t data_send[18];
			uint8_t size = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

			if (HAL_GPIO_ReadPin(D_INPUT_2_GPIO_Port, D_INPUT_2_Pin) == 0
 800062a:	2120      	movs	r1, #32
 800062c:	4839      	ldr	r0, [pc, #228]	; (8000714 <main+0x17c>)
 800062e:	f002 ff47 	bl	80034c0 <HAL_GPIO_ReadPin>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d10d      	bne.n	8000654 <main+0xbc>
						&& flag == 0) {
 8000638:	4b37      	ldr	r3, [pc, #220]	; (8000718 <main+0x180>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d109      	bne.n	8000654 <main+0xbc>
					c_count++;
 8000640:	4b36      	ldr	r3, [pc, #216]	; (800071c <main+0x184>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	3301      	adds	r3, #1
 8000646:	b29a      	uxth	r2, r3
 8000648:	4b34      	ldr	r3, [pc, #208]	; (800071c <main+0x184>)
 800064a:	801a      	strh	r2, [r3, #0]
					flag = 1;
 800064c:	4b32      	ldr	r3, [pc, #200]	; (8000718 <main+0x180>)
 800064e:	2201      	movs	r2, #1
 8000650:	701a      	strb	r2, [r3, #0]
 8000652:	e009      	b.n	8000668 <main+0xd0>
				} else if (HAL_GPIO_ReadPin(D_INPUT_2_GPIO_Port, D_INPUT_2_Pin) == 1) {
 8000654:	2120      	movs	r1, #32
 8000656:	482f      	ldr	r0, [pc, #188]	; (8000714 <main+0x17c>)
 8000658:	f002 ff32 	bl	80034c0 <HAL_GPIO_ReadPin>
 800065c:	4603      	mov	r3, r0
 800065e:	2b01      	cmp	r3, #1
 8000660:	d102      	bne.n	8000668 <main+0xd0>
					flag = 0;
 8000662:	4b2d      	ldr	r3, [pc, #180]	; (8000718 <main+0x180>)
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
				}
				if (HAL_GPIO_ReadPin(D_INPUT_3_GPIO_Port, D_INPUT_3_Pin) == 0
 8000668:	2110      	movs	r1, #16
 800066a:	482a      	ldr	r0, [pc, #168]	; (8000714 <main+0x17c>)
 800066c:	f002 ff28 	bl	80034c0 <HAL_GPIO_ReadPin>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d10d      	bne.n	8000692 <main+0xfa>
						&& flag_2 == 0) {
 8000676:	4b2a      	ldr	r3, [pc, #168]	; (8000720 <main+0x188>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d109      	bne.n	8000692 <main+0xfa>
					c_count_2++;
 800067e:	4b29      	ldr	r3, [pc, #164]	; (8000724 <main+0x18c>)
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	3301      	adds	r3, #1
 8000684:	b29a      	uxth	r2, r3
 8000686:	4b27      	ldr	r3, [pc, #156]	; (8000724 <main+0x18c>)
 8000688:	801a      	strh	r2, [r3, #0]
					flag_2 = 1;
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <main+0x188>)
 800068c:	2201      	movs	r2, #1
 800068e:	701a      	strb	r2, [r3, #0]
 8000690:	e009      	b.n	80006a6 <main+0x10e>
				} else if (HAL_GPIO_ReadPin(D_INPUT_3_GPIO_Port, D_INPUT_3_Pin) == 1) {
 8000692:	2110      	movs	r1, #16
 8000694:	481f      	ldr	r0, [pc, #124]	; (8000714 <main+0x17c>)
 8000696:	f002 ff13 	bl	80034c0 <HAL_GPIO_ReadPin>
 800069a:	4603      	mov	r3, r0
 800069c:	2b01      	cmp	r3, #1
 800069e:	d102      	bne.n	80006a6 <main+0x10e>
					flag_2 = 0;
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <main+0x188>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
				}
				if (cnt == 10000) {
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <main+0x178>)
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d198      	bne.n	80005e4 <main+0x4c>
					size = sprintf(data_send, "obr/sek: %d  \n\r", c_count / 8);
 80006b2:	4b1a      	ldr	r3, [pc, #104]	; (800071c <main+0x184>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	08db      	lsrs	r3, r3, #3
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	461a      	mov	r2, r3
 80006bc:	463b      	mov	r3, r7
 80006be:	491a      	ldr	r1, [pc, #104]	; (8000728 <main+0x190>)
 80006c0:	4618      	mov	r0, r3
 80006c2:	f006 fb5b 	bl	8006d7c <siprintf>
 80006c6:	4603      	mov	r3, r0
 80006c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					c_count_2 = 0;
 80006cc:	4b15      	ldr	r3, [pc, #84]	; (8000724 <main+0x18c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	801a      	strh	r2, [r3, #0]

					//TODO TO CHECK?
					HAL_UART_Transmit_IT(&huart4, data_send, size);
 80006d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	463b      	mov	r3, r7
 80006da:	4619      	mov	r1, r3
 80006dc:	4813      	ldr	r0, [pc, #76]	; (800072c <main+0x194>)
 80006de:	f005 f971 	bl	80059c4 <HAL_UART_Transmit_IT>
					cnt = 0;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <main+0x178>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	801a      	strh	r2, [r3, #0]
					c_count = 0;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <main+0x184>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	801a      	strh	r2, [r3, #0]
		if (send_CAN_flag) {
 80006ee:	e779      	b.n	80005e4 <main+0x4c>
 80006f0:	200001c0 	.word	0x200001c0
 80006f4:	200000f4 	.word	0x200000f4
 80006f8:	2000025c 	.word	0x2000025c
 80006fc:	200001ca 	.word	0x200001ca
 8000700:	200000f0 	.word	0x200000f0
 8000704:	2000008c 	.word	0x2000008c
 8000708:	200002a8 	.word	0x200002a8
 800070c:	200000ec 	.word	0x200000ec
 8000710:	20000096 	.word	0x20000096
 8000714:	48000800 	.word	0x48000800
 8000718:	20000098 	.word	0x20000098
 800071c:	20000094 	.word	0x20000094
 8000720:	2000009c 	.word	0x2000009c
 8000724:	2000009a 	.word	0x2000009a
 8000728:	080075f0 	.word	0x080075f0
 800072c:	200001cc 	.word	0x200001cc

08000730 <SystemClock_Config>:
}
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b0be      	sub	sp, #248	; 0xf8
 8000734:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000736:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800073a:	2248      	movs	r2, #72	; 0x48
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f006 fb14 	bl	8006d6c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000744:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2298      	movs	r2, #152	; 0x98
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f006 fb06 	bl	8006d6c <memset>

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000760:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000764:	f002 fefc 	bl	8003560 <HAL_PWREx_ControlVoltageScaling>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x42>
			!= HAL_OK) {
		Error_Handler();
 800076e:	f000 fa83 	bl	8000c78 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000772:	2312      	movs	r3, #18
 8000774:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000778:	f44f 7380 	mov.w	r3, #256	; 0x100
 800077c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000780:	2340      	movs	r3, #64	; 0x40
 8000782:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000786:	2301      	movs	r3, #1
 8000788:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.MSICalibrationValue = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8000792:	2380      	movs	r3, #128	; 0x80
 8000794:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000798:	2300      	movs	r3, #0
 800079a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800079e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 ff80 	bl	80036a8 <HAL_RCC_OscConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x82>
		Error_Handler();
 80007ae:	f000 fa63 	bl	8000c78 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007b2:	230f      	movs	r3, #15
 80007b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007b8:	2300      	movs	r3, #0
 80007ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80007d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f003 fbee 	bl	8003fb8 <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0xb6>
		Error_Handler();
 80007e2:	f000 fa49 	bl	8000c78 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection =
 80007e6:	f244 0308 	movw	r3, #16392	; 0x4008
 80007ea:	607b      	str	r3, [r7, #4]
			RCC_PERIPHCLK_UART4 | RCC_PERIPHCLK_ADC;
	PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80007f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80007f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80007f8:	2302      	movs	r3, #2
 80007fa:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000800:	2308      	movs	r3, #8
 8000802:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000804:	2302      	movs	r3, #2
 8000806:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000808:	2302      	movs	r3, #2
 800080a:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800080c:	2302      	movs	r3, #2
 800080e:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000810:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000814:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	4618      	mov	r0, r3
 800081a:	f003 fe7f 	bl	800451c <HAL_RCCEx_PeriphCLKConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xf8>
		Error_Handler();
 8000824:	f000 fa28 	bl	8000c78 <Error_Handler>
	}
}
 8000828:	bf00      	nop
 800082a:	37f8      	adds	r7, #248	; 0xf8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
 8000850:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000852:	4b2f      	ldr	r3, [pc, #188]	; (8000910 <MX_ADC1_Init+0xe0>)
 8000854:	4a2f      	ldr	r2, [pc, #188]	; (8000914 <MX_ADC1_Init+0xe4>)
 8000856:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000858:	4b2d      	ldr	r3, [pc, #180]	; (8000910 <MX_ADC1_Init+0xe0>)
 800085a:	2200      	movs	r2, #0
 800085c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800085e:	4b2c      	ldr	r3, [pc, #176]	; (8000910 <MX_ADC1_Init+0xe0>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000864:	4b2a      	ldr	r3, [pc, #168]	; (8000910 <MX_ADC1_Init+0xe0>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800086a:	4b29      	ldr	r3, [pc, #164]	; (8000910 <MX_ADC1_Init+0xe0>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000870:	4b27      	ldr	r3, [pc, #156]	; (8000910 <MX_ADC1_Init+0xe0>)
 8000872:	2204      	movs	r2, #4
 8000874:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000876:	4b26      	ldr	r3, [pc, #152]	; (8000910 <MX_ADC1_Init+0xe0>)
 8000878:	2200      	movs	r2, #0
 800087a:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800087c:	4b24      	ldr	r3, [pc, #144]	; (8000910 <MX_ADC1_Init+0xe0>)
 800087e:	2200      	movs	r2, #0
 8000880:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8000882:	4b23      	ldr	r3, [pc, #140]	; (8000910 <MX_ADC1_Init+0xe0>)
 8000884:	2201      	movs	r2, #1
 8000886:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000888:	4b21      	ldr	r3, [pc, #132]	; (8000910 <MX_ADC1_Init+0xe0>)
 800088a:	2200      	movs	r2, #0
 800088c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <MX_ADC1_Init+0xe0>)
 8000892:	2200      	movs	r2, #0
 8000894:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000896:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <MX_ADC1_Init+0xe0>)
 8000898:	2200      	movs	r2, #0
 800089a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MX_ADC1_Init+0xe0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008a4:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <MX_ADC1_Init+0xe0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <MX_ADC1_Init+0xe0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80008b2:	4817      	ldr	r0, [pc, #92]	; (8000910 <MX_ADC1_Init+0xe0>)
 80008b4:	f000 fe7c 	bl	80015b0 <HAL_ADC_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADC1_Init+0x92>
		Error_Handler();
 80008be:	f000 f9db 	bl	8000c78 <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4810      	ldr	r0, [pc, #64]	; (8000910 <MX_ADC1_Init+0xe0>)
 80008ce:	f001 fdab 	bl	8002428 <HAL_ADCEx_MultiModeConfigChannel>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC1_Init+0xac>
		Error_Handler();
 80008d8:	f000 f9ce 	bl	8000c78 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_ADC1_Init+0xe8>)
 80008de:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80008e0:	2306      	movs	r3, #6
 80008e2:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008e8:	237f      	movs	r3, #127	; 0x7f
 80008ea:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ec:	2304      	movs	r3, #4
 80008ee:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_ADC1_Init+0xe0>)
 80008fa:	f001 f87d 	bl	80019f8 <HAL_ADC_ConfigChannel>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_ADC1_Init+0xd8>
		Error_Handler();
 8000904:	f000 f9b8 	bl	8000c78 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	3728      	adds	r7, #40	; 0x28
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200000f4 	.word	0x200000f4
 8000914:	50040000 	.word	0x50040000
 8000918:	04300002 	.word	0x04300002

0800091c <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_CAN1_Init+0x64>)
 8000922:	4a18      	ldr	r2, [pc, #96]	; (8000984 <MX_CAN1_Init+0x68>)
 8000924:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 2;
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <MX_CAN1_Init+0x64>)
 8000928:	2202      	movs	r2, #2
 800092a:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_CAN1_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_CAN1_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_CAN1_Init+0x64>)
 800093a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800093e:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_CAN1_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_CAN1_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_CAN1_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_CAN1_Init+0x64>)
 8000954:	2200      	movs	r2, #0
 8000956:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_CAN1_Init+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_CAN1_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_CAN1_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_CAN1_Init+0x64>)
 800096c:	f001 fe00 	bl	8002570 <HAL_CAN_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_CAN1_Init+0x5e>
		Error_Handler();
 8000976:	f000 f97f 	bl	8000c78 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200002a8 	.word	0x200002a8
 8000984:	40006400 	.word	0x40006400

08000988 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800098e:	f107 0310 	add.w	r3, r7, #16
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80009a6:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <MX_TIM2_Init+0x98>)
 80009a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ac:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 10;
 80009ae:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <MX_TIM2_Init+0x98>)
 80009b0:	220a      	movs	r2, #10
 80009b2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b4:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_TIM2_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1599;
 80009ba:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <MX_TIM2_Init+0x98>)
 80009bc:	f240 623f 	movw	r2, #1599	; 0x63f
 80009c0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_TIM2_Init+0x98>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_TIM2_Init+0x98>)
 80009ca:	2280      	movs	r2, #128	; 0x80
 80009cc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80009ce:	4814      	ldr	r0, [pc, #80]	; (8000a20 <MX_TIM2_Init+0x98>)
 80009d0:	f004 faf8 	bl	8004fc4 <HAL_TIM_Base_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM2_Init+0x56>
		Error_Handler();
 80009da:	f000 f94d 	bl	8000c78 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	4619      	mov	r1, r3
 80009ea:	480d      	ldr	r0, [pc, #52]	; (8000a20 <MX_TIM2_Init+0x98>)
 80009ec:	f004 fcd1 	bl	8005392 <HAL_TIM_ConfigClockSource>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM2_Init+0x72>
		Error_Handler();
 80009f6:	f000 f93f 	bl	8000c78 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	4619      	mov	r1, r3
 8000a06:	4806      	ldr	r0, [pc, #24]	; (8000a20 <MX_TIM2_Init+0x98>)
 8000a08:	f004 fee6 	bl	80057d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8000a12:	f000 f931 	bl	8000c78 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	3720      	adds	r7, #32
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000025c 	.word	0x2000025c

08000a24 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8000a28:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <MX_UART4_Init+0x90>)
 8000a2a:	4a23      	ldr	r2, [pc, #140]	; (8000ab8 <MX_UART4_Init+0x94>)
 8000a2c:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <MX_UART4_Init+0x90>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a34:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <MX_UART4_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <MX_UART4_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <MX_UART4_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_UART4_Init+0x90>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <MX_UART4_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_UART4_Init+0x90>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_UART4_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_UART4_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_UART4_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8000a6c:	4811      	ldr	r0, [pc, #68]	; (8000ab4 <MX_UART4_Init+0x90>)
 8000a6e:	f004 ff59 	bl	8005924 <HAL_UART_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_UART4_Init+0x58>
		Error_Handler();
 8000a78:	f000 f8fe 	bl	8000c78 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <MX_UART4_Init+0x90>)
 8000a80:	f006 f880 	bl	8006b84 <HAL_UARTEx_SetTxFifoThreshold>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_UART4_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000a8a:	f000 f8f5 	bl	8000c78 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <MX_UART4_Init+0x90>)
 8000a92:	f006 f8b5 	bl	8006c00 <HAL_UARTEx_SetRxFifoThreshold>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_UART4_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000a9c:	f000 f8ec 	bl	8000c78 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK) {
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_UART4_Init+0x90>)
 8000aa2:	f006 f836 	bl	8006b12 <HAL_UARTEx_DisableFifoMode>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_UART4_Init+0x8c>
		Error_Handler();
 8000aac:	f000 f8e4 	bl	8000c78 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200001cc 	.word	0x200001cc
 8000ab8:	40004c00 	.word	0x40004c00

08000abc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <MX_DMA_Init+0x50>)
 8000ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ac6:	4a11      	ldr	r2, [pc, #68]	; (8000b0c <MX_DMA_Init+0x50>)
 8000ac8:	f043 0304 	orr.w	r3, r3, #4
 8000acc:	6493      	str	r3, [r2, #72]	; 0x48
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_DMA_Init+0x50>)
 8000ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ad2:	f003 0304 	and.w	r3, r3, #4
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_DMA_Init+0x50>)
 8000adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ade:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <MX_DMA_Init+0x50>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6493      	str	r3, [r2, #72]	; 0x48
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_DMA_Init+0x50>)
 8000ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	200b      	movs	r0, #11
 8000af8:	f001 ffeb 	bl	8002ad2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000afc:	200b      	movs	r0, #11
 8000afe:	f002 f804 	bl	8002b0a <HAL_NVIC_EnableIRQ>

}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000

08000b10 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b26:	4b3c      	ldr	r3, [pc, #240]	; (8000c18 <MX_GPIO_Init+0x108>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	4a3b      	ldr	r2, [pc, #236]	; (8000c18 <MX_GPIO_Init+0x108>)
 8000b2c:	f043 0304 	orr.w	r3, r3, #4
 8000b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b32:	4b39      	ldr	r3, [pc, #228]	; (8000c18 <MX_GPIO_Init+0x108>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	f003 0304 	and.w	r3, r3, #4
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3e:	4b36      	ldr	r3, [pc, #216]	; (8000c18 <MX_GPIO_Init+0x108>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	4a35      	ldr	r2, [pc, #212]	; (8000c18 <MX_GPIO_Init+0x108>)
 8000b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4a:	4b33      	ldr	r3, [pc, #204]	; (8000c18 <MX_GPIO_Init+0x108>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	4b30      	ldr	r3, [pc, #192]	; (8000c18 <MX_GPIO_Init+0x108>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	4a2f      	ldr	r2, [pc, #188]	; (8000c18 <MX_GPIO_Init+0x108>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b62:	4b2d      	ldr	r3, [pc, #180]	; (8000c18 <MX_GPIO_Init+0x108>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	4b2a      	ldr	r3, [pc, #168]	; (8000c18 <MX_GPIO_Init+0x108>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	4a29      	ldr	r2, [pc, #164]	; (8000c18 <MX_GPIO_Init+0x108>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7a:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <MX_GPIO_Init+0x108>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DIODE_0_GPIO_Port, DIODE_0_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b8c:	4823      	ldr	r0, [pc, #140]	; (8000c1c <MX_GPIO_Init+0x10c>)
 8000b8e:	f002 fcaf 	bl	80034f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8000b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9c:	f002 fca8 	bl	80034f0 <HAL_GPIO_WritePin>
			D_OUTPUT_4_Pin | D_OUTPUT_3_Pin | D_OUTPUT_2_Pin | D_OUTPUT_1_Pin
					| D_OUTPUT_0_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : DIODE_0_Pin */
	GPIO_InitStruct.Pin = DIODE_0_Pin;
 8000ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DIODE_0_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4818      	ldr	r0, [pc, #96]	; (8000c1c <MX_GPIO_Init+0x10c>)
 8000bba:	f002 faef 	bl	800319c <HAL_GPIO_Init>

	/*Configure GPIO pins : D_INPUT_3_Pin D_INPUT_2_Pin */
	GPIO_InitStruct.Pin = D_INPUT_3_Pin | D_INPUT_2_Pin;
 8000bbe:	2330      	movs	r3, #48	; 0x30
 8000bc0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4812      	ldr	r0, [pc, #72]	; (8000c1c <MX_GPIO_Init+0x10c>)
 8000bd2:	f002 fae3 	bl	800319c <HAL_GPIO_Init>

	/*Configure GPIO pins : D_OUTPUT_4_Pin D_OUTPUT_3_Pin D_OUTPUT_2_Pin D_OUTPUT_1_Pin
	 D_OUTPUT_0_Pin */
	GPIO_InitStruct.Pin = D_OUTPUT_4_Pin | D_OUTPUT_3_Pin | D_OUTPUT_2_Pin
 8000bd6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000bda:	617b      	str	r3, [r7, #20]
			| D_OUTPUT_1_Pin | D_OUTPUT_0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf2:	f002 fad3 	bl	800319c <HAL_GPIO_Init>

	/*Configure GPIO pin : JUMPER_Pin */
	GPIO_InitStruct.Pin = JUMPER_Pin;
 8000bf6:	2340      	movs	r3, #64	; 0x40
 8000bf8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(JUMPER_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_GPIO_Init+0x110>)
 8000c0a:	f002 fac7 	bl	800319c <HAL_GPIO_Init>

}
 8000c0e:	bf00      	nop
 8000c10:	3728      	adds	r7, #40	; 0x28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	48000800 	.word	0x48000800
 8000c20:	48000400 	.word	0x48000400

08000c24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
    if(htim == &htim2){
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d112      	bne.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x36>
    	timer2_it_flag = 1;
 8000c34:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	701a      	strb	r2, [r3, #0]
    	static uint8_t send_CAN_cnt;
    	send_CAN_cnt++;
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000c44:	701a      	strb	r2, [r3, #0]
    	if (send_CAN_cnt == 10) {
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b0a      	cmp	r3, #10
 8000c4c:	d105      	bne.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x36>
    			send_CAN_flag = 1;
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	701a      	strb	r2, [r3, #0]
    			send_CAN_cnt = 0;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	701a      	strb	r2, [r3, #0]
    		}



    }
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	2000025c 	.word	0x2000025c
 8000c6c:	200000ec 	.word	0x200000ec
 8000c70:	2000009d 	.word	0x2000009d
 8000c74:	200001ca 	.word	0x200001ca

08000c78 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7c:	b672      	cpsid	i
}
 8000c7e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c80:	e7fe      	b.n	8000c80 <Error_Handler+0x8>
	...

08000c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <HAL_MspInit+0x44>)
 8000c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c8e:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <HAL_MspInit+0x44>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6613      	str	r3, [r2, #96]	; 0x60
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <HAL_MspInit+0x44>)
 8000c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <HAL_MspInit+0x44>)
 8000ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca6:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <HAL_MspInit+0x44>)
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cac:	6593      	str	r3, [r2, #88]	; 0x58
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_MspInit+0x44>)
 8000cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40021000 	.word	0x40021000

08000ccc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a37      	ldr	r2, [pc, #220]	; (8000dc8 <HAL_ADC_MspInit+0xfc>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d168      	bne.n	8000dc0 <HAL_ADC_MspInit+0xf4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000cee:	4b37      	ldr	r3, [pc, #220]	; (8000dcc <HAL_ADC_MspInit+0x100>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	4a36      	ldr	r2, [pc, #216]	; (8000dcc <HAL_ADC_MspInit+0x100>)
 8000cf4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfa:	4b34      	ldr	r3, [pc, #208]	; (8000dcc <HAL_ADC_MspInit+0x100>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d06:	4b31      	ldr	r3, [pc, #196]	; (8000dcc <HAL_ADC_MspInit+0x100>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	4a30      	ldr	r2, [pc, #192]	; (8000dcc <HAL_ADC_MspInit+0x100>)
 8000d0c:	f043 0304 	orr.w	r3, r3, #4
 8000d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d12:	4b2e      	ldr	r3, [pc, #184]	; (8000dcc <HAL_ADC_MspInit+0x100>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	f003 0304 	and.w	r3, r3, #4
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <HAL_ADC_MspInit+0x100>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	4a2a      	ldr	r2, [pc, #168]	; (8000dcc <HAL_ADC_MspInit+0x100>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2a:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <HAL_ADC_MspInit+0x100>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC_4_Pin|ADC_3_Pin|ADC_2_Pin|ADC_1_Pin;
 8000d36:	230f      	movs	r3, #15
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d3a:	230b      	movs	r3, #11
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	4821      	ldr	r0, [pc, #132]	; (8000dd0 <HAL_ADC_MspInit+0x104>)
 8000d4a:	f002 fa27 	bl	800319c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_0_Pin;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d52:	230b      	movs	r3, #11
 8000d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_0_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d64:	f002 fa1a 	bl	800319c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <HAL_ADC_MspInit+0x108>)
 8000d6a:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <HAL_ADC_MspInit+0x10c>)
 8000d6c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000d6e:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <HAL_ADC_MspInit+0x108>)
 8000d70:	2205      	movs	r2, #5
 8000d72:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <HAL_ADC_MspInit+0x108>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d7a:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <HAL_ADC_MspInit+0x108>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <HAL_ADC_MspInit+0x108>)
 8000d82:	2280      	movs	r2, #128	; 0x80
 8000d84:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <HAL_ADC_MspInit+0x108>)
 8000d88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d8c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <HAL_ADC_MspInit+0x108>)
 8000d90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d94:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <HAL_ADC_MspInit+0x108>)
 8000d98:	2220      	movs	r2, #32
 8000d9a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <HAL_ADC_MspInit+0x108>)
 8000d9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000da2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000da4:	480b      	ldr	r0, [pc, #44]	; (8000dd4 <HAL_ADC_MspInit+0x108>)
 8000da6:	f001 fecb 	bl	8002b40 <HAL_DMA_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <HAL_ADC_MspInit+0xe8>
    {
      Error_Handler();
 8000db0:	f7ff ff62 	bl	8000c78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <HAL_ADC_MspInit+0x108>)
 8000db8:	651a      	str	r2, [r3, #80]	; 0x50
 8000dba:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <HAL_ADC_MspInit+0x108>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	; 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	50040000 	.word	0x50040000
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	48000800 	.word	0x48000800
 8000dd4:	20000160 	.word	0x20000160
 8000dd8:	40020008 	.word	0x40020008

08000ddc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a17      	ldr	r2, [pc, #92]	; (8000e58 <HAL_CAN_MspInit+0x7c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d128      	bne.n	8000e50 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <HAL_CAN_MspInit+0x80>)
 8000e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e02:	4a16      	ldr	r2, [pc, #88]	; (8000e5c <HAL_CAN_MspInit+0x80>)
 8000e04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e08:	6593      	str	r3, [r2, #88]	; 0x58
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <HAL_CAN_MspInit+0x80>)
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <HAL_CAN_MspInit+0x80>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	4a10      	ldr	r2, [pc, #64]	; (8000e5c <HAL_CAN_MspInit+0x80>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <HAL_CAN_MspInit+0x80>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e40:	2309      	movs	r3, #9
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <HAL_CAN_MspInit+0x84>)
 8000e4c:	f002 f9a6 	bl	800319c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	; 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40006400 	.word	0x40006400
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	48000400 	.word	0x48000400

08000e64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e74:	d113      	bne.n	8000e9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <HAL_TIM_Base_MspInit+0x44>)
 8000e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <HAL_TIM_Base_MspInit+0x44>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6593      	str	r3, [r2, #88]	; 0x58
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <HAL_TIM_Base_MspInit+0x44>)
 8000e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	201c      	movs	r0, #28
 8000e94:	f001 fe1d 	bl	8002ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e98:	201c      	movs	r0, #28
 8000e9a:	f001 fe36 	bl	8002b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000

08000eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a1b      	ldr	r2, [pc, #108]	; (8000f38 <HAL_UART_MspInit+0x8c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d130      	bne.n	8000f30 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000ece:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <HAL_UART_MspInit+0x90>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed2:	4a1a      	ldr	r2, [pc, #104]	; (8000f3c <HAL_UART_MspInit+0x90>)
 8000ed4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ed8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <HAL_UART_MspInit+0x90>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_UART_MspInit+0x90>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <HAL_UART_MspInit+0x90>)
 8000eec:	f043 0304 	orr.w	r3, r3, #4
 8000ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef2:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_UART_MspInit+0x90>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000efe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f10:	2308      	movs	r3, #8
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4809      	ldr	r0, [pc, #36]	; (8000f40 <HAL_UART_MspInit+0x94>)
 8000f1c:	f002 f93e 	bl	800319c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	2034      	movs	r0, #52	; 0x34
 8000f26:	f001 fdd4 	bl	8002ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000f2a:	2034      	movs	r0, #52	; 0x34
 8000f2c:	f001 fded 	bl	8002b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000f30:	bf00      	nop
 8000f32:	3728      	adds	r7, #40	; 0x28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40004c00 	.word	0x40004c00
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	48000800 	.word	0x48000800

08000f44 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000f48:	e7fe      	b.n	8000f48 <NMI_Handler+0x4>

08000f4a <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000f4e:	e7fe      	b.n	8000f4e <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler+0x4>

08000f56 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000f5a:	e7fe      	b.n	8000f5a <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8000f60:	e7fe      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f62 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000f90:	f000 f906 	bl	80011a0 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <DMA1_Channel1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 channel1 global interrupt.
 */
void DMA1_Channel1_IRQHandler(void) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

	/* USER CODE END DMA1_Channel1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_adc1);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <DMA1_Channel1_IRQHandler+0x10>)
 8000f9e:	f001 ffad 	bl	8002efc <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	/* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000160 	.word	0x20000160

08000fac <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */


	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <TIM2_IRQHandler+0x10>)
 8000fb2:	f004 f8cf 	bl	8005154 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000025c 	.word	0x2000025c

08000fc0 <UART4_IRQHandler>:

/**
 * @brief This function handles UART4 global interrupt.
 */
void UART4_IRQHandler(void) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART4_IRQn 0 */

	/* USER CODE END UART4_IRQn 0 */
	HAL_UART_IRQHandler(&huart4);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <UART4_IRQHandler+0x10>)
 8000fc6:	f004 fd81 	bl	8005acc <HAL_UART_IRQHandler>
	/* USER CODE BEGIN UART4_IRQn 1 */

	/* USER CODE END UART4_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200001cc 	.word	0x200001cc

08000fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fdc:	4a14      	ldr	r2, [pc, #80]	; (8001030 <_sbrk+0x5c>)
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <_sbrk+0x60>)
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d102      	bne.n	8000ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <_sbrk+0x64>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <_sbrk+0x68>)
 8000ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	429a      	cmp	r2, r3
 8001002:	d207      	bcs.n	8001014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001004:	f005 fe88 	bl	8006d18 <__errno>
 8001008:	4603      	mov	r3, r0
 800100a:	220c      	movs	r2, #12
 800100c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	e009      	b.n	8001028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	4a05      	ldr	r2, [pc, #20]	; (8001038 <_sbrk+0x64>)
 8001024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001026:	68fb      	ldr	r3, [r7, #12]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20050000 	.word	0x20050000
 8001034:	00000400 	.word	0x00000400
 8001038:	200000a0 	.word	0x200000a0
 800103c:	200002e8 	.word	0x200002e8

08001040 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <SystemInit+0x5c>)
 8001046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104a:	4a14      	ldr	r2, [pc, #80]	; (800109c <SystemInit+0x5c>)
 800104c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <SystemInit+0x60>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a11      	ldr	r2, [pc, #68]	; (80010a0 <SystemInit+0x60>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <SystemInit+0x60>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <SystemInit+0x60>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <SystemInit+0x60>)
 800106c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001070:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001074:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <SystemInit+0x60>)
 8001078:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800107c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <SystemInit+0x60>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <SystemInit+0x60>)
 8001084:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001088:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <SystemInit+0x60>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00
 80010a0:	40021000 	.word	0x40021000

080010a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010a8:	f7ff ffca 	bl	8001040 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010ae:	e003      	b.n	80010b8 <LoopCopyDataInit>

080010b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010b6:	3104      	adds	r1, #4

080010b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010b8:	480a      	ldr	r0, [pc, #40]	; (80010e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010c0:	d3f6      	bcc.n	80010b0 <CopyDataInit>
	ldr	r2, =_sbss
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80010c4:	e002      	b.n	80010cc <LoopFillZerobss>

080010c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010c8:	f842 3b04 	str.w	r3, [r2], #4

080010cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <LoopForever+0x16>)
	cmp	r2, r3
 80010ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010d0:	d3f9      	bcc.n	80010c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010d2:	f005 fe27 	bl	8006d24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010d6:	f7ff fa5f 	bl	8000598 <main>

080010da <LoopForever>:

LoopForever:
    b LoopForever
 80010da:	e7fe      	b.n	80010da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010dc:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 80010e0:	080076b4 	.word	0x080076b4
	ldr	r0, =_sdata
 80010e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010e8:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80010ec:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80010f0:	200002e4 	.word	0x200002e4

080010f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010f4:	e7fe      	b.n	80010f4 <ADC1_2_IRQHandler>

080010f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010fc:	2300      	movs	r3, #0
 80010fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001100:	2003      	movs	r0, #3
 8001102:	f001 fcdb 	bl	8002abc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001106:	2000      	movs	r0, #0
 8001108:	f000 f80e 	bl	8001128 <HAL_InitTick>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	71fb      	strb	r3, [r7, #7]
 8001116:	e001      	b.n	800111c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001118:	f7ff fdb4 	bl	8000c84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800111c:	79fb      	ldrb	r3, [r7, #7]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001130:	2300      	movs	r3, #0
 8001132:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001134:	4b17      	ldr	r3, [pc, #92]	; (8001194 <HAL_InitTick+0x6c>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d023      	beq.n	8001184 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <HAL_InitTick+0x70>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <HAL_InitTick+0x6c>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4619      	mov	r1, r3
 8001146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114a:	fbb3 f3f1 	udiv	r3, r3, r1
 800114e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f001 fce7 	bl	8002b26 <HAL_SYSTICK_Config>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10f      	bne.n	800117e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b0f      	cmp	r3, #15
 8001162:	d809      	bhi.n	8001178 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001164:	2200      	movs	r2, #0
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	f04f 30ff 	mov.w	r0, #4294967295
 800116c:	f001 fcb1 	bl	8002ad2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001170:	4a0a      	ldr	r2, [pc, #40]	; (800119c <HAL_InitTick+0x74>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	e007      	b.n	8001188 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
 800117c:	e004      	b.n	8001188 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	73fb      	strb	r3, [r7, #15]
 8001182:	e001      	b.n	8001188 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000008 	.word	0x20000008
 8001198:	20000000 	.word	0x20000000
 800119c:	20000004 	.word	0x20000004

080011a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x20>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_IncTick+0x24>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <HAL_IncTick+0x24>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000008 	.word	0x20000008
 80011c4:	200002d0 	.word	0x200002d0

080011c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <HAL_GetTick+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	200002d0 	.word	0x200002d0

080011e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	609a      	str	r2, [r3, #8]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	609a      	str	r2, [r3, #8]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001248:	b480      	push	{r7}
 800124a:	b087      	sub	sp, #28
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	3360      	adds	r3, #96	; 0x60
 800125a:	461a      	mov	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <LL_ADC_SetOffset+0x44>)
 800126a:	4013      	ands	r3, r2
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	430a      	orrs	r2, r1
 8001276:	4313      	orrs	r3, r2
 8001278:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001280:	bf00      	nop
 8001282:	371c      	adds	r7, #28
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	03fff000 	.word	0x03fff000

08001290 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3360      	adds	r3, #96	; 0x60
 800129e:	461a      	mov	r2, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3360      	adds	r3, #96	; 0x60
 80012cc:	461a      	mov	r2, r3
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	431a      	orrs	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012e6:	bf00      	nop
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	615a      	str	r2, [r3, #20]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800132c:	2301      	movs	r3, #1
 800132e:	e000      	b.n	8001332 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800133e:	b480      	push	{r7}
 8001340:	b087      	sub	sp, #28
 8001342:	af00      	add	r7, sp, #0
 8001344:	60f8      	str	r0, [r7, #12]
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	3330      	adds	r3, #48	; 0x30
 800134e:	461a      	mov	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	0a1b      	lsrs	r3, r3, #8
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	4413      	add	r3, r2
 800135c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	f003 031f 	and.w	r3, r3, #31
 8001368:	211f      	movs	r1, #31
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	401a      	ands	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	0e9b      	lsrs	r3, r3, #26
 8001376:	f003 011f 	and.w	r1, r3, #31
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	f003 031f 	and.w	r3, r3, #31
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	431a      	orrs	r2, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800138a:	bf00      	nop
 800138c:	371c      	adds	r7, #28
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001396:	b480      	push	{r7}
 8001398:	b087      	sub	sp, #28
 800139a:	af00      	add	r7, sp, #0
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	3314      	adds	r3, #20
 80013a6:	461a      	mov	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	0e5b      	lsrs	r3, r3, #25
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	4413      	add	r3, r2
 80013b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	0d1b      	lsrs	r3, r3, #20
 80013be:	f003 031f 	and.w	r3, r3, #31
 80013c2:	2107      	movs	r1, #7
 80013c4:	fa01 f303 	lsl.w	r3, r1, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	401a      	ands	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	0d1b      	lsrs	r3, r3, #20
 80013d0:	f003 031f 	and.w	r3, r3, #31
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	431a      	orrs	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013e0:	bf00      	nop
 80013e2:	371c      	adds	r7, #28
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001404:	43db      	mvns	r3, r3
 8001406:	401a      	ands	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f003 0318 	and.w	r3, r3, #24
 800140e:	4908      	ldr	r1, [pc, #32]	; (8001430 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001410:	40d9      	lsrs	r1, r3
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	400b      	ands	r3, r1
 8001416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800141a:	431a      	orrs	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	0007ffff 	.word	0x0007ffff

08001434 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 031f 	and.w	r3, r3, #31
}
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001460:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	6093      	str	r3, [r2, #8]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001488:	d101      	bne.n	800148e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80014ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014d8:	d101      	bne.n	80014de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001500:	f043 0201 	orr.w	r2, r3, #1
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b01      	cmp	r3, #1
 8001526:	d101      	bne.n	800152c <LL_ADC_IsEnabled+0x18>
 8001528:	2301      	movs	r3, #1
 800152a:	e000      	b.n	800152e <LL_ADC_IsEnabled+0x1a>
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800154a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800154e:	f043 0204 	orr.w	r2, r3, #4
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	2b04      	cmp	r3, #4
 8001574:	d101      	bne.n	800157a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001576:	2301      	movs	r3, #1
 8001578:	e000      	b.n	800157c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	2b08      	cmp	r3, #8
 800159a:	d101      	bne.n	80015a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	b089      	sub	sp, #36	; 0x24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e134      	b.n	8001834 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d109      	bne.n	80015ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff fb77 	bl	8000ccc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff3f 	bl	8001474 <LL_ADC_IsDeepPowerDownEnabled>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d004      	beq.n	8001606 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff25 	bl	8001450 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff ff5a 	bl	80014c4 <LL_ADC_IsInternalRegulatorEnabled>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d115      	bne.n	8001642 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ff3e 	bl	800149c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001620:	4b86      	ldr	r3, [pc, #536]	; (800183c <HAL_ADC_Init+0x28c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	099b      	lsrs	r3, r3, #6
 8001626:	4a86      	ldr	r2, [pc, #536]	; (8001840 <HAL_ADC_Init+0x290>)
 8001628:	fba2 2303 	umull	r2, r3, r2, r3
 800162c:	099b      	lsrs	r3, r3, #6
 800162e:	3301      	adds	r3, #1
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001634:	e002      	b.n	800163c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	3b01      	subs	r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f9      	bne.n	8001636 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff3c 	bl	80014c4 <LL_ADC_IsInternalRegulatorEnabled>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10d      	bne.n	800166e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001656:	f043 0210 	orr.w	r2, r3, #16
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001662:	f043 0201 	orr.w	r2, r3, #1
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff ff75 	bl	8001562 <LL_ADC_REG_IsConversionOngoing>
 8001678:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	2b00      	cmp	r3, #0
 8001684:	f040 80cd 	bne.w	8001822 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	2b00      	cmp	r3, #0
 800168c:	f040 80c9 	bne.w	8001822 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001694:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001698:	f043 0202 	orr.w	r2, r3, #2
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff35 	bl	8001514 <LL_ADC_IsEnabled>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d110      	bne.n	80016d2 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016b0:	4864      	ldr	r0, [pc, #400]	; (8001844 <HAL_ADC_Init+0x294>)
 80016b2:	f7ff ff2f 	bl	8001514 <LL_ADC_IsEnabled>
 80016b6:	4604      	mov	r4, r0
 80016b8:	4863      	ldr	r0, [pc, #396]	; (8001848 <HAL_ADC_Init+0x298>)
 80016ba:	f7ff ff2b 	bl	8001514 <LL_ADC_IsEnabled>
 80016be:	4603      	mov	r3, r0
 80016c0:	4323      	orrs	r3, r4
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d105      	bne.n	80016d2 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4619      	mov	r1, r3
 80016cc:	485f      	ldr	r0, [pc, #380]	; (800184c <HAL_ADC_Init+0x29c>)
 80016ce:	f7ff fd87 	bl	80011e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	7e5b      	ldrb	r3, [r3, #25]
 80016d6:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016dc:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80016e2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80016e8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016f0:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d106      	bne.n	800170e <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	3b01      	subs	r3, #1
 8001706:	045b      	lsls	r3, r3, #17
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	2b00      	cmp	r3, #0
 8001714:	d009      	beq.n	800172a <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68da      	ldr	r2, [r3, #12]
 8001730:	4b47      	ldr	r3, [pc, #284]	; (8001850 <HAL_ADC_Init+0x2a0>)
 8001732:	4013      	ands	r3, r2
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	69b9      	ldr	r1, [r7, #24]
 800173a:	430b      	orrs	r3, r1
 800173c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ff0d 	bl	8001562 <LL_ADC_REG_IsConversionOngoing>
 8001748:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff ff1a 	bl	8001588 <LL_ADC_INJ_IsConversionOngoing>
 8001754:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d140      	bne.n	80017de <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d13d      	bne.n	80017de <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	7e1b      	ldrb	r3, [r3, #24]
 800176a:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800176c:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001774:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001784:	f023 0306 	bic.w	r3, r3, #6
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6812      	ldr	r2, [r2, #0]
 800178c:	69b9      	ldr	r1, [r7, #24]
 800178e:	430b      	orrs	r3, r1
 8001790:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001798:	2b01      	cmp	r3, #1
 800179a:	d118      	bne.n	80017ce <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80017a6:	f023 0304 	bic.w	r3, r3, #4
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017b2:	4311      	orrs	r1, r2
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017b8:	4311      	orrs	r1, r2
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017be:	430a      	orrs	r2, r1
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0201 	orr.w	r2, r2, #1
 80017ca:	611a      	str	r2, [r3, #16]
 80017cc:	e007      	b.n	80017de <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	691a      	ldr	r2, [r3, #16]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0201 	bic.w	r2, r2, #1
 80017dc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d10c      	bne.n	8001800 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	f023 010f 	bic.w	r1, r3, #15
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	1e5a      	subs	r2, r3, #1
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	631a      	str	r2, [r3, #48]	; 0x30
 80017fe:	e007      	b.n	8001810 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 020f 	bic.w	r2, r2, #15
 800180e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001814:	f023 0303 	bic.w	r3, r3, #3
 8001818:	f043 0201 	orr.w	r2, r3, #1
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	659a      	str	r2, [r3, #88]	; 0x58
 8001820:	e007      	b.n	8001832 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001826:	f043 0210 	orr.w	r2, r3, #16
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001832:	7ffb      	ldrb	r3, [r7, #31]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3724      	adds	r7, #36	; 0x24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd90      	pop	{r4, r7, pc}
 800183c:	20000000 	.word	0x20000000
 8001840:	053e2d63 	.word	0x053e2d63
 8001844:	50040000 	.word	0x50040000
 8001848:	50040100 	.word	0x50040100
 800184c:	50040300 	.word	0x50040300
 8001850:	fff0c007 	.word	0xfff0c007

08001854 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001860:	4850      	ldr	r0, [pc, #320]	; (80019a4 <HAL_ADC_Start_DMA+0x150>)
 8001862:	f7ff fde7 	bl	8001434 <LL_ADC_GetMultimode>
 8001866:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fe78 	bl	8001562 <LL_ADC_REG_IsConversionOngoing>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	f040 808e 	bne.w	8001996 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001880:	2b01      	cmp	r3, #1
 8001882:	d101      	bne.n	8001888 <HAL_ADC_Start_DMA+0x34>
 8001884:	2302      	movs	r3, #2
 8001886:	e089      	b.n	800199c <HAL_ADC_Start_DMA+0x148>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d005      	beq.n	80018a2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	2b05      	cmp	r3, #5
 800189a:	d002      	beq.n	80018a2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	2b09      	cmp	r3, #9
 80018a0:	d172      	bne.n	8001988 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 fca4 	bl	80021f0 <ADC_Enable>
 80018a8:	4603      	mov	r3, r0
 80018aa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80018ac:	7dfb      	ldrb	r3, [r7, #23]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d165      	bne.n	800197e <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018ba:	f023 0301 	bic.w	r3, r3, #1
 80018be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a37      	ldr	r2, [pc, #220]	; (80019a8 <HAL_ADC_Start_DMA+0x154>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d002      	beq.n	80018d6 <HAL_ADC_Start_DMA+0x82>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	e000      	b.n	80018d8 <HAL_ADC_Start_DMA+0x84>
 80018d6:	4b35      	ldr	r3, [pc, #212]	; (80019ac <HAL_ADC_Start_DMA+0x158>)
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	4293      	cmp	r3, r2
 80018de:	d002      	beq.n	80018e6 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d105      	bne.n	80018f2 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d006      	beq.n	800190c <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001902:	f023 0206 	bic.w	r2, r3, #6
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	65da      	str	r2, [r3, #92]	; 0x5c
 800190a:	e002      	b.n	8001912 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001916:	4a26      	ldr	r2, [pc, #152]	; (80019b0 <HAL_ADC_Start_DMA+0x15c>)
 8001918:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800191e:	4a25      	ldr	r2, [pc, #148]	; (80019b4 <HAL_ADC_Start_DMA+0x160>)
 8001920:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001926:	4a24      	ldr	r2, [pc, #144]	; (80019b8 <HAL_ADC_Start_DMA+0x164>)
 8001928:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	221c      	movs	r2, #28
 8001930:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f042 0210 	orr.w	r2, r2, #16
 8001948:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f042 0201 	orr.w	r2, r2, #1
 8001958:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	3340      	adds	r3, #64	; 0x40
 8001964:	4619      	mov	r1, r3
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f001 f991 	bl	8002c90 <HAL_DMA_Start_IT>
 800196e:	4603      	mov	r3, r0
 8001970:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fddf 	bl	800153a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800197c:	e00d      	b.n	800199a <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 8001986:	e008      	b.n	800199a <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001994:	e001      	b.n	800199a <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001996:	2302      	movs	r3, #2
 8001998:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800199a:	7dfb      	ldrb	r3, [r7, #23]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	50040300 	.word	0x50040300
 80019a8:	50040100 	.word	0x50040100
 80019ac:	50040000 	.word	0x50040000
 80019b0:	080022b5 	.word	0x080022b5
 80019b4:	0800238d 	.word	0x0800238d
 80019b8:	080023a9 	.word	0x080023a9

080019bc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b0b6      	sub	sp, #216	; 0xd8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d101      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x22>
 8001a16:	2302      	movs	r3, #2
 8001a18:	e3d5      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x7ce>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fd9b 	bl	8001562 <LL_ADC_REG_IsConversionOngoing>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f040 83ba 	bne.w	80021a8 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b05      	cmp	r3, #5
 8001a3a:	d824      	bhi.n	8001a86 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	3b02      	subs	r3, #2
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	d81b      	bhi.n	8001a7e <HAL_ADC_ConfigChannel+0x86>
 8001a46:	a201      	add	r2, pc, #4	; (adr r2, 8001a4c <HAL_ADC_ConfigChannel+0x54>)
 8001a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4c:	08001a5d 	.word	0x08001a5d
 8001a50:	08001a65 	.word	0x08001a65
 8001a54:	08001a6d 	.word	0x08001a6d
 8001a58:	08001a75 	.word	0x08001a75
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	220c      	movs	r2, #12
 8001a60:	605a      	str	r2, [r3, #4]
          break;
 8001a62:	e011      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	2212      	movs	r2, #18
 8001a68:	605a      	str	r2, [r3, #4]
          break;
 8001a6a:	e00d      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	2218      	movs	r2, #24
 8001a70:	605a      	str	r2, [r3, #4]
          break;
 8001a72:	e009      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a7a:	605a      	str	r2, [r3, #4]
          break;
 8001a7c:	e004      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	2206      	movs	r2, #6
 8001a82:	605a      	str	r2, [r3, #4]
          break;
 8001a84:	e000      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001a86:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6818      	ldr	r0, [r3, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	6859      	ldr	r1, [r3, #4]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	f7ff fc52 	bl	800133e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fd5f 	bl	8001562 <LL_ADC_REG_IsConversionOngoing>
 8001aa4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fd6b 	bl	8001588 <LL_ADC_INJ_IsConversionOngoing>
 8001ab2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ab6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f040 81c1 	bne.w	8001e42 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ac0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f040 81bc 	bne.w	8001e42 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ad2:	d10f      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2200      	movs	r2, #0
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f7ff fc59 	bl	8001396 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fc00 	bl	80012f2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001af2:	e00e      	b.n	8001b12 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6818      	ldr	r0, [r3, #0]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	6819      	ldr	r1, [r3, #0]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	461a      	mov	r2, r3
 8001b02:	f7ff fc48 	bl	8001396 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fbf0 	bl	80012f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	08db      	lsrs	r3, r3, #3
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d00a      	beq.n	8001b4a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	6919      	ldr	r1, [r3, #16]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b44:	f7ff fb80 	bl	8001248 <LL_ADC_SetOffset>
 8001b48:	e17b      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fb9d 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001b56:	4603      	mov	r3, r0
 8001b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10a      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x17e>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2100      	movs	r1, #0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fb92 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	0e9b      	lsrs	r3, r3, #26
 8001b70:	f003 021f 	and.w	r2, r3, #31
 8001b74:	e01e      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x1bc>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fb87 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001b82:	4603      	mov	r3, r0
 8001b84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b8c:	fa93 f3a3 	rbit	r3, r3
 8001b90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001ba4:	2320      	movs	r3, #32
 8001ba6:	e004      	b.n	8001bb2 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001ba8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bac:	fab3 f383 	clz	r3, r3
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d105      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x1d4>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	0e9b      	lsrs	r3, r3, #26
 8001bc6:	f003 031f 	and.w	r3, r3, #31
 8001bca:	e018      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x206>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bd8:	fa93 f3a3 	rbit	r3, r3
 8001bdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001be0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001be8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001bf0:	2320      	movs	r3, #32
 8001bf2:	e004      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001bf4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001bf8:	fab3 f383 	clz	r3, r3
 8001bfc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d106      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fb56 	bl	80012bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2101      	movs	r1, #1
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fb3a 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10a      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x244>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fb2f 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001c32:	4603      	mov	r3, r0
 8001c34:	0e9b      	lsrs	r3, r3, #26
 8001c36:	f003 021f 	and.w	r2, r3, #31
 8001c3a:	e01e      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x282>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2101      	movs	r1, #1
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fb24 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c52:	fa93 f3a3 	rbit	r3, r3
 8001c56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001c6a:	2320      	movs	r3, #32
 8001c6c:	e004      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001c6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d105      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x29a>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	0e9b      	lsrs	r3, r3, #26
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	e018      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x2cc>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c9e:	fa93 f3a3 	rbit	r3, r3
 8001ca2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001ca6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001caa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001cae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001cb6:	2320      	movs	r3, #32
 8001cb8:	e004      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001cba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d106      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2101      	movs	r1, #1
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff faf3 	bl	80012bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2102      	movs	r1, #2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fad7 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10a      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x30a>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2102      	movs	r1, #2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff facc 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	0e9b      	lsrs	r3, r3, #26
 8001cfc:	f003 021f 	and.w	r2, r3, #31
 8001d00:	e01e      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x348>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2102      	movs	r1, #2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fac1 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001d20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001d28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001d30:	2320      	movs	r3, #32
 8001d32:	e004      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001d34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d38:	fab3 f383 	clz	r3, r3
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d105      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x360>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	0e9b      	lsrs	r3, r3, #26
 8001d52:	f003 031f 	and.w	r3, r3, #31
 8001d56:	e016      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x38e>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d64:	fa93 f3a3 	rbit	r3, r3
 8001d68:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001d78:	2320      	movs	r3, #32
 8001d7a:	e004      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001d7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d80:	fab3 f383 	clz	r3, r3
 8001d84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d106      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2102      	movs	r1, #2
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fa92 	bl	80012bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2103      	movs	r1, #3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fa76 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10a      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x3cc>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2103      	movs	r1, #3
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fa6b 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	0e9b      	lsrs	r3, r3, #26
 8001dbe:	f003 021f 	and.w	r2, r3, #31
 8001dc2:	e017      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x3fc>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2103      	movs	r1, #3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fa60 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dd6:	fa93 f3a3 	rbit	r3, r3
 8001dda:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001ddc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dde:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001de0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001de6:	2320      	movs	r3, #32
 8001de8:	e003      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001dea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dec:	fab3 f383 	clz	r3, r3
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d105      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x414>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	0e9b      	lsrs	r3, r3, #26
 8001e06:	f003 031f 	and.w	r3, r3, #31
 8001e0a:	e011      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x438>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e14:	fa93 f3a3 	rbit	r3, r3
 8001e18:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001e1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001e24:	2320      	movs	r3, #32
 8001e26:	e003      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e2a:	fab3 f383 	clz	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d106      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2103      	movs	r1, #3
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fa3d 	bl	80012bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fb64 	bl	8001514 <LL_ADC_IsEnabled>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f040 8140 	bne.w	80020d4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6818      	ldr	r0, [r3, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	6819      	ldr	r1, [r3, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	461a      	mov	r2, r3
 8001e62:	f7ff fac3 	bl	80013ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	4a8f      	ldr	r2, [pc, #572]	; (80020a8 <HAL_ADC_ConfigChannel+0x6b0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	f040 8131 	bne.w	80020d4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10b      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x4a2>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	0e9b      	lsrs	r3, r3, #26
 8001e88:	3301      	adds	r3, #1
 8001e8a:	f003 031f 	and.w	r3, r3, #31
 8001e8e:	2b09      	cmp	r3, #9
 8001e90:	bf94      	ite	ls
 8001e92:	2301      	movls	r3, #1
 8001e94:	2300      	movhi	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	e019      	b.n	8001ece <HAL_ADC_ConfigChannel+0x4d6>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ea2:	fa93 f3a3 	rbit	r3, r3
 8001ea6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001ea8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eaa:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001eac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001eb2:	2320      	movs	r3, #32
 8001eb4:	e003      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001eb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001eb8:	fab3 f383 	clz	r3, r3
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f003 031f 	and.w	r3, r3, #31
 8001ec4:	2b09      	cmp	r3, #9
 8001ec6:	bf94      	ite	ls
 8001ec8:	2301      	movls	r3, #1
 8001eca:	2300      	movhi	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d079      	beq.n	8001fc6 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d107      	bne.n	8001eee <HAL_ADC_ConfigChannel+0x4f6>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	0e9b      	lsrs	r3, r3, #26
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	069b      	lsls	r3, r3, #26
 8001ee8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eec:	e015      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x522>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001efe:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001f06:	2320      	movs	r3, #32
 8001f08:	e003      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f0c:	fab3 f383 	clz	r3, r3
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	3301      	adds	r3, #1
 8001f14:	069b      	lsls	r3, r3, #26
 8001f16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d109      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x542>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	0e9b      	lsrs	r3, r3, #26
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	f003 031f 	and.w	r3, r3, #31
 8001f32:	2101      	movs	r1, #1
 8001f34:	fa01 f303 	lsl.w	r3, r1, r3
 8001f38:	e017      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x572>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f42:	fa93 f3a3 	rbit	r3, r3
 8001f46:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f4a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001f52:	2320      	movs	r3, #32
 8001f54:	e003      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f58:	fab3 f383 	clz	r3, r3
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	3301      	adds	r3, #1
 8001f60:	f003 031f 	and.w	r3, r3, #31
 8001f64:	2101      	movs	r1, #1
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	ea42 0103 	orr.w	r1, r2, r3
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10a      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x598>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	0e9b      	lsrs	r3, r3, #26
 8001f80:	3301      	adds	r3, #1
 8001f82:	f003 021f 	and.w	r2, r3, #31
 8001f86:	4613      	mov	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	051b      	lsls	r3, r3, #20
 8001f8e:	e018      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x5ca>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f98:	fa93 f3a3 	rbit	r3, r3
 8001f9c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001fa8:	2320      	movs	r3, #32
 8001faa:	e003      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	f003 021f 	and.w	r2, r3, #31
 8001fba:	4613      	mov	r3, r2
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	4413      	add	r3, r2
 8001fc0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fc2:	430b      	orrs	r3, r1
 8001fc4:	e081      	b.n	80020ca <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d107      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x5ea>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	0e9b      	lsrs	r3, r3, #26
 8001fd8:	3301      	adds	r3, #1
 8001fda:	069b      	lsls	r3, r3, #26
 8001fdc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fe0:	e015      	b.n	800200e <HAL_ADC_ConfigChannel+0x616>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001ffa:	2320      	movs	r3, #32
 8001ffc:	e003      	b.n	8002006 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002000:	fab3 f383 	clz	r3, r3
 8002004:	b2db      	uxtb	r3, r3
 8002006:	3301      	adds	r3, #1
 8002008:	069b      	lsls	r3, r3, #26
 800200a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002016:	2b00      	cmp	r3, #0
 8002018:	d109      	bne.n	800202e <HAL_ADC_ConfigChannel+0x636>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	0e9b      	lsrs	r3, r3, #26
 8002020:	3301      	adds	r3, #1
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	2101      	movs	r1, #1
 8002028:	fa01 f303 	lsl.w	r3, r1, r3
 800202c:	e017      	b.n	800205e <HAL_ADC_ConfigChannel+0x666>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002034:	6a3b      	ldr	r3, [r7, #32]
 8002036:	fa93 f3a3 	rbit	r3, r3
 800203a:	61fb      	str	r3, [r7, #28]
  return result;
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002046:	2320      	movs	r3, #32
 8002048:	e003      	b.n	8002052 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	fab3 f383 	clz	r3, r3
 8002050:	b2db      	uxtb	r3, r3
 8002052:	3301      	adds	r3, #1
 8002054:	f003 031f 	and.w	r3, r3, #31
 8002058:	2101      	movs	r1, #1
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	ea42 0103 	orr.w	r1, r2, r3
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10d      	bne.n	800208a <HAL_ADC_ConfigChannel+0x692>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	0e9b      	lsrs	r3, r3, #26
 8002074:	3301      	adds	r3, #1
 8002076:	f003 021f 	and.w	r2, r3, #31
 800207a:	4613      	mov	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	3b1e      	subs	r3, #30
 8002082:	051b      	lsls	r3, r3, #20
 8002084:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002088:	e01e      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x6d0>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fa93 f3a3 	rbit	r3, r3
 8002096:	613b      	str	r3, [r7, #16]
  return result;
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d104      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80020a2:	2320      	movs	r3, #32
 80020a4:	e006      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x6bc>
 80020a6:	bf00      	nop
 80020a8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	fab3 f383 	clz	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	3301      	adds	r3, #1
 80020b6:	f003 021f 	and.w	r2, r3, #31
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	3b1e      	subs	r3, #30
 80020c2:	051b      	lsls	r3, r3, #20
 80020c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020c8:	430b      	orrs	r3, r1
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	6892      	ldr	r2, [r2, #8]
 80020ce:	4619      	mov	r1, r3
 80020d0:	f7ff f961 	bl	8001396 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4b3d      	ldr	r3, [pc, #244]	; (80021d0 <HAL_ADC_ConfigChannel+0x7d8>)
 80020da:	4013      	ands	r3, r2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d06c      	beq.n	80021ba <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020e0:	483c      	ldr	r0, [pc, #240]	; (80021d4 <HAL_ADC_ConfigChannel+0x7dc>)
 80020e2:	f7ff f8a3 	bl	800122c <LL_ADC_GetCommonPathInternalCh>
 80020e6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a3a      	ldr	r2, [pc, #232]	; (80021d8 <HAL_ADC_ConfigChannel+0x7e0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d127      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d121      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a35      	ldr	r2, [pc, #212]	; (80021dc <HAL_ADC_ConfigChannel+0x7e4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d157      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800210a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800210e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002112:	4619      	mov	r1, r3
 8002114:	482f      	ldr	r0, [pc, #188]	; (80021d4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002116:	f7ff f876 	bl	8001206 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800211a:	4b31      	ldr	r3, [pc, #196]	; (80021e0 <HAL_ADC_ConfigChannel+0x7e8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	099b      	lsrs	r3, r3, #6
 8002120:	4a30      	ldr	r2, [pc, #192]	; (80021e4 <HAL_ADC_ConfigChannel+0x7ec>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	099b      	lsrs	r3, r3, #6
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	4613      	mov	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002134:	e002      	b.n	800213c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	3b01      	subs	r3, #1
 800213a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f9      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002142:	e03a      	b.n	80021ba <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a27      	ldr	r2, [pc, #156]	; (80021e8 <HAL_ADC_ConfigChannel+0x7f0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d113      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x77e>
 800214e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002152:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10d      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a1f      	ldr	r2, [pc, #124]	; (80021dc <HAL_ADC_ConfigChannel+0x7e4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d12a      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002164:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002168:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800216c:	4619      	mov	r1, r3
 800216e:	4819      	ldr	r0, [pc, #100]	; (80021d4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002170:	f7ff f849 	bl	8001206 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002174:	e021      	b.n	80021ba <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1c      	ldr	r2, [pc, #112]	; (80021ec <HAL_ADC_ConfigChannel+0x7f4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d11c      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002180:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d116      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a12      	ldr	r2, [pc, #72]	; (80021dc <HAL_ADC_ConfigChannel+0x7e4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d111      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002196:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800219a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800219e:	4619      	mov	r1, r3
 80021a0:	480c      	ldr	r0, [pc, #48]	; (80021d4 <HAL_ADC_ConfigChannel+0x7dc>)
 80021a2:	f7ff f830 	bl	8001206 <LL_ADC_SetCommonPathInternalCh>
 80021a6:	e008      	b.n	80021ba <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ac:	f043 0220 	orr.w	r2, r3, #32
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80021c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	37d8      	adds	r7, #216	; 0xd8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	80080000 	.word	0x80080000
 80021d4:	50040300 	.word	0x50040300
 80021d8:	c7520000 	.word	0xc7520000
 80021dc:	50040000 	.word	0x50040000
 80021e0:	20000000 	.word	0x20000000
 80021e4:	053e2d63 	.word	0x053e2d63
 80021e8:	cb840000 	.word	0xcb840000
 80021ec:	80000001 	.word	0x80000001

080021f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff f989 	bl	8001514 <LL_ADC_IsEnabled>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d14d      	bne.n	80022a4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	4b28      	ldr	r3, [pc, #160]	; (80022b0 <ADC_Enable+0xc0>)
 8002210:	4013      	ands	r3, r2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00d      	beq.n	8002232 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	f043 0210 	orr.w	r2, r3, #16
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002226:	f043 0201 	orr.w	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e039      	b.n	80022a6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff f958 	bl	80014ec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800223c:	f7fe ffc4 	bl	80011c8 <HAL_GetTick>
 8002240:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002242:	e028      	b.n	8002296 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff f963 	bl	8001514 <LL_ADC_IsEnabled>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d104      	bne.n	800225e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff f947 	bl	80014ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800225e:	f7fe ffb3 	bl	80011c8 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d914      	bls.n	8002296 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b01      	cmp	r3, #1
 8002278:	d00d      	beq.n	8002296 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227e:	f043 0210 	orr.w	r2, r3, #16
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228a:	f043 0201 	orr.w	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e007      	b.n	80022a6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d1cf      	bne.n	8002244 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	8000003f 	.word	0x8000003f

080022b4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d14b      	bne.n	8002366 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d021      	beq.n	800232c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff f813 	bl	8001318 <LL_ADC_REG_IsTriggerSourceSWStart>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d032      	beq.n	800235e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d12b      	bne.n	800235e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002316:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d11f      	bne.n	800235e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002322:	f043 0201 	orr.w	r2, r3, #1
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	659a      	str	r2, [r3, #88]	; 0x58
 800232a:	e018      	b.n	800235e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d111      	bne.n	800235e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d105      	bne.n	800235e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002356:	f043 0201 	orr.w	r2, r3, #1
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f7ff fb2c 	bl	80019bc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002364:	e00e      	b.n	8002384 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236a:	f003 0310 	and.w	r3, r3, #16
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f7ff fb36 	bl	80019e4 <HAL_ADC_ErrorCallback>
}
 8002378:	e004      	b.n	8002384 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800237e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	4798      	blx	r3
}
 8002384:	bf00      	nop
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f7ff fb18 	bl	80019d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023a0:	bf00      	nop
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c6:	f043 0204 	orr.w	r2, r3, #4
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f7ff fb08 	bl	80019e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023d4:	bf00      	nop
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <LL_ADC_IsEnabled>:
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <LL_ADC_IsEnabled+0x18>
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <LL_ADC_IsEnabled+0x1a>
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <LL_ADC_REG_IsConversionOngoing>:
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	2b04      	cmp	r3, #4
 8002414:	d101      	bne.n	800241a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b0a1      	sub	sp, #132	; 0x84
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002442:	2302      	movs	r3, #2
 8002444:	e089      	b.n	800255a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800244e:	2300      	movs	r3, #0
 8002450:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002452:	2300      	movs	r3, #0
 8002454:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a42      	ldr	r2, [pc, #264]	; (8002564 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d102      	bne.n	8002466 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002460:	4b41      	ldr	r3, [pc, #260]	; (8002568 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	e001      	b.n	800246a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10b      	bne.n	8002488 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002474:	f043 0220 	orr.w	r2, r3, #32
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e068      	b.n	800255a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff ffb9 	bl	8002402 <LL_ADC_REG_IsConversionOngoing>
 8002490:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff ffb3 	bl	8002402 <LL_ADC_REG_IsConversionOngoing>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d14a      	bne.n	8002538 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80024a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d147      	bne.n	8002538 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80024a8:	4b30      	ldr	r3, [pc, #192]	; (800256c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80024aa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d027      	beq.n	8002504 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80024b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	6859      	ldr	r1, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024c6:	035b      	lsls	r3, r3, #13
 80024c8:	430b      	orrs	r3, r1
 80024ca:	431a      	orrs	r2, r3
 80024cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024d0:	4824      	ldr	r0, [pc, #144]	; (8002564 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80024d2:	f7ff ff83 	bl	80023dc <LL_ADC_IsEnabled>
 80024d6:	4604      	mov	r4, r0
 80024d8:	4823      	ldr	r0, [pc, #140]	; (8002568 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80024da:	f7ff ff7f 	bl	80023dc <LL_ADC_IsEnabled>
 80024de:	4603      	mov	r3, r0
 80024e0:	4323      	orrs	r3, r4
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d132      	bne.n	800254c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80024e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024ee:	f023 030f 	bic.w	r3, r3, #15
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	6811      	ldr	r1, [r2, #0]
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	6892      	ldr	r2, [r2, #8]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	431a      	orrs	r2, r3
 80024fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002500:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002502:	e023      	b.n	800254c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002504:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800250c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800250e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002510:	4814      	ldr	r0, [pc, #80]	; (8002564 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002512:	f7ff ff63 	bl	80023dc <LL_ADC_IsEnabled>
 8002516:	4604      	mov	r4, r0
 8002518:	4813      	ldr	r0, [pc, #76]	; (8002568 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800251a:	f7ff ff5f 	bl	80023dc <LL_ADC_IsEnabled>
 800251e:	4603      	mov	r3, r0
 8002520:	4323      	orrs	r3, r4
 8002522:	2b00      	cmp	r3, #0
 8002524:	d112      	bne.n	800254c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800252e:	f023 030f 	bic.w	r3, r3, #15
 8002532:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002534:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002536:	e009      	b.n	800254c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253c:	f043 0220 	orr.w	r2, r3, #32
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800254a:	e000      	b.n	800254e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800254c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002556:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800255a:	4618      	mov	r0, r3
 800255c:	3784      	adds	r7, #132	; 0x84
 800255e:	46bd      	mov	sp, r7
 8002560:	bd90      	pop	{r4, r7, pc}
 8002562:	bf00      	nop
 8002564:	50040000 	.word	0x50040000
 8002568:	50040100 	.word	0x50040100
 800256c:	50040300 	.word	0x50040300

08002570 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e0ed      	b.n	800275e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d102      	bne.n	8002594 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7fe fc24 	bl	8000ddc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0202 	bic.w	r2, r2, #2
 80025a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025a4:	f7fe fe10 	bl	80011c8 <HAL_GetTick>
 80025a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025aa:	e012      	b.n	80025d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025ac:	f7fe fe0c 	bl	80011c8 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b0a      	cmp	r3, #10
 80025b8:	d90b      	bls.n	80025d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2205      	movs	r2, #5
 80025ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e0c5      	b.n	800275e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1e5      	bne.n	80025ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025f0:	f7fe fdea 	bl	80011c8 <HAL_GetTick>
 80025f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025f6:	e012      	b.n	800261e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025f8:	f7fe fde6 	bl	80011c8 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b0a      	cmp	r3, #10
 8002604:	d90b      	bls.n	800261e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2205      	movs	r2, #5
 8002616:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e09f      	b.n	800275e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0e5      	beq.n	80025f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	7e1b      	ldrb	r3, [r3, #24]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d108      	bne.n	8002646 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	e007      	b.n	8002656 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002654:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	7e5b      	ldrb	r3, [r3, #25]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d108      	bne.n	8002670 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	e007      	b.n	8002680 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800267e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	7e9b      	ldrb	r3, [r3, #26]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d108      	bne.n	800269a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0220 	orr.w	r2, r2, #32
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	e007      	b.n	80026aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0220 	bic.w	r2, r2, #32
 80026a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	7edb      	ldrb	r3, [r3, #27]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d108      	bne.n	80026c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0210 	bic.w	r2, r2, #16
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	e007      	b.n	80026d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0210 	orr.w	r2, r2, #16
 80026d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	7f1b      	ldrb	r3, [r3, #28]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d108      	bne.n	80026ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0208 	orr.w	r2, r2, #8
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	e007      	b.n	80026fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0208 	bic.w	r2, r2, #8
 80026fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	7f5b      	ldrb	r3, [r3, #29]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d108      	bne.n	8002718 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0204 	orr.w	r2, r2, #4
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	e007      	b.n	8002728 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0204 	bic.w	r2, r2, #4
 8002726:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	ea42 0103 	orr.w	r1, r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	1e5a      	subs	r2, r3, #1
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002766:	b480      	push	{r7}
 8002768:	b089      	sub	sp, #36	; 0x24
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 3020 	ldrb.w	r3, [r3, #32]
 800277a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002784:	7ffb      	ldrb	r3, [r7, #31]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d003      	beq.n	8002792 <HAL_CAN_AddTxMessage+0x2c>
 800278a:	7ffb      	ldrb	r3, [r7, #31]
 800278c:	2b02      	cmp	r3, #2
 800278e:	f040 80b8 	bne.w	8002902 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10a      	bne.n	80027b2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d105      	bne.n	80027b2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 80a0 	beq.w	80028f2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	0e1b      	lsrs	r3, r3, #24
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d907      	bls.n	80027d2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e09e      	b.n	8002910 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80027d2:	2201      	movs	r2, #1
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	409a      	lsls	r2, r3
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10d      	bne.n	8002800 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80027ee:	68f9      	ldr	r1, [r7, #12]
 80027f0:	6809      	ldr	r1, [r1, #0]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	3318      	adds	r3, #24
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	440b      	add	r3, r1
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	e00f      	b.n	8002820 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800280a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002810:	68f9      	ldr	r1, [r7, #12]
 8002812:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002814:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	3318      	adds	r3, #24
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	440b      	add	r3, r1
 800281e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6819      	ldr	r1, [r3, #0]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	3318      	adds	r3, #24
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	440b      	add	r3, r1
 8002830:	3304      	adds	r3, #4
 8002832:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	7d1b      	ldrb	r3, [r3, #20]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d111      	bne.n	8002860 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	3318      	adds	r3, #24
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	4413      	add	r3, r2
 8002848:	3304      	adds	r3, #4
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	6811      	ldr	r1, [r2, #0]
 8002850:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	3318      	adds	r3, #24
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	440b      	add	r3, r1
 800285c:	3304      	adds	r3, #4
 800285e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3307      	adds	r3, #7
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	061a      	lsls	r2, r3, #24
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3306      	adds	r3, #6
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	041b      	lsls	r3, r3, #16
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3305      	adds	r3, #5
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	4313      	orrs	r3, r2
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	3204      	adds	r2, #4
 8002880:	7812      	ldrb	r2, [r2, #0]
 8002882:	4610      	mov	r0, r2
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	6811      	ldr	r1, [r2, #0]
 8002888:	ea43 0200 	orr.w	r2, r3, r0
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	440b      	add	r3, r1
 8002892:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002896:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3303      	adds	r3, #3
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	061a      	lsls	r2, r3, #24
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3302      	adds	r3, #2
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	041b      	lsls	r3, r3, #16
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3301      	adds	r3, #1
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	4313      	orrs	r3, r2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	7812      	ldrb	r2, [r2, #0]
 80028b8:	4610      	mov	r0, r2
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	6811      	ldr	r1, [r2, #0]
 80028be:	ea43 0200 	orr.w	r2, r3, r0
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	440b      	add	r3, r1
 80028c8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80028cc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	3318      	adds	r3, #24
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	4413      	add	r3, r2
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	6811      	ldr	r1, [r2, #0]
 80028e0:	f043 0201 	orr.w	r2, r3, #1
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	3318      	adds	r3, #24
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	440b      	add	r3, r1
 80028ec:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	e00e      	b.n	8002910 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e006      	b.n	8002910 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
  }
}
 8002910:	4618      	mov	r0, r3
 8002912:	3724      	adds	r7, #36	; 0x24
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002938:	4013      	ands	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800294c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800294e:	4a04      	ldr	r2, [pc, #16]	; (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	60d3      	str	r3, [r2, #12]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002968:	4b04      	ldr	r3, [pc, #16]	; (800297c <__NVIC_GetPriorityGrouping+0x18>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	f003 0307 	and.w	r3, r3, #7
}
 8002972:	4618      	mov	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	2b00      	cmp	r3, #0
 8002990:	db0b      	blt.n	80029aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	f003 021f 	and.w	r2, r3, #31
 8002998:	4907      	ldr	r1, [pc, #28]	; (80029b8 <__NVIC_EnableIRQ+0x38>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	2001      	movs	r0, #1
 80029a2:	fa00 f202 	lsl.w	r2, r0, r2
 80029a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	e000e100 	.word	0xe000e100

080029bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	6039      	str	r1, [r7, #0]
 80029c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	db0a      	blt.n	80029e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	490c      	ldr	r1, [pc, #48]	; (8002a08 <__NVIC_SetPriority+0x4c>)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	0112      	lsls	r2, r2, #4
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	440b      	add	r3, r1
 80029e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e4:	e00a      	b.n	80029fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4908      	ldr	r1, [pc, #32]	; (8002a0c <__NVIC_SetPriority+0x50>)
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	3b04      	subs	r3, #4
 80029f4:	0112      	lsls	r2, r2, #4
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	440b      	add	r3, r1
 80029fa:	761a      	strb	r2, [r3, #24]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	e000e100 	.word	0xe000e100
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	; 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f1c3 0307 	rsb	r3, r3, #7
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	bf28      	it	cs
 8002a2e:	2304      	movcs	r3, #4
 8002a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3304      	adds	r3, #4
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d902      	bls.n	8002a40 <NVIC_EncodePriority+0x30>
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3b03      	subs	r3, #3
 8002a3e:	e000      	b.n	8002a42 <NVIC_EncodePriority+0x32>
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	f04f 32ff 	mov.w	r2, #4294967295
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	401a      	ands	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a62:	43d9      	mvns	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	4313      	orrs	r3, r2
         );
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3724      	adds	r7, #36	; 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a88:	d301      	bcc.n	8002a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e00f      	b.n	8002aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <SysTick_Config+0x40>)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a96:	210f      	movs	r1, #15
 8002a98:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9c:	f7ff ff8e 	bl	80029bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aa0:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <SysTick_Config+0x40>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aa6:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <SysTick_Config+0x40>)
 8002aa8:	2207      	movs	r2, #7
 8002aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	e000e010 	.word	0xe000e010

08002abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff ff29 	bl	800291c <__NVIC_SetPriorityGrouping>
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4603      	mov	r3, r0
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ae4:	f7ff ff3e 	bl	8002964 <__NVIC_GetPriorityGrouping>
 8002ae8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	6978      	ldr	r0, [r7, #20]
 8002af0:	f7ff ff8e 	bl	8002a10 <NVIC_EncodePriority>
 8002af4:	4602      	mov	r2, r0
 8002af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002afa:	4611      	mov	r1, r2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff5d 	bl	80029bc <__NVIC_SetPriority>
}
 8002b02:	bf00      	nop
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	4603      	mov	r3, r0
 8002b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff ff31 	bl	8002980 <__NVIC_EnableIRQ>
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff ffa2 	bl	8002a78 <SysTick_Config>
 8002b34:	4603      	mov	r3, r0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e08d      	b.n	8002c6e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	4b47      	ldr	r3, [pc, #284]	; (8002c78 <HAL_DMA_Init+0x138>)
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d80f      	bhi.n	8002b7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	4b45      	ldr	r3, [pc, #276]	; (8002c7c <HAL_DMA_Init+0x13c>)
 8002b66:	4413      	add	r3, r2
 8002b68:	4a45      	ldr	r2, [pc, #276]	; (8002c80 <HAL_DMA_Init+0x140>)
 8002b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6e:	091b      	lsrs	r3, r3, #4
 8002b70:	009a      	lsls	r2, r3, #2
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a42      	ldr	r2, [pc, #264]	; (8002c84 <HAL_DMA_Init+0x144>)
 8002b7a:	641a      	str	r2, [r3, #64]	; 0x40
 8002b7c:	e00e      	b.n	8002b9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	4b40      	ldr	r3, [pc, #256]	; (8002c88 <HAL_DMA_Init+0x148>)
 8002b86:	4413      	add	r3, r2
 8002b88:	4a3d      	ldr	r2, [pc, #244]	; (8002c80 <HAL_DMA_Init+0x140>)
 8002b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8e:	091b      	lsrs	r3, r3, #4
 8002b90:	009a      	lsls	r2, r3, #2
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a3c      	ldr	r2, [pc, #240]	; (8002c8c <HAL_DMA_Init+0x14c>)
 8002b9a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002bc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fa72 	bl	80030d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bfc:	d102      	bne.n	8002c04 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c18:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d010      	beq.n	8002c44 <HAL_DMA_Init+0x104>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d80c      	bhi.n	8002c44 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fa92 	bl	8003154 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	e008      	b.n	8002c56 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40020407 	.word	0x40020407
 8002c7c:	bffdfff8 	.word	0xbffdfff8
 8002c80:	cccccccd 	.word	0xcccccccd
 8002c84:	40020000 	.word	0x40020000
 8002c88:	bffdfbf8 	.word	0xbffdfbf8
 8002c8c:	40020400 	.word	0x40020400

08002c90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_DMA_Start_IT+0x20>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e066      	b.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d155      	bne.n	8002d70 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0201 	bic.w	r2, r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	68b9      	ldr	r1, [r7, #8]
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 f9b6 	bl	800305a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d008      	beq.n	8002d08 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 020e 	orr.w	r2, r2, #14
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	e00f      	b.n	8002d28 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0204 	bic.w	r2, r2, #4
 8002d16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 020a 	orr.w	r2, r2, #10
 8002d26:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d007      	beq.n	8002d46 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d44:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d007      	beq.n	8002d5e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d5c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 0201 	orr.w	r2, r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	e005      	b.n	8002d7c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b085      	sub	sp, #20
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d008      	beq.n	8002db0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2204      	movs	r2, #4
 8002da2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e040      	b.n	8002e32 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 020e 	bic.w	r2, r2, #14
 8002dbe:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dce:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0201 	bic.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de4:	f003 021c 	and.w	r2, r3, #28
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	2101      	movs	r1, #1
 8002dee:	fa01 f202 	lsl.w	r2, r1, r2
 8002df2:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002dfc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00c      	beq.n	8002e20 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e14:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e1e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d005      	beq.n	8002e62 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2204      	movs	r2, #4
 8002e5a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	73fb      	strb	r3, [r7, #15]
 8002e60:	e047      	b.n	8002ef2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 020e 	bic.w	r2, r2, #14
 8002e70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0201 	bic.w	r2, r2, #1
 8002e80:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	f003 021c 	and.w	r2, r3, #28
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002eae:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00c      	beq.n	8002ed2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ec6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ed0:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	4798      	blx	r3
    }
  }
  return status;
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f18:	f003 031c 	and.w	r3, r3, #28
 8002f1c:	2204      	movs	r2, #4
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d026      	beq.n	8002f76 <HAL_DMA_IRQHandler+0x7a>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d021      	beq.n	8002f76 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d107      	bne.n	8002f50 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0204 	bic.w	r2, r2, #4
 8002f4e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f54:	f003 021c 	and.w	r2, r3, #28
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	2104      	movs	r1, #4
 8002f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f62:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d071      	beq.n	8003050 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002f74:	e06c      	b.n	8003050 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	f003 031c 	and.w	r3, r3, #28
 8002f7e:	2202      	movs	r2, #2
 8002f80:	409a      	lsls	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d02e      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0xec>
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d029      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10b      	bne.n	8002fba <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 020a 	bic.w	r2, r2, #10
 8002fb0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	f003 021c 	and.w	r2, r3, #28
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	2102      	movs	r1, #2
 8002fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fcc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d038      	beq.n	8003050 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002fe6:	e033      	b.n	8003050 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fec:	f003 031c 	and.w	r3, r3, #28
 8002ff0:	2208      	movs	r2, #8
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d02a      	beq.n	8003052 <HAL_DMA_IRQHandler+0x156>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d025      	beq.n	8003052 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 020e 	bic.w	r2, r2, #14
 8003014:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	f003 021c 	and.w	r2, r3, #28
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	2101      	movs	r1, #1
 8003024:	fa01 f202 	lsl.w	r2, r1, r2
 8003028:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003044:	2b00      	cmp	r3, #0
 8003046:	d004      	beq.n	8003052 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003050:	bf00      	nop
 8003052:	bf00      	nop
}
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800305a:	b480      	push	{r7}
 800305c:	b085      	sub	sp, #20
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003070:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003076:	2b00      	cmp	r3, #0
 8003078:	d004      	beq.n	8003084 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003082:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003088:	f003 021c 	and.w	r2, r3, #28
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	2101      	movs	r1, #1
 8003092:	fa01 f202 	lsl.w	r2, r1, r2
 8003096:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	2b10      	cmp	r3, #16
 80030a6:	d108      	bne.n	80030ba <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80030b8:	e007      	b.n	80030ca <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	60da      	str	r2, [r3, #12]
}
 80030ca:	bf00      	nop
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	4b17      	ldr	r3, [pc, #92]	; (8003144 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d80a      	bhi.n	8003102 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f0:	089b      	lsrs	r3, r3, #2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030f8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6493      	str	r3, [r2, #72]	; 0x48
 8003100:	e007      	b.n	8003112 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	089b      	lsrs	r3, r3, #2
 8003108:	009a      	lsls	r2, r3, #2
 800310a:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800310c:	4413      	add	r3, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	b2db      	uxtb	r3, r3
 8003118:	3b08      	subs	r3, #8
 800311a:	4a0c      	ldr	r2, [pc, #48]	; (800314c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800311c:	fba2 2303 	umull	r2, r3, r2, r3
 8003120:	091b      	lsrs	r3, r3, #4
 8003122:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a0a      	ldr	r2, [pc, #40]	; (8003150 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003128:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	2201      	movs	r2, #1
 8003132:	409a      	lsls	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003138:	bf00      	nop
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	40020407 	.word	0x40020407
 8003148:	4002081c 	.word	0x4002081c
 800314c:	cccccccd 	.word	0xcccccccd
 8003150:	40020880 	.word	0x40020880

08003154 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	b2db      	uxtb	r3, r3
 8003162:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	461a      	mov	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a08      	ldr	r2, [pc, #32]	; (8003198 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003176:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	3b01      	subs	r3, #1
 800317c:	f003 0303 	and.w	r3, r3, #3
 8003180:	2201      	movs	r2, #1
 8003182:	409a      	lsls	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003188:	bf00      	nop
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	1000823f 	.word	0x1000823f
 8003198:	40020940 	.word	0x40020940

0800319c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031aa:	e166      	b.n	800347a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	2101      	movs	r1, #1
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	fa01 f303 	lsl.w	r3, r1, r3
 80031b8:	4013      	ands	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 8158 	beq.w	8003474 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d00b      	beq.n	80031e4 <HAL_GPIO_Init+0x48>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d007      	beq.n	80031e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031d8:	2b11      	cmp	r3, #17
 80031da:	d003      	beq.n	80031e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b12      	cmp	r3, #18
 80031e2:	d130      	bne.n	8003246 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	2203      	movs	r2, #3
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4013      	ands	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800321a:	2201      	movs	r2, #1
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43db      	mvns	r3, r3
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4013      	ands	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	091b      	lsrs	r3, r3, #4
 8003230:	f003 0201 	and.w	r2, r3, #1
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	2203      	movs	r2, #3
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43db      	mvns	r3, r3
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4013      	ands	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d003      	beq.n	8003286 <HAL_GPIO_Init+0xea>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b12      	cmp	r3, #18
 8003284:	d123      	bne.n	80032ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	08da      	lsrs	r2, r3, #3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3208      	adds	r2, #8
 800328e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003292:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	220f      	movs	r2, #15
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4013      	ands	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	08da      	lsrs	r2, r3, #3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3208      	adds	r2, #8
 80032c8:	6939      	ldr	r1, [r7, #16]
 80032ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	2203      	movs	r2, #3
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4013      	ands	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 0203 	and.w	r2, r3, #3
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 80b2 	beq.w	8003474 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003310:	4b61      	ldr	r3, [pc, #388]	; (8003498 <HAL_GPIO_Init+0x2fc>)
 8003312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003314:	4a60      	ldr	r2, [pc, #384]	; (8003498 <HAL_GPIO_Init+0x2fc>)
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	6613      	str	r3, [r2, #96]	; 0x60
 800331c:	4b5e      	ldr	r3, [pc, #376]	; (8003498 <HAL_GPIO_Init+0x2fc>)
 800331e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003328:	4a5c      	ldr	r2, [pc, #368]	; (800349c <HAL_GPIO_Init+0x300>)
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	089b      	lsrs	r3, r3, #2
 800332e:	3302      	adds	r3, #2
 8003330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003334:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f003 0303 	and.w	r3, r3, #3
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	220f      	movs	r2, #15
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4013      	ands	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003352:	d02b      	beq.n	80033ac <HAL_GPIO_Init+0x210>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a52      	ldr	r2, [pc, #328]	; (80034a0 <HAL_GPIO_Init+0x304>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d025      	beq.n	80033a8 <HAL_GPIO_Init+0x20c>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a51      	ldr	r2, [pc, #324]	; (80034a4 <HAL_GPIO_Init+0x308>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d01f      	beq.n	80033a4 <HAL_GPIO_Init+0x208>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a50      	ldr	r2, [pc, #320]	; (80034a8 <HAL_GPIO_Init+0x30c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d019      	beq.n	80033a0 <HAL_GPIO_Init+0x204>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a4f      	ldr	r2, [pc, #316]	; (80034ac <HAL_GPIO_Init+0x310>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d013      	beq.n	800339c <HAL_GPIO_Init+0x200>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a4e      	ldr	r2, [pc, #312]	; (80034b0 <HAL_GPIO_Init+0x314>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d00d      	beq.n	8003398 <HAL_GPIO_Init+0x1fc>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a4d      	ldr	r2, [pc, #308]	; (80034b4 <HAL_GPIO_Init+0x318>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d007      	beq.n	8003394 <HAL_GPIO_Init+0x1f8>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a4c      	ldr	r2, [pc, #304]	; (80034b8 <HAL_GPIO_Init+0x31c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d101      	bne.n	8003390 <HAL_GPIO_Init+0x1f4>
 800338c:	2307      	movs	r3, #7
 800338e:	e00e      	b.n	80033ae <HAL_GPIO_Init+0x212>
 8003390:	2308      	movs	r3, #8
 8003392:	e00c      	b.n	80033ae <HAL_GPIO_Init+0x212>
 8003394:	2306      	movs	r3, #6
 8003396:	e00a      	b.n	80033ae <HAL_GPIO_Init+0x212>
 8003398:	2305      	movs	r3, #5
 800339a:	e008      	b.n	80033ae <HAL_GPIO_Init+0x212>
 800339c:	2304      	movs	r3, #4
 800339e:	e006      	b.n	80033ae <HAL_GPIO_Init+0x212>
 80033a0:	2303      	movs	r3, #3
 80033a2:	e004      	b.n	80033ae <HAL_GPIO_Init+0x212>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e002      	b.n	80033ae <HAL_GPIO_Init+0x212>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <HAL_GPIO_Init+0x212>
 80033ac:	2300      	movs	r3, #0
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	f002 0203 	and.w	r2, r2, #3
 80033b4:	0092      	lsls	r2, r2, #2
 80033b6:	4093      	lsls	r3, r2
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033be:	4937      	ldr	r1, [pc, #220]	; (800349c <HAL_GPIO_Init+0x300>)
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	089b      	lsrs	r3, r3, #2
 80033c4:	3302      	adds	r3, #2
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80033cc:	4b3b      	ldr	r3, [pc, #236]	; (80034bc <HAL_GPIO_Init+0x320>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	43db      	mvns	r3, r3
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4013      	ands	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033f0:	4a32      	ldr	r2, [pc, #200]	; (80034bc <HAL_GPIO_Init+0x320>)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80033f6:	4b31      	ldr	r3, [pc, #196]	; (80034bc <HAL_GPIO_Init+0x320>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	43db      	mvns	r3, r3
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4013      	ands	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800341a:	4a28      	ldr	r2, [pc, #160]	; (80034bc <HAL_GPIO_Init+0x320>)
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003420:	4b26      	ldr	r3, [pc, #152]	; (80034bc <HAL_GPIO_Init+0x320>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	43db      	mvns	r3, r3
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4013      	ands	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003444:	4a1d      	ldr	r2, [pc, #116]	; (80034bc <HAL_GPIO_Init+0x320>)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800344a:	4b1c      	ldr	r3, [pc, #112]	; (80034bc <HAL_GPIO_Init+0x320>)
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	43db      	mvns	r3, r3
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4013      	ands	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800346e:	4a13      	ldr	r2, [pc, #76]	; (80034bc <HAL_GPIO_Init+0x320>)
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	3301      	adds	r3, #1
 8003478:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	fa22 f303 	lsr.w	r3, r2, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	f47f ae91 	bne.w	80031ac <HAL_GPIO_Init+0x10>
  }
}
 800348a:	bf00      	nop
 800348c:	bf00      	nop
 800348e:	371c      	adds	r7, #28
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	40021000 	.word	0x40021000
 800349c:	40010000 	.word	0x40010000
 80034a0:	48000400 	.word	0x48000400
 80034a4:	48000800 	.word	0x48000800
 80034a8:	48000c00 	.word	0x48000c00
 80034ac:	48001000 	.word	0x48001000
 80034b0:	48001400 	.word	0x48001400
 80034b4:	48001800 	.word	0x48001800
 80034b8:	48001c00 	.word	0x48001c00
 80034bc:	40010400 	.word	0x40010400

080034c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	887b      	ldrh	r3, [r7, #2]
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034d8:	2301      	movs	r3, #1
 80034da:	73fb      	strb	r3, [r7, #15]
 80034dc:	e001      	b.n	80034e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034de:	2300      	movs	r3, #0
 80034e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	807b      	strh	r3, [r7, #2]
 80034fc:	4613      	mov	r3, r2
 80034fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003500:	787b      	ldrb	r3, [r7, #1]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003506:	887a      	ldrh	r2, [r7, #2]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800350c:	e002      	b.n	8003514 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800350e:	887a      	ldrh	r2, [r7, #2]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003524:	4b0d      	ldr	r3, [pc, #52]	; (800355c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800352c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003530:	d102      	bne.n	8003538 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003536:	e00b      	b.n	8003550 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003538:	4b08      	ldr	r3, [pc, #32]	; (800355c <HAL_PWREx_GetVoltageRange+0x3c>)
 800353a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800353e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003546:	d102      	bne.n	800354e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003548:	f44f 7300 	mov.w	r3, #512	; 0x200
 800354c:	e000      	b.n	8003550 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800354e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003550:	4618      	mov	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40007000 	.word	0x40007000

08003560 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d141      	bne.n	80035f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800356e:	4b4b      	ldr	r3, [pc, #300]	; (800369c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800357a:	d131      	bne.n	80035e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800357c:	4b47      	ldr	r3, [pc, #284]	; (800369c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800357e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003582:	4a46      	ldr	r2, [pc, #280]	; (800369c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003588:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800358c:	4b43      	ldr	r3, [pc, #268]	; (800369c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003594:	4a41      	ldr	r2, [pc, #260]	; (800369c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800359a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800359c:	4b40      	ldr	r3, [pc, #256]	; (80036a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2232      	movs	r2, #50	; 0x32
 80035a2:	fb02 f303 	mul.w	r3, r2, r3
 80035a6:	4a3f      	ldr	r2, [pc, #252]	; (80036a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80035a8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ac:	0c9b      	lsrs	r3, r3, #18
 80035ae:	3301      	adds	r3, #1
 80035b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035b2:	e002      	b.n	80035ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035ba:	4b38      	ldr	r3, [pc, #224]	; (800369c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c6:	d102      	bne.n	80035ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f2      	bne.n	80035b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035ce:	4b33      	ldr	r3, [pc, #204]	; (800369c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035da:	d158      	bne.n	800368e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e057      	b.n	8003690 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035e0:	4b2e      	ldr	r3, [pc, #184]	; (800369c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035e6:	4a2d      	ldr	r2, [pc, #180]	; (800369c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80035f0:	e04d      	b.n	800368e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035f8:	d141      	bne.n	800367e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035fa:	4b28      	ldr	r3, [pc, #160]	; (800369c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003606:	d131      	bne.n	800366c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003608:	4b24      	ldr	r3, [pc, #144]	; (800369c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800360a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800360e:	4a23      	ldr	r2, [pc, #140]	; (800369c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003614:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003618:	4b20      	ldr	r3, [pc, #128]	; (800369c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003620:	4a1e      	ldr	r2, [pc, #120]	; (800369c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003622:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003626:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003628:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2232      	movs	r2, #50	; 0x32
 800362e:	fb02 f303 	mul.w	r3, r2, r3
 8003632:	4a1c      	ldr	r2, [pc, #112]	; (80036a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003634:	fba2 2303 	umull	r2, r3, r2, r3
 8003638:	0c9b      	lsrs	r3, r3, #18
 800363a:	3301      	adds	r3, #1
 800363c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800363e:	e002      	b.n	8003646 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3b01      	subs	r3, #1
 8003644:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003646:	4b15      	ldr	r3, [pc, #84]	; (800369c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003652:	d102      	bne.n	800365a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f2      	bne.n	8003640 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800365a:	4b10      	ldr	r3, [pc, #64]	; (800369c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003666:	d112      	bne.n	800368e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e011      	b.n	8003690 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800366c:	4b0b      	ldr	r3, [pc, #44]	; (800369c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003672:	4a0a      	ldr	r2, [pc, #40]	; (800369c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003678:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800367c:	e007      	b.n	800368e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800367e:	4b07      	ldr	r3, [pc, #28]	; (800369c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003686:	4a05      	ldr	r2, [pc, #20]	; (800369c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003688:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800368c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	40007000 	.word	0x40007000
 80036a0:	20000000 	.word	0x20000000
 80036a4:	431bde83 	.word	0x431bde83

080036a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08a      	sub	sp, #40	; 0x28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d102      	bne.n	80036bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	f000 bc76 	b.w	8003fa8 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036bc:	4ba1      	ldr	r3, [pc, #644]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 030c 	and.w	r3, r3, #12
 80036c4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036c6:	4b9f      	ldr	r3, [pc, #636]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 80e6 	beq.w	80038aa <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d007      	beq.n	80036f4 <HAL_RCC_OscConfig+0x4c>
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	2b0c      	cmp	r3, #12
 80036e8:	f040 808d 	bne.w	8003806 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	f040 8089 	bne.w	8003806 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036f4:	4b93      	ldr	r3, [pc, #588]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d006      	beq.n	800370e <HAL_RCC_OscConfig+0x66>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d102      	bne.n	800370e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	f000 bc4d 	b.w	8003fa8 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003712:	4b8c      	ldr	r3, [pc, #560]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d004      	beq.n	8003728 <HAL_RCC_OscConfig+0x80>
 800371e:	4b89      	ldr	r3, [pc, #548]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003726:	e005      	b.n	8003734 <HAL_RCC_OscConfig+0x8c>
 8003728:	4b86      	ldr	r3, [pc, #536]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 800372a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800372e:	091b      	lsrs	r3, r3, #4
 8003730:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003734:	4293      	cmp	r3, r2
 8003736:	d224      	bcs.n	8003782 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	4618      	mov	r0, r3
 800373e:	f000 fe2b 	bl	8004398 <RCC_SetFlashLatencyFromMSIRange>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	f000 bc2d 	b.w	8003fa8 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800374e:	4b7d      	ldr	r3, [pc, #500]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a7c      	ldr	r2, [pc, #496]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 8003754:	f043 0308 	orr.w	r3, r3, #8
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	4b7a      	ldr	r3, [pc, #488]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	4977      	ldr	r1, [pc, #476]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 8003768:	4313      	orrs	r3, r2
 800376a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800376c:	4b75      	ldr	r3, [pc, #468]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	021b      	lsls	r3, r3, #8
 800377a:	4972      	ldr	r1, [pc, #456]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 800377c:	4313      	orrs	r3, r2
 800377e:	604b      	str	r3, [r1, #4]
 8003780:	e025      	b.n	80037ce <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003782:	4b70      	ldr	r3, [pc, #448]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a6f      	ldr	r2, [pc, #444]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 8003788:	f043 0308 	orr.w	r3, r3, #8
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	4b6d      	ldr	r3, [pc, #436]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	496a      	ldr	r1, [pc, #424]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 800379c:	4313      	orrs	r3, r2
 800379e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037a0:	4b68      	ldr	r3, [pc, #416]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	021b      	lsls	r3, r3, #8
 80037ae:	4965      	ldr	r1, [pc, #404]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d109      	bne.n	80037ce <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fdea 	bl	8004398 <RCC_SetFlashLatencyFromMSIRange>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e3ec      	b.n	8003fa8 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037ce:	f000 fd1f 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 80037d2:	4602      	mov	r2, r0
 80037d4:	4b5b      	ldr	r3, [pc, #364]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	091b      	lsrs	r3, r3, #4
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	495a      	ldr	r1, [pc, #360]	; (8003948 <HAL_RCC_OscConfig+0x2a0>)
 80037e0:	5ccb      	ldrb	r3, [r1, r3]
 80037e2:	f003 031f 	and.w	r3, r3, #31
 80037e6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ea:	4a58      	ldr	r2, [pc, #352]	; (800394c <HAL_RCC_OscConfig+0x2a4>)
 80037ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80037ee:	4b58      	ldr	r3, [pc, #352]	; (8003950 <HAL_RCC_OscConfig+0x2a8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fd fc98 	bl	8001128 <HAL_InitTick>
 80037f8:	4603      	mov	r3, r0
 80037fa:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80037fc:	7dfb      	ldrb	r3, [r7, #23]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d052      	beq.n	80038a8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003802:	7dfb      	ldrb	r3, [r7, #23]
 8003804:	e3d0      	b.n	8003fa8 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d032      	beq.n	8003874 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800380e:	4b4d      	ldr	r3, [pc, #308]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a4c      	ldr	r2, [pc, #304]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800381a:	f7fd fcd5 	bl	80011c8 <HAL_GetTick>
 800381e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003822:	f7fd fcd1 	bl	80011c8 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e3b9      	b.n	8003fa8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003834:	4b43      	ldr	r3, [pc, #268]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f0      	beq.n	8003822 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003840:	4b40      	ldr	r3, [pc, #256]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a3f      	ldr	r2, [pc, #252]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 8003846:	f043 0308 	orr.w	r3, r3, #8
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	4b3d      	ldr	r3, [pc, #244]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	493a      	ldr	r1, [pc, #232]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 800385a:	4313      	orrs	r3, r2
 800385c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800385e:	4b39      	ldr	r3, [pc, #228]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	021b      	lsls	r3, r3, #8
 800386c:	4935      	ldr	r1, [pc, #212]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 800386e:	4313      	orrs	r3, r2
 8003870:	604b      	str	r3, [r1, #4]
 8003872:	e01a      	b.n	80038aa <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003874:	4b33      	ldr	r3, [pc, #204]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a32      	ldr	r2, [pc, #200]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 800387a:	f023 0301 	bic.w	r3, r3, #1
 800387e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003880:	f7fd fca2 	bl	80011c8 <HAL_GetTick>
 8003884:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003888:	f7fd fc9e 	bl	80011c8 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e386      	b.n	8003fa8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800389a:	4b2a      	ldr	r3, [pc, #168]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0x1e0>
 80038a6:	e000      	b.n	80038aa <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d073      	beq.n	800399e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_OscConfig+0x220>
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	2b0c      	cmp	r3, #12
 80038c0:	d10e      	bne.n	80038e0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d10b      	bne.n	80038e0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c8:	4b1e      	ldr	r3, [pc, #120]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d063      	beq.n	800399c <HAL_RCC_OscConfig+0x2f4>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d15f      	bne.n	800399c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e363      	b.n	8003fa8 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e8:	d106      	bne.n	80038f8 <HAL_RCC_OscConfig+0x250>
 80038ea:	4b16      	ldr	r3, [pc, #88]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a15      	ldr	r2, [pc, #84]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 80038f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	e01d      	b.n	8003934 <HAL_RCC_OscConfig+0x28c>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003900:	d10c      	bne.n	800391c <HAL_RCC_OscConfig+0x274>
 8003902:	4b10      	ldr	r3, [pc, #64]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a0f      	ldr	r2, [pc, #60]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 8003908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800390c:	6013      	str	r3, [r2, #0]
 800390e:	4b0d      	ldr	r3, [pc, #52]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a0c      	ldr	r2, [pc, #48]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 8003914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	e00b      	b.n	8003934 <HAL_RCC_OscConfig+0x28c>
 800391c:	4b09      	ldr	r3, [pc, #36]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a08      	ldr	r2, [pc, #32]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 8003922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	4b06      	ldr	r3, [pc, #24]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a05      	ldr	r2, [pc, #20]	; (8003944 <HAL_RCC_OscConfig+0x29c>)
 800392e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003932:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d01b      	beq.n	8003974 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393c:	f7fd fc44 	bl	80011c8 <HAL_GetTick>
 8003940:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003942:	e010      	b.n	8003966 <HAL_RCC_OscConfig+0x2be>
 8003944:	40021000 	.word	0x40021000
 8003948:	08007600 	.word	0x08007600
 800394c:	20000000 	.word	0x20000000
 8003950:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003954:	f7fd fc38 	bl	80011c8 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b64      	cmp	r3, #100	; 0x64
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e320      	b.n	8003fa8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003966:	4ba0      	ldr	r3, [pc, #640]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0f0      	beq.n	8003954 <HAL_RCC_OscConfig+0x2ac>
 8003972:	e014      	b.n	800399e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003974:	f7fd fc28 	bl	80011c8 <HAL_GetTick>
 8003978:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800397c:	f7fd fc24 	bl	80011c8 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b64      	cmp	r3, #100	; 0x64
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e30c      	b.n	8003fa8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800398e:	4b96      	ldr	r3, [pc, #600]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0x2d4>
 800399a:	e000      	b.n	800399e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800399c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d060      	beq.n	8003a6c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d005      	beq.n	80039bc <HAL_RCC_OscConfig+0x314>
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	2b0c      	cmp	r3, #12
 80039b4:	d119      	bne.n	80039ea <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d116      	bne.n	80039ea <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039bc:	4b8a      	ldr	r3, [pc, #552]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_OscConfig+0x32c>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e2e9      	b.n	8003fa8 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d4:	4b84      	ldr	r3, [pc, #528]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	061b      	lsls	r3, r3, #24
 80039e2:	4981      	ldr	r1, [pc, #516]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039e8:	e040      	b.n	8003a6c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d023      	beq.n	8003a3a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039f2:	4b7d      	ldr	r3, [pc, #500]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a7c      	ldr	r2, [pc, #496]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 80039f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fe:	f7fd fbe3 	bl	80011c8 <HAL_GetTick>
 8003a02:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a06:	f7fd fbdf 	bl	80011c8 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e2c7      	b.n	8003fa8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a18:	4b73      	ldr	r3, [pc, #460]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0f0      	beq.n	8003a06 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a24:	4b70      	ldr	r3, [pc, #448]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	061b      	lsls	r3, r3, #24
 8003a32:	496d      	ldr	r1, [pc, #436]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	604b      	str	r3, [r1, #4]
 8003a38:	e018      	b.n	8003a6c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a3a:	4b6b      	ldr	r3, [pc, #428]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a6a      	ldr	r2, [pc, #424]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 8003a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a46:	f7fd fbbf 	bl	80011c8 <HAL_GetTick>
 8003a4a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a4e:	f7fd fbbb 	bl	80011c8 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e2a3      	b.n	8003fa8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a60:	4b61      	ldr	r3, [pc, #388]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1f0      	bne.n	8003a4e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d07f      	beq.n	8003b78 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d05f      	beq.n	8003b40 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003a80:	4b59      	ldr	r3, [pc, #356]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 8003a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a86:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	699a      	ldr	r2, [r3, #24]
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d037      	beq.n	8003b06 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d006      	beq.n	8003aae <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e27c      	b.n	8003fa8 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d01b      	beq.n	8003af0 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8003ab8:	4b4b      	ldr	r3, [pc, #300]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 8003aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003abe:	4a4a      	ldr	r2, [pc, #296]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 8003ac0:	f023 0301 	bic.w	r3, r3, #1
 8003ac4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ac8:	f7fd fb7e 	bl	80011c8 <HAL_GetTick>
 8003acc:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad0:	f7fd fb7a 	bl	80011c8 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b11      	cmp	r3, #17
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e262      	b.n	8003fa8 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ae2:	4b41      	ldr	r3, [pc, #260]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 8003ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1ef      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003af0:	4b3d      	ldr	r3, [pc, #244]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 8003af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003af6:	f023 0210 	bic.w	r2, r3, #16
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	493a      	ldr	r1, [pc, #232]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b06:	4b38      	ldr	r3, [pc, #224]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 8003b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b0c:	4a36      	ldr	r2, [pc, #216]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b16:	f7fd fb57 	bl	80011c8 <HAL_GetTick>
 8003b1a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b1e:	f7fd fb53 	bl	80011c8 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b11      	cmp	r3, #17
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e23b      	b.n	8003fa8 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b30:	4b2d      	ldr	r3, [pc, #180]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 8003b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0ef      	beq.n	8003b1e <HAL_RCC_OscConfig+0x476>
 8003b3e:	e01b      	b.n	8003b78 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b40:	4b29      	ldr	r3, [pc, #164]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 8003b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b46:	4a28      	ldr	r2, [pc, #160]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 8003b48:	f023 0301 	bic.w	r3, r3, #1
 8003b4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b50:	f7fd fb3a 	bl	80011c8 <HAL_GetTick>
 8003b54:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b58:	f7fd fb36 	bl	80011c8 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b11      	cmp	r3, #17
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e21e      	b.n	8003fa8 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b6a:	4b1f      	ldr	r3, [pc, #124]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 8003b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1ef      	bne.n	8003b58 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 80c1 	beq.w	8003d08 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b86:	2300      	movs	r3, #0
 8003b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b8c:	4b16      	ldr	r3, [pc, #88]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10e      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b98:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 8003b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9c:	4a12      	ldr	r2, [pc, #72]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 8003b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ba4:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <HAL_RCC_OscConfig+0x540>)
 8003ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bb6:	4b0d      	ldr	r3, [pc, #52]	; (8003bec <HAL_RCC_OscConfig+0x544>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d11c      	bne.n	8003bfc <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <HAL_RCC_OscConfig+0x544>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a09      	ldr	r2, [pc, #36]	; (8003bec <HAL_RCC_OscConfig+0x544>)
 8003bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bce:	f7fd fafb 	bl	80011c8 <HAL_GetTick>
 8003bd2:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bd4:	e00c      	b.n	8003bf0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd6:	f7fd faf7 	bl	80011c8 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d905      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e1df      	b.n	8003fa8 <HAL_RCC_OscConfig+0x900>
 8003be8:	40021000 	.word	0x40021000
 8003bec:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bf0:	4b99      	ldr	r3, [pc, #612]	; (8003e58 <HAL_RCC_OscConfig+0x7b0>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0ec      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d02c      	beq.n	8003c62 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003c08:	4b94      	ldr	r3, [pc, #592]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1a:	4990      	ldr	r1, [pc, #576]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d010      	beq.n	8003c50 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c2e:	4b8b      	ldr	r3, [pc, #556]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c34:	4a89      	ldr	r2, [pc, #548]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003c36:	f043 0304 	orr.w	r3, r3, #4
 8003c3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c3e:	4b87      	ldr	r3, [pc, #540]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c44:	4a85      	ldr	r2, [pc, #532]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c4e:	e018      	b.n	8003c82 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c50:	4b82      	ldr	r3, [pc, #520]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c56:	4a81      	ldr	r2, [pc, #516]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c60:	e00f      	b.n	8003c82 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c62:	4b7e      	ldr	r3, [pc, #504]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c68:	4a7c      	ldr	r2, [pc, #496]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003c6a:	f023 0301 	bic.w	r3, r3, #1
 8003c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c72:	4b7a      	ldr	r3, [pc, #488]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c78:	4a78      	ldr	r2, [pc, #480]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003c7a:	f023 0304 	bic.w	r3, r3, #4
 8003c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d016      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8a:	f7fd fa9d 	bl	80011c8 <HAL_GetTick>
 8003c8e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c90:	e00a      	b.n	8003ca8 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c92:	f7fd fa99 	bl	80011c8 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e17f      	b.n	8003fa8 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca8:	4b6c      	ldr	r3, [pc, #432]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0ed      	beq.n	8003c92 <HAL_RCC_OscConfig+0x5ea>
 8003cb6:	e01d      	b.n	8003cf4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb8:	f7fd fa86 	bl	80011c8 <HAL_GetTick>
 8003cbc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc0:	f7fd fa82 	bl	80011c8 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e168      	b.n	8003fa8 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cd6:	4b61      	ldr	r3, [pc, #388]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1ed      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003ce4:	4b5d      	ldr	r3, [pc, #372]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cea:	4a5c      	ldr	r2, [pc, #368]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d105      	bne.n	8003d08 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cfc:	4b57      	ldr	r3, [pc, #348]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d00:	4a56      	ldr	r2, [pc, #344]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d06:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0320 	and.w	r3, r3, #32
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d03c      	beq.n	8003d8e <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d01c      	beq.n	8003d56 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d1c:	4b4f      	ldr	r3, [pc, #316]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003d1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d22:	4a4e      	ldr	r2, [pc, #312]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003d24:	f043 0301 	orr.w	r3, r3, #1
 8003d28:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2c:	f7fd fa4c 	bl	80011c8 <HAL_GetTick>
 8003d30:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d34:	f7fd fa48 	bl	80011c8 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e130      	b.n	8003fa8 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d46:	4b45      	ldr	r3, [pc, #276]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003d48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0ef      	beq.n	8003d34 <HAL_RCC_OscConfig+0x68c>
 8003d54:	e01b      	b.n	8003d8e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d56:	4b41      	ldr	r3, [pc, #260]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003d58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d5c:	4a3f      	ldr	r2, [pc, #252]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003d5e:	f023 0301 	bic.w	r3, r3, #1
 8003d62:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d66:	f7fd fa2f 	bl	80011c8 <HAL_GetTick>
 8003d6a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d6e:	f7fd fa2b 	bl	80011c8 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e113      	b.n	8003fa8 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d80:	4b36      	ldr	r3, [pc, #216]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003d82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1ef      	bne.n	8003d6e <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 8107 	beq.w	8003fa6 <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	f040 80cf 	bne.w	8003f40 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003da2:	4b2e      	ldr	r3, [pc, #184]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f003 0203 	and.w	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d12c      	bne.n	8003e10 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d123      	bne.n	8003e10 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d11b      	bne.n	8003e10 <HAL_RCC_OscConfig+0x768>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d113      	bne.n	8003e10 <HAL_RCC_OscConfig+0x768>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	085b      	lsrs	r3, r3, #1
 8003df4:	3b01      	subs	r3, #1
 8003df6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d109      	bne.n	8003e10 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e06:	085b      	lsrs	r3, r3, #1
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d071      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	2b0c      	cmp	r3, #12
 8003e14:	d06c      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e16:	4b11      	ldr	r3, [pc, #68]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d105      	bne.n	8003e2e <HAL_RCC_OscConfig+0x786>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e22:	4b0e      	ldr	r3, [pc, #56]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_RCC_OscConfig+0x78a>
#endif
            )
          {
            return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e0ba      	b.n	8003fa8 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e32:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a09      	ldr	r2, [pc, #36]	; (8003e5c <HAL_RCC_OscConfig+0x7b4>)
 8003e38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e3c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e3e:	f7fd f9c3 	bl	80011c8 <HAL_GetTick>
 8003e42:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e44:	e00c      	b.n	8003e60 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e46:	f7fd f9bf 	bl	80011c8 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d905      	bls.n	8003e60 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e0a7      	b.n	8003fa8 <HAL_RCC_OscConfig+0x900>
 8003e58:	40007000 	.word	0x40007000
 8003e5c:	40021000 	.word	0x40021000
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e60:	4b53      	ldr	r3, [pc, #332]	; (8003fb0 <HAL_RCC_OscConfig+0x908>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1ec      	bne.n	8003e46 <HAL_RCC_OscConfig+0x79e>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e6c:	4b50      	ldr	r3, [pc, #320]	; (8003fb0 <HAL_RCC_OscConfig+0x908>)
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	4b50      	ldr	r3, [pc, #320]	; (8003fb4 <HAL_RCC_OscConfig+0x90c>)
 8003e72:	4013      	ands	r3, r2
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e7c:	3a01      	subs	r2, #1
 8003e7e:	0112      	lsls	r2, r2, #4
 8003e80:	4311      	orrs	r1, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e86:	0212      	lsls	r2, r2, #8
 8003e88:	4311      	orrs	r1, r2
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e8e:	0852      	lsrs	r2, r2, #1
 8003e90:	3a01      	subs	r2, #1
 8003e92:	0552      	lsls	r2, r2, #21
 8003e94:	4311      	orrs	r1, r2
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e9a:	0852      	lsrs	r2, r2, #1
 8003e9c:	3a01      	subs	r2, #1
 8003e9e:	0652      	lsls	r2, r2, #25
 8003ea0:	4311      	orrs	r1, r2
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ea6:	06d2      	lsls	r2, r2, #27
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	4941      	ldr	r1, [pc, #260]	; (8003fb0 <HAL_RCC_OscConfig+0x908>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003eb0:	4b3f      	ldr	r3, [pc, #252]	; (8003fb0 <HAL_RCC_OscConfig+0x908>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a3e      	ldr	r2, [pc, #248]	; (8003fb0 <HAL_RCC_OscConfig+0x908>)
 8003eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ebc:	4b3c      	ldr	r3, [pc, #240]	; (8003fb0 <HAL_RCC_OscConfig+0x908>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	4a3b      	ldr	r2, [pc, #236]	; (8003fb0 <HAL_RCC_OscConfig+0x908>)
 8003ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ec6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ec8:	f7fd f97e 	bl	80011c8 <HAL_GetTick>
 8003ecc:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7fd f97a 	bl	80011c8 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e062      	b.n	8003fa8 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ee2:	4b33      	ldr	r3, [pc, #204]	; (8003fb0 <HAL_RCC_OscConfig+0x908>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0f0      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eee:	e05a      	b.n	8003fa6 <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e059      	b.n	8003fa8 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ef4:	4b2e      	ldr	r3, [pc, #184]	; (8003fb0 <HAL_RCC_OscConfig+0x908>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d152      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f00:	4b2b      	ldr	r3, [pc, #172]	; (8003fb0 <HAL_RCC_OscConfig+0x908>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a2a      	ldr	r2, [pc, #168]	; (8003fb0 <HAL_RCC_OscConfig+0x908>)
 8003f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f0c:	4b28      	ldr	r3, [pc, #160]	; (8003fb0 <HAL_RCC_OscConfig+0x908>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4a27      	ldr	r2, [pc, #156]	; (8003fb0 <HAL_RCC_OscConfig+0x908>)
 8003f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f18:	f7fd f956 	bl	80011c8 <HAL_GetTick>
 8003f1c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f20:	f7fd f952 	bl	80011c8 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e03a      	b.n	8003fa8 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f32:	4b1f      	ldr	r3, [pc, #124]	; (8003fb0 <HAL_RCC_OscConfig+0x908>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0x878>
 8003f3e:	e032      	b.n	8003fa6 <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	2b0c      	cmp	r3, #12
 8003f44:	d02d      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f46:	4b1a      	ldr	r3, [pc, #104]	; (8003fb0 <HAL_RCC_OscConfig+0x908>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a19      	ldr	r2, [pc, #100]	; (8003fb0 <HAL_RCC_OscConfig+0x908>)
 8003f4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f50:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003f52:	4b17      	ldr	r3, [pc, #92]	; (8003fb0 <HAL_RCC_OscConfig+0x908>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d105      	bne.n	8003f6a <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003f5e:	4b14      	ldr	r3, [pc, #80]	; (8003fb0 <HAL_RCC_OscConfig+0x908>)
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	4a13      	ldr	r2, [pc, #76]	; (8003fb0 <HAL_RCC_OscConfig+0x908>)
 8003f64:	f023 0303 	bic.w	r3, r3, #3
 8003f68:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f6a:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <HAL_RCC_OscConfig+0x908>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	4a10      	ldr	r2, [pc, #64]	; (8003fb0 <HAL_RCC_OscConfig+0x908>)
 8003f70:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f78:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7a:	f7fd f925 	bl	80011c8 <HAL_GetTick>
 8003f7e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f82:	f7fd f921 	bl	80011c8 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e009      	b.n	8003fa8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f94:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <HAL_RCC_OscConfig+0x908>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1f0      	bne.n	8003f82 <HAL_RCC_OscConfig+0x8da>
 8003fa0:	e001      	b.n	8003fa6 <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3728      	adds	r7, #40	; 0x28
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	019d800c 	.word	0x019d800c

08003fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e10f      	b.n	80041f0 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd0:	4b89      	ldr	r3, [pc, #548]	; (80041f8 <HAL_RCC_ClockConfig+0x240>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 030f 	and.w	r3, r3, #15
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d910      	bls.n	8004000 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fde:	4b86      	ldr	r3, [pc, #536]	; (80041f8 <HAL_RCC_ClockConfig+0x240>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f023 020f 	bic.w	r2, r3, #15
 8003fe6:	4984      	ldr	r1, [pc, #528]	; (80041f8 <HAL_RCC_ClockConfig+0x240>)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fee:	4b82      	ldr	r3, [pc, #520]	; (80041f8 <HAL_RCC_ClockConfig+0x240>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d001      	beq.n	8004000 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0f7      	b.n	80041f0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 8089 	beq.w	8004120 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b03      	cmp	r3, #3
 8004014:	d133      	bne.n	800407e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004016:	4b79      	ldr	r3, [pc, #484]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e0e4      	b.n	80041f0 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004026:	f000 fa11 	bl	800444c <RCC_GetSysClockFreqFromPLLSource>
 800402a:	4603      	mov	r3, r0
 800402c:	4a74      	ldr	r2, [pc, #464]	; (8004200 <HAL_RCC_ClockConfig+0x248>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d955      	bls.n	80040de <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004032:	4b72      	ldr	r3, [pc, #456]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10a      	bne.n	8004054 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800403e:	4b6f      	ldr	r3, [pc, #444]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004046:	4a6d      	ldr	r2, [pc, #436]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 8004048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800404c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800404e:	2380      	movs	r3, #128	; 0x80
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	e044      	b.n	80040de <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d03e      	beq.n	80040de <HAL_RCC_ClockConfig+0x126>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d13a      	bne.n	80040de <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004068:	4b64      	ldr	r3, [pc, #400]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004070:	4a62      	ldr	r2, [pc, #392]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 8004072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004076:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004078:	2380      	movs	r3, #128	; 0x80
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	e02f      	b.n	80040de <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d107      	bne.n	8004096 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004086:	4b5d      	ldr	r3, [pc, #372]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d115      	bne.n	80040be <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e0ac      	b.n	80041f0 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d107      	bne.n	80040ae <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800409e:	4b57      	ldr	r3, [pc, #348]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d109      	bne.n	80040be <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e0a0      	b.n	80041f0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ae:	4b53      	ldr	r3, [pc, #332]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e098      	b.n	80041f0 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80040be:	f000 f8a7 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 80040c2:	4603      	mov	r3, r0
 80040c4:	4a4e      	ldr	r2, [pc, #312]	; (8004200 <HAL_RCC_ClockConfig+0x248>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d909      	bls.n	80040de <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040ca:	4b4c      	ldr	r3, [pc, #304]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040d2:	4a4a      	ldr	r2, [pc, #296]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 80040d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80040da:	2380      	movs	r3, #128	; 0x80
 80040dc:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040de:	4b47      	ldr	r3, [pc, #284]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f023 0203 	bic.w	r2, r3, #3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	4944      	ldr	r1, [pc, #272]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040f0:	f7fd f86a 	bl	80011c8 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f6:	e00a      	b.n	800410e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f8:	f7fd f866 	bl	80011c8 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	f241 3288 	movw	r2, #5000	; 0x1388
 8004106:	4293      	cmp	r3, r2
 8004108:	d901      	bls.n	800410e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e070      	b.n	80041f0 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410e:	4b3b      	ldr	r3, [pc, #236]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 020c 	and.w	r2, r3, #12
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	429a      	cmp	r2, r3
 800411e:	d1eb      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d009      	beq.n	8004140 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800412c:	4b33      	ldr	r3, [pc, #204]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	4930      	ldr	r1, [pc, #192]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 800413a:	4313      	orrs	r3, r2
 800413c:	608b      	str	r3, [r1, #8]
 800413e:	e008      	b.n	8004152 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	2b80      	cmp	r3, #128	; 0x80
 8004144:	d105      	bne.n	8004152 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004146:	4b2d      	ldr	r3, [pc, #180]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	4a2c      	ldr	r2, [pc, #176]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 800414c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004150:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004152:	4b29      	ldr	r3, [pc, #164]	; (80041f8 <HAL_RCC_ClockConfig+0x240>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d210      	bcs.n	8004182 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004160:	4b25      	ldr	r3, [pc, #148]	; (80041f8 <HAL_RCC_ClockConfig+0x240>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f023 020f 	bic.w	r2, r3, #15
 8004168:	4923      	ldr	r1, [pc, #140]	; (80041f8 <HAL_RCC_ClockConfig+0x240>)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	4313      	orrs	r3, r2
 800416e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004170:	4b21      	ldr	r3, [pc, #132]	; (80041f8 <HAL_RCC_ClockConfig+0x240>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 030f 	and.w	r3, r3, #15
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d001      	beq.n	8004182 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e036      	b.n	80041f0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b00      	cmp	r3, #0
 800418c:	d008      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800418e:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	4918      	ldr	r1, [pc, #96]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 800419c:	4313      	orrs	r3, r2
 800419e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d009      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ac:	4b13      	ldr	r3, [pc, #76]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	4910      	ldr	r1, [pc, #64]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041c0:	f000 f826 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 80041c4:	4602      	mov	r2, r0
 80041c6:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	091b      	lsrs	r3, r3, #4
 80041cc:	f003 030f 	and.w	r3, r3, #15
 80041d0:	490c      	ldr	r1, [pc, #48]	; (8004204 <HAL_RCC_ClockConfig+0x24c>)
 80041d2:	5ccb      	ldrb	r3, [r1, r3]
 80041d4:	f003 031f 	and.w	r3, r3, #31
 80041d8:	fa22 f303 	lsr.w	r3, r2, r3
 80041dc:	4a0a      	ldr	r2, [pc, #40]	; (8004208 <HAL_RCC_ClockConfig+0x250>)
 80041de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041e0:	4b0a      	ldr	r3, [pc, #40]	; (800420c <HAL_RCC_ClockConfig+0x254>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fc ff9f 	bl	8001128 <HAL_InitTick>
 80041ea:	4603      	mov	r3, r0
 80041ec:	73fb      	strb	r3, [r7, #15]

  return status;
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40022000 	.word	0x40022000
 80041fc:	40021000 	.word	0x40021000
 8004200:	04c4b400 	.word	0x04c4b400
 8004204:	08007600 	.word	0x08007600
 8004208:	20000000 	.word	0x20000000
 800420c:	20000004 	.word	0x20000004

08004210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004210:	b480      	push	{r7}
 8004212:	b089      	sub	sp, #36	; 0x24
 8004214:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	61fb      	str	r3, [r7, #28]
 800421a:	2300      	movs	r3, #0
 800421c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800421e:	4b3e      	ldr	r3, [pc, #248]	; (8004318 <HAL_RCC_GetSysClockFreq+0x108>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 030c 	and.w	r3, r3, #12
 8004226:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004228:	4b3b      	ldr	r3, [pc, #236]	; (8004318 <HAL_RCC_GetSysClockFreq+0x108>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f003 0303 	and.w	r3, r3, #3
 8004230:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <HAL_RCC_GetSysClockFreq+0x34>
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2b0c      	cmp	r3, #12
 800423c:	d121      	bne.n	8004282 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d11e      	bne.n	8004282 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004244:	4b34      	ldr	r3, [pc, #208]	; (8004318 <HAL_RCC_GetSysClockFreq+0x108>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b00      	cmp	r3, #0
 800424e:	d107      	bne.n	8004260 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004250:	4b31      	ldr	r3, [pc, #196]	; (8004318 <HAL_RCC_GetSysClockFreq+0x108>)
 8004252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004256:	0a1b      	lsrs	r3, r3, #8
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	61fb      	str	r3, [r7, #28]
 800425e:	e005      	b.n	800426c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004260:	4b2d      	ldr	r3, [pc, #180]	; (8004318 <HAL_RCC_GetSysClockFreq+0x108>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	091b      	lsrs	r3, r3, #4
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800426c:	4a2b      	ldr	r2, [pc, #172]	; (800431c <HAL_RCC_GetSysClockFreq+0x10c>)
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004274:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10d      	bne.n	8004298 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004280:	e00a      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	2b04      	cmp	r3, #4
 8004286:	d102      	bne.n	800428e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004288:	4b25      	ldr	r3, [pc, #148]	; (8004320 <HAL_RCC_GetSysClockFreq+0x110>)
 800428a:	61bb      	str	r3, [r7, #24]
 800428c:	e004      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	2b08      	cmp	r3, #8
 8004292:	d101      	bne.n	8004298 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004294:	4b23      	ldr	r3, [pc, #140]	; (8004324 <HAL_RCC_GetSysClockFreq+0x114>)
 8004296:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	2b0c      	cmp	r3, #12
 800429c:	d134      	bne.n	8004308 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800429e:	4b1e      	ldr	r3, [pc, #120]	; (8004318 <HAL_RCC_GetSysClockFreq+0x108>)
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d003      	beq.n	80042b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d003      	beq.n	80042bc <HAL_RCC_GetSysClockFreq+0xac>
 80042b4:	e005      	b.n	80042c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042b6:	4b1a      	ldr	r3, [pc, #104]	; (8004320 <HAL_RCC_GetSysClockFreq+0x110>)
 80042b8:	617b      	str	r3, [r7, #20]
      break;
 80042ba:	e005      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042bc:	4b19      	ldr	r3, [pc, #100]	; (8004324 <HAL_RCC_GetSysClockFreq+0x114>)
 80042be:	617b      	str	r3, [r7, #20]
      break;
 80042c0:	e002      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	617b      	str	r3, [r7, #20]
      break;
 80042c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042c8:	4b13      	ldr	r3, [pc, #76]	; (8004318 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	091b      	lsrs	r3, r3, #4
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	3301      	adds	r3, #1
 80042d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042d6:	4b10      	ldr	r3, [pc, #64]	; (8004318 <HAL_RCC_GetSysClockFreq+0x108>)
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	0a1b      	lsrs	r3, r3, #8
 80042dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	fb02 f203 	mul.w	r2, r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042ee:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <HAL_RCC_GetSysClockFreq+0x108>)
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	0e5b      	lsrs	r3, r3, #25
 80042f4:	f003 0303 	and.w	r3, r3, #3
 80042f8:	3301      	adds	r3, #1
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	fbb2 f3f3 	udiv	r3, r2, r3
 8004306:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004308:	69bb      	ldr	r3, [r7, #24]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3724      	adds	r7, #36	; 0x24
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40021000 	.word	0x40021000
 800431c:	08007618 	.word	0x08007618
 8004320:	00f42400 	.word	0x00f42400
 8004324:	007a1200 	.word	0x007a1200

08004328 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800432c:	4b03      	ldr	r3, [pc, #12]	; (800433c <HAL_RCC_GetHCLKFreq+0x14>)
 800432e:	681b      	ldr	r3, [r3, #0]
}
 8004330:	4618      	mov	r0, r3
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	20000000 	.word	0x20000000

08004340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004344:	f7ff fff0 	bl	8004328 <HAL_RCC_GetHCLKFreq>
 8004348:	4602      	mov	r2, r0
 800434a:	4b06      	ldr	r3, [pc, #24]	; (8004364 <HAL_RCC_GetPCLK1Freq+0x24>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	0a1b      	lsrs	r3, r3, #8
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	4904      	ldr	r1, [pc, #16]	; (8004368 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004356:	5ccb      	ldrb	r3, [r1, r3]
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004360:	4618      	mov	r0, r3
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40021000 	.word	0x40021000
 8004368:	08007610 	.word	0x08007610

0800436c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004370:	f7ff ffda 	bl	8004328 <HAL_RCC_GetHCLKFreq>
 8004374:	4602      	mov	r2, r0
 8004376:	4b06      	ldr	r3, [pc, #24]	; (8004390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	0adb      	lsrs	r3, r3, #11
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	4904      	ldr	r1, [pc, #16]	; (8004394 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004382:	5ccb      	ldrb	r3, [r1, r3]
 8004384:	f003 031f 	and.w	r3, r3, #31
 8004388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800438c:	4618      	mov	r0, r3
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40021000 	.word	0x40021000
 8004394:	08007610 	.word	0x08007610

08004398 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043a0:	2300      	movs	r3, #0
 80043a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043a4:	4b27      	ldr	r3, [pc, #156]	; (8004444 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80043a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043b0:	f7ff f8b6 	bl	8003520 <HAL_PWREx_GetVoltageRange>
 80043b4:	6178      	str	r0, [r7, #20]
 80043b6:	e014      	b.n	80043e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043b8:	4b22      	ldr	r3, [pc, #136]	; (8004444 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80043ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043bc:	4a21      	ldr	r2, [pc, #132]	; (8004444 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80043be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c2:	6593      	str	r3, [r2, #88]	; 0x58
 80043c4:	4b1f      	ldr	r3, [pc, #124]	; (8004444 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80043c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043d0:	f7ff f8a6 	bl	8003520 <HAL_PWREx_GetVoltageRange>
 80043d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043d6:	4b1b      	ldr	r3, [pc, #108]	; (8004444 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80043d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043da:	4a1a      	ldr	r2, [pc, #104]	; (8004444 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80043dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e8:	d10b      	bne.n	8004402 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b80      	cmp	r3, #128	; 0x80
 80043ee:	d913      	bls.n	8004418 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2ba0      	cmp	r3, #160	; 0xa0
 80043f4:	d902      	bls.n	80043fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043f6:	2302      	movs	r3, #2
 80043f8:	613b      	str	r3, [r7, #16]
 80043fa:	e00d      	b.n	8004418 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043fc:	2301      	movs	r3, #1
 80043fe:	613b      	str	r3, [r7, #16]
 8004400:	e00a      	b.n	8004418 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b7f      	cmp	r3, #127	; 0x7f
 8004406:	d902      	bls.n	800440e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004408:	2302      	movs	r3, #2
 800440a:	613b      	str	r3, [r7, #16]
 800440c:	e004      	b.n	8004418 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b70      	cmp	r3, #112	; 0x70
 8004412:	d101      	bne.n	8004418 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004414:	2301      	movs	r3, #1
 8004416:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004418:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f023 020f 	bic.w	r2, r3, #15
 8004420:	4909      	ldr	r1, [pc, #36]	; (8004448 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	4313      	orrs	r3, r2
 8004426:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004428:	4b07      	ldr	r3, [pc, #28]	; (8004448 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 030f 	and.w	r3, r3, #15
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	429a      	cmp	r2, r3
 8004434:	d001      	beq.n	800443a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40021000 	.word	0x40021000
 8004448:	40022000 	.word	0x40022000

0800444c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004456:	4b2d      	ldr	r3, [pc, #180]	; (800450c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	2b01      	cmp	r3, #1
 8004460:	d118      	bne.n	8004494 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004462:	4b2a      	ldr	r3, [pc, #168]	; (800450c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d107      	bne.n	800447e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800446e:	4b27      	ldr	r3, [pc, #156]	; (800450c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004470:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004474:	0a1b      	lsrs	r3, r3, #8
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	e005      	b.n	800448a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800447e:	4b23      	ldr	r3, [pc, #140]	; (800450c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	091b      	lsrs	r3, r3, #4
 8004484:	f003 030f 	and.w	r3, r3, #15
 8004488:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800448a:	4a21      	ldr	r2, [pc, #132]	; (8004510 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004492:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004494:	4b1d      	ldr	r3, [pc, #116]	; (800450c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f003 0303 	and.w	r3, r3, #3
 800449c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d003      	beq.n	80044ac <RCC_GetSysClockFreqFromPLLSource+0x60>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d003      	beq.n	80044b2 <RCC_GetSysClockFreqFromPLLSource+0x66>
 80044aa:	e005      	b.n	80044b8 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80044ac:	4b19      	ldr	r3, [pc, #100]	; (8004514 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80044ae:	613b      	str	r3, [r7, #16]
    break;
 80044b0:	e005      	b.n	80044be <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80044b2:	4b19      	ldr	r3, [pc, #100]	; (8004518 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80044b4:	613b      	str	r3, [r7, #16]
    break;
 80044b6:	e002      	b.n	80044be <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	613b      	str	r3, [r7, #16]
    break;
 80044bc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044be:	4b13      	ldr	r3, [pc, #76]	; (800450c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	091b      	lsrs	r3, r3, #4
 80044c4:	f003 030f 	and.w	r3, r3, #15
 80044c8:	3301      	adds	r3, #1
 80044ca:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044cc:	4b0f      	ldr	r3, [pc, #60]	; (800450c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	0a1b      	lsrs	r3, r3, #8
 80044d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	fb02 f203 	mul.w	r2, r2, r3
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044e4:	4b09      	ldr	r3, [pc, #36]	; (800450c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	0e5b      	lsrs	r3, r3, #25
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	3301      	adds	r3, #1
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80044fe:	683b      	ldr	r3, [r7, #0]
}
 8004500:	4618      	mov	r0, r3
 8004502:	371c      	adds	r7, #28
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	40021000 	.word	0x40021000
 8004510:	08007618 	.word	0x08007618
 8004514:	00f42400 	.word	0x00f42400
 8004518:	007a1200 	.word	0x007a1200

0800451c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004524:	2300      	movs	r3, #0
 8004526:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004528:	2300      	movs	r3, #0
 800452a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004534:	2b00      	cmp	r3, #0
 8004536:	d040      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800453c:	2b80      	cmp	r3, #128	; 0x80
 800453e:	d02a      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004540:	2b80      	cmp	r3, #128	; 0x80
 8004542:	d825      	bhi.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004544:	2b60      	cmp	r3, #96	; 0x60
 8004546:	d026      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004548:	2b60      	cmp	r3, #96	; 0x60
 800454a:	d821      	bhi.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800454c:	2b40      	cmp	r3, #64	; 0x40
 800454e:	d006      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004550:	2b40      	cmp	r3, #64	; 0x40
 8004552:	d81d      	bhi.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004554:	2b00      	cmp	r3, #0
 8004556:	d009      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004558:	2b20      	cmp	r3, #32
 800455a:	d010      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800455c:	e018      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800455e:	4b89      	ldr	r3, [pc, #548]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	4a88      	ldr	r2, [pc, #544]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004568:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800456a:	e015      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3304      	adds	r3, #4
 8004570:	2100      	movs	r1, #0
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fb3e 	bl	8004bf4 <RCCEx_PLLSAI1_Config>
 8004578:	4603      	mov	r3, r0
 800457a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800457c:	e00c      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3320      	adds	r3, #32
 8004582:	2100      	movs	r1, #0
 8004584:	4618      	mov	r0, r3
 8004586:	f000 fc29 	bl	8004ddc <RCCEx_PLLSAI2_Config>
 800458a:	4603      	mov	r3, r0
 800458c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800458e:	e003      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	74fb      	strb	r3, [r7, #19]
      break;
 8004594:	e000      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004598:	7cfb      	ldrb	r3, [r7, #19]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10b      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800459e:	4b79      	ldr	r3, [pc, #484]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045a4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ac:	4975      	ldr	r1, [pc, #468]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80045b4:	e001      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b6:	7cfb      	ldrb	r3, [r7, #19]
 80045b8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d047      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ce:	d030      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80045d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d4:	d82a      	bhi.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80045d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045da:	d02a      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80045dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045e0:	d824      	bhi.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80045e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045e6:	d008      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xde>
 80045e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ec:	d81e      	bhi.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00a      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80045f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045f6:	d010      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80045f8:	e018      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045fa:	4b62      	ldr	r3, [pc, #392]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	4a61      	ldr	r2, [pc, #388]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004604:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004606:	e015      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3304      	adds	r3, #4
 800460c:	2100      	movs	r1, #0
 800460e:	4618      	mov	r0, r3
 8004610:	f000 faf0 	bl	8004bf4 <RCCEx_PLLSAI1_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004618:	e00c      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	3320      	adds	r3, #32
 800461e:	2100      	movs	r1, #0
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fbdb 	bl	8004ddc <RCCEx_PLLSAI2_Config>
 8004626:	4603      	mov	r3, r0
 8004628:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800462a:	e003      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	74fb      	strb	r3, [r7, #19]
      break;
 8004630:	e000      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004632:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004634:	7cfb      	ldrb	r3, [r7, #19]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10b      	bne.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800463a:	4b52      	ldr	r3, [pc, #328]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800463c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004640:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004648:	494e      	ldr	r1, [pc, #312]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004650:	e001      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004652:	7cfb      	ldrb	r3, [r7, #19]
 8004654:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 809f 	beq.w	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004664:	2300      	movs	r3, #0
 8004666:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004668:	4b46      	ldr	r3, [pc, #280]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800466a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004674:	2301      	movs	r3, #1
 8004676:	e000      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004678:	2300      	movs	r3, #0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00d      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800467e:	4b41      	ldr	r3, [pc, #260]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004682:	4a40      	ldr	r2, [pc, #256]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004688:	6593      	str	r3, [r2, #88]	; 0x58
 800468a:	4b3e      	ldr	r3, [pc, #248]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800468c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004692:	60bb      	str	r3, [r7, #8]
 8004694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004696:	2301      	movs	r3, #1
 8004698:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800469a:	4b3b      	ldr	r3, [pc, #236]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a3a      	ldr	r2, [pc, #232]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80046a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046a6:	f7fc fd8f 	bl	80011c8 <HAL_GetTick>
 80046aa:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046ac:	e009      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ae:	f7fc fd8b 	bl	80011c8 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d902      	bls.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	74fb      	strb	r3, [r7, #19]
        break;
 80046c0:	e005      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046c2:	4b31      	ldr	r3, [pc, #196]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0ef      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80046ce:	7cfb      	ldrb	r3, [r7, #19]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d15b      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046d4:	4b2b      	ldr	r3, [pc, #172]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046de:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d01f      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d019      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046f2:	4b24      	ldr	r3, [pc, #144]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046fc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046fe:	4b21      	ldr	r3, [pc, #132]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004704:	4a1f      	ldr	r2, [pc, #124]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800470a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800470e:	4b1d      	ldr	r3, [pc, #116]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004714:	4a1b      	ldr	r2, [pc, #108]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800471a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800471e:	4a19      	ldr	r2, [pc, #100]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d016      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004730:	f7fc fd4a 	bl	80011c8 <HAL_GetTick>
 8004734:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004736:	e00b      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004738:	f7fc fd46 	bl	80011c8 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	f241 3288 	movw	r2, #5000	; 0x1388
 8004746:	4293      	cmp	r3, r2
 8004748:	d902      	bls.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	74fb      	strb	r3, [r7, #19]
            break;
 800474e:	e006      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004750:	4b0c      	ldr	r3, [pc, #48]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d0ec      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800475e:	7cfb      	ldrb	r3, [r7, #19]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10c      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004764:	4b07      	ldr	r3, [pc, #28]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004774:	4903      	ldr	r1, [pc, #12]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800477c:	e008      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800477e:	7cfb      	ldrb	r3, [r7, #19]
 8004780:	74bb      	strb	r3, [r7, #18]
 8004782:	e005      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004784:	40021000 	.word	0x40021000
 8004788:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478c:	7cfb      	ldrb	r3, [r7, #19]
 800478e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004790:	7c7b      	ldrb	r3, [r7, #17]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d105      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004796:	4ba0      	ldr	r3, [pc, #640]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479a:	4a9f      	ldr	r2, [pc, #636]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800479c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047ae:	4b9a      	ldr	r3, [pc, #616]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b4:	f023 0203 	bic.w	r2, r3, #3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047bc:	4996      	ldr	r1, [pc, #600]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047d0:	4b91      	ldr	r3, [pc, #580]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d6:	f023 020c 	bic.w	r2, r3, #12
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	498e      	ldr	r1, [pc, #568]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0304 	and.w	r3, r3, #4
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047f2:	4b89      	ldr	r3, [pc, #548]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004800:	4985      	ldr	r1, [pc, #532]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0308 	and.w	r3, r3, #8
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004814:	4b80      	ldr	r3, [pc, #512]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004822:	497d      	ldr	r1, [pc, #500]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004824:	4313      	orrs	r3, r2
 8004826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0310 	and.w	r3, r3, #16
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004836:	4b78      	ldr	r3, [pc, #480]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004844:	4974      	ldr	r1, [pc, #464]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0320 	and.w	r3, r3, #32
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004858:	4b6f      	ldr	r3, [pc, #444]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004866:	496c      	ldr	r1, [pc, #432]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800487a:	4b67      	ldr	r3, [pc, #412]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800487c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004880:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004888:	4963      	ldr	r1, [pc, #396]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00a      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800489c:	4b5e      	ldr	r3, [pc, #376]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800489e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048aa:	495b      	ldr	r1, [pc, #364]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048be:	4b56      	ldr	r3, [pc, #344]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048cc:	4952      	ldr	r1, [pc, #328]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00a      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048e0:	4b4d      	ldr	r3, [pc, #308]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ee:	494a      	ldr	r1, [pc, #296]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004902:	4b45      	ldr	r3, [pc, #276]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004908:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004910:	4941      	ldr	r1, [pc, #260]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004924:	4b3c      	ldr	r3, [pc, #240]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004926:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800492a:	f023 0203 	bic.w	r2, r3, #3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004932:	4939      	ldr	r1, [pc, #228]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004934:	4313      	orrs	r3, r2
 8004936:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d028      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004946:	4b34      	ldr	r3, [pc, #208]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004954:	4930      	ldr	r1, [pc, #192]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004960:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004964:	d106      	bne.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004966:	4b2c      	ldr	r3, [pc, #176]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	4a2b      	ldr	r2, [pc, #172]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800496c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004970:	60d3      	str	r3, [r2, #12]
 8004972:	e011      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004978:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800497c:	d10c      	bne.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3304      	adds	r3, #4
 8004982:	2101      	movs	r1, #1
 8004984:	4618      	mov	r0, r3
 8004986:	f000 f935 	bl	8004bf4 <RCCEx_PLLSAI1_Config>
 800498a:	4603      	mov	r3, r0
 800498c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800498e:	7cfb      	ldrb	r3, [r7, #19]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004994:	7cfb      	ldrb	r3, [r7, #19]
 8004996:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d04d      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049ac:	d108      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80049ae:	4b1a      	ldr	r3, [pc, #104]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049b4:	4a18      	ldr	r2, [pc, #96]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049ba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80049be:	e012      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80049c0:	4b15      	ldr	r3, [pc, #84]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049c6:	4a14      	ldr	r2, [pc, #80]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049cc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80049d0:	4b11      	ldr	r3, [pc, #68]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049de:	490e      	ldr	r1, [pc, #56]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ee:	d106      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049f0:	4b09      	ldr	r3, [pc, #36]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	4a08      	ldr	r2, [pc, #32]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049fa:	60d3      	str	r3, [r2, #12]
 80049fc:	e020      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a06:	d109      	bne.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a08:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	4a02      	ldr	r2, [pc, #8]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a12:	60d3      	str	r3, [r2, #12]
 8004a14:	e014      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004a16:	bf00      	nop
 8004a18:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a24:	d10c      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	3304      	adds	r3, #4
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 f8e1 	bl	8004bf4 <RCCEx_PLLSAI1_Config>
 8004a32:	4603      	mov	r3, r0
 8004a34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a36:	7cfb      	ldrb	r3, [r7, #19]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004a3c:	7cfb      	ldrb	r3, [r7, #19]
 8004a3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d028      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a4c:	4b68      	ldr	r3, [pc, #416]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a5a:	4965      	ldr	r1, [pc, #404]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a6a:	d106      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a6c:	4b60      	ldr	r3, [pc, #384]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	4a5f      	ldr	r2, [pc, #380]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004a72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a76:	60d3      	str	r3, [r2, #12]
 8004a78:	e011      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a82:	d10c      	bne.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3304      	adds	r3, #4
 8004a88:	2101      	movs	r1, #1
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 f8b2 	bl	8004bf4 <RCCEx_PLLSAI1_Config>
 8004a90:	4603      	mov	r3, r0
 8004a92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a94:	7cfb      	ldrb	r3, [r7, #19]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004a9a:	7cfb      	ldrb	r3, [r7, #19]
 8004a9c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d01e      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004aaa:	4b51      	ldr	r3, [pc, #324]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aba:	494d      	ldr	r1, [pc, #308]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ac8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004acc:	d10c      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	2102      	movs	r1, #2
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 f88d 	bl	8004bf4 <RCCEx_PLLSAI1_Config>
 8004ada:	4603      	mov	r3, r0
 8004adc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ade:	7cfb      	ldrb	r3, [r7, #19]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004ae4:	7cfb      	ldrb	r3, [r7, #19]
 8004ae6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00b      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004af4:	4b3e      	ldr	r3, [pc, #248]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004af6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004afa:	f023 0204 	bic.w	r2, r3, #4
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b04:	493a      	ldr	r1, [pc, #232]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00b      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b18:	4b35      	ldr	r3, [pc, #212]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004b1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b1e:	f023 0218 	bic.w	r2, r3, #24
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b28:	4931      	ldr	r1, [pc, #196]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d035      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b3c:	4b2c      	ldr	r3, [pc, #176]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a2b      	ldr	r2, [pc, #172]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b48:	f7fc fb3e 	bl	80011c8 <HAL_GetTick>
 8004b4c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b4e:	e009      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b50:	f7fc fb3a 	bl	80011c8 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d902      	bls.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	74fb      	strb	r3, [r7, #19]
        break;
 8004b62:	e005      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b64:	4b22      	ldr	r3, [pc, #136]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1ef      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8004b70:	7cfb      	ldrb	r3, [r7, #19]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d113      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004b76:	4b1e      	ldr	r3, [pc, #120]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004b78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b86:	491a      	ldr	r1, [pc, #104]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	3320      	adds	r3, #32
 8004b92:	2102      	movs	r1, #2
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 f921 	bl	8004ddc <RCCEx_PLLSAI2_Config>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8004b9e:	7cfb      	ldrb	r3, [r7, #19]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8004ba4:	7cfb      	ldrb	r3, [r7, #19]
 8004ba6:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d017      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004bb4:	4b0e      	ldr	r3, [pc, #56]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004bb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc4:	490a      	ldr	r1, [pc, #40]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bd6:	d105      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bd8:	4b05      	ldr	r3, [pc, #20]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	4a04      	ldr	r2, [pc, #16]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004be2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004be4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40021000 	.word	0x40021000

08004bf4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c02:	4b72      	ldr	r3, [pc, #456]	; (8004dcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00e      	beq.n	8004c2c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c0e:	4b6f      	ldr	r3, [pc, #444]	; (8004dcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f003 0203 	and.w	r2, r3, #3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d103      	bne.n	8004c26 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
       ||
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d142      	bne.n	8004cac <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	73fb      	strb	r3, [r7, #15]
 8004c2a:	e03f      	b.n	8004cac <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d018      	beq.n	8004c66 <RCCEx_PLLSAI1_Config+0x72>
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d825      	bhi.n	8004c84 <RCCEx_PLLSAI1_Config+0x90>
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d002      	beq.n	8004c42 <RCCEx_PLLSAI1_Config+0x4e>
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d009      	beq.n	8004c54 <RCCEx_PLLSAI1_Config+0x60>
 8004c40:	e020      	b.n	8004c84 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c42:	4b62      	ldr	r3, [pc, #392]	; (8004dcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d11d      	bne.n	8004c8a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c52:	e01a      	b.n	8004c8a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c54:	4b5d      	ldr	r3, [pc, #372]	; (8004dcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d116      	bne.n	8004c8e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c64:	e013      	b.n	8004c8e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c66:	4b59      	ldr	r3, [pc, #356]	; (8004dcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10f      	bne.n	8004c92 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c72:	4b56      	ldr	r3, [pc, #344]	; (8004dcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d109      	bne.n	8004c92 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c82:	e006      	b.n	8004c92 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	73fb      	strb	r3, [r7, #15]
      break;
 8004c88:	e004      	b.n	8004c94 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004c8a:	bf00      	nop
 8004c8c:	e002      	b.n	8004c94 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004c8e:	bf00      	nop
 8004c90:	e000      	b.n	8004c94 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004c92:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d108      	bne.n	8004cac <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004c9a:	4b4c      	ldr	r3, [pc, #304]	; (8004dcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f023 0203 	bic.w	r2, r3, #3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4949      	ldr	r1, [pc, #292]	; (8004dcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f040 8086 	bne.w	8004dc0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004cb4:	4b45      	ldr	r3, [pc, #276]	; (8004dcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a44      	ldr	r2, [pc, #272]	; (8004dcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc0:	f7fc fa82 	bl	80011c8 <HAL_GetTick>
 8004cc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cc6:	e009      	b.n	8004cdc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cc8:	f7fc fa7e 	bl	80011c8 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d902      	bls.n	8004cdc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	73fb      	strb	r3, [r7, #15]
        break;
 8004cda:	e005      	b.n	8004ce8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cdc:	4b3b      	ldr	r3, [pc, #236]	; (8004dcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1ef      	bne.n	8004cc8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d168      	bne.n	8004dc0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d113      	bne.n	8004d1c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cf4:	4b35      	ldr	r3, [pc, #212]	; (8004dcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cf6:	691a      	ldr	r2, [r3, #16]
 8004cf8:	4b35      	ldr	r3, [pc, #212]	; (8004dd0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6892      	ldr	r2, [r2, #8]
 8004d00:	0211      	lsls	r1, r2, #8
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	68d2      	ldr	r2, [r2, #12]
 8004d06:	06d2      	lsls	r2, r2, #27
 8004d08:	4311      	orrs	r1, r2
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	6852      	ldr	r2, [r2, #4]
 8004d0e:	3a01      	subs	r2, #1
 8004d10:	0112      	lsls	r2, r2, #4
 8004d12:	430a      	orrs	r2, r1
 8004d14:	492d      	ldr	r1, [pc, #180]	; (8004dcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	610b      	str	r3, [r1, #16]
 8004d1a:	e02d      	b.n	8004d78 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d115      	bne.n	8004d4e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d22:	4b2a      	ldr	r3, [pc, #168]	; (8004dcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d24:	691a      	ldr	r2, [r3, #16]
 8004d26:	4b2b      	ldr	r3, [pc, #172]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6892      	ldr	r2, [r2, #8]
 8004d2e:	0211      	lsls	r1, r2, #8
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6912      	ldr	r2, [r2, #16]
 8004d34:	0852      	lsrs	r2, r2, #1
 8004d36:	3a01      	subs	r2, #1
 8004d38:	0552      	lsls	r2, r2, #21
 8004d3a:	4311      	orrs	r1, r2
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6852      	ldr	r2, [r2, #4]
 8004d40:	3a01      	subs	r2, #1
 8004d42:	0112      	lsls	r2, r2, #4
 8004d44:	430a      	orrs	r2, r1
 8004d46:	4921      	ldr	r1, [pc, #132]	; (8004dcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	610b      	str	r3, [r1, #16]
 8004d4c:	e014      	b.n	8004d78 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d4e:	4b1f      	ldr	r3, [pc, #124]	; (8004dcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d50:	691a      	ldr	r2, [r3, #16]
 8004d52:	4b21      	ldr	r3, [pc, #132]	; (8004dd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d54:	4013      	ands	r3, r2
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6892      	ldr	r2, [r2, #8]
 8004d5a:	0211      	lsls	r1, r2, #8
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	6952      	ldr	r2, [r2, #20]
 8004d60:	0852      	lsrs	r2, r2, #1
 8004d62:	3a01      	subs	r2, #1
 8004d64:	0652      	lsls	r2, r2, #25
 8004d66:	4311      	orrs	r1, r2
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6852      	ldr	r2, [r2, #4]
 8004d6c:	3a01      	subs	r2, #1
 8004d6e:	0112      	lsls	r2, r2, #4
 8004d70:	430a      	orrs	r2, r1
 8004d72:	4916      	ldr	r1, [pc, #88]	; (8004dcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d78:	4b14      	ldr	r3, [pc, #80]	; (8004dcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a13      	ldr	r2, [pc, #76]	; (8004dcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d84:	f7fc fa20 	bl	80011c8 <HAL_GetTick>
 8004d88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d8a:	e009      	b.n	8004da0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d8c:	f7fc fa1c 	bl	80011c8 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d902      	bls.n	8004da0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	73fb      	strb	r3, [r7, #15]
          break;
 8004d9e:	e005      	b.n	8004dac <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004da0:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d0ef      	beq.n	8004d8c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d106      	bne.n	8004dc0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004db2:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004db4:	691a      	ldr	r2, [r3, #16]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	4904      	ldr	r1, [pc, #16]	; (8004dcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	07ff800f 	.word	0x07ff800f
 8004dd4:	ff9f800f 	.word	0xff9f800f
 8004dd8:	f9ff800f 	.word	0xf9ff800f

08004ddc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dea:	4b72      	ldr	r3, [pc, #456]	; (8004fb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00e      	beq.n	8004e14 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004df6:	4b6f      	ldr	r3, [pc, #444]	; (8004fb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f003 0203 	and.w	r2, r3, #3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d103      	bne.n	8004e0e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
       ||
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d142      	bne.n	8004e94 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	73fb      	strb	r3, [r7, #15]
 8004e12:	e03f      	b.n	8004e94 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b03      	cmp	r3, #3
 8004e1a:	d018      	beq.n	8004e4e <RCCEx_PLLSAI2_Config+0x72>
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	d825      	bhi.n	8004e6c <RCCEx_PLLSAI2_Config+0x90>
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d002      	beq.n	8004e2a <RCCEx_PLLSAI2_Config+0x4e>
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d009      	beq.n	8004e3c <RCCEx_PLLSAI2_Config+0x60>
 8004e28:	e020      	b.n	8004e6c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e2a:	4b62      	ldr	r3, [pc, #392]	; (8004fb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d11d      	bne.n	8004e72 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e3a:	e01a      	b.n	8004e72 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e3c:	4b5d      	ldr	r3, [pc, #372]	; (8004fb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d116      	bne.n	8004e76 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e4c:	e013      	b.n	8004e76 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e4e:	4b59      	ldr	r3, [pc, #356]	; (8004fb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10f      	bne.n	8004e7a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e5a:	4b56      	ldr	r3, [pc, #344]	; (8004fb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d109      	bne.n	8004e7a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e6a:	e006      	b.n	8004e7a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e70:	e004      	b.n	8004e7c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004e72:	bf00      	nop
 8004e74:	e002      	b.n	8004e7c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004e76:	bf00      	nop
 8004e78:	e000      	b.n	8004e7c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004e7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d108      	bne.n	8004e94 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004e82:	4b4c      	ldr	r3, [pc, #304]	; (8004fb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f023 0203 	bic.w	r2, r3, #3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4949      	ldr	r1, [pc, #292]	; (8004fb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f040 8086 	bne.w	8004fa8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e9c:	4b45      	ldr	r3, [pc, #276]	; (8004fb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a44      	ldr	r2, [pc, #272]	; (8004fb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ea2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ea6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea8:	f7fc f98e 	bl	80011c8 <HAL_GetTick>
 8004eac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004eae:	e009      	b.n	8004ec4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004eb0:	f7fc f98a 	bl	80011c8 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d902      	bls.n	8004ec4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	73fb      	strb	r3, [r7, #15]
        break;
 8004ec2:	e005      	b.n	8004ed0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ec4:	4b3b      	ldr	r3, [pc, #236]	; (8004fb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1ef      	bne.n	8004eb0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d168      	bne.n	8004fa8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d113      	bne.n	8004f04 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004edc:	4b35      	ldr	r3, [pc, #212]	; (8004fb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ede:	695a      	ldr	r2, [r3, #20]
 8004ee0:	4b35      	ldr	r3, [pc, #212]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6892      	ldr	r2, [r2, #8]
 8004ee8:	0211      	lsls	r1, r2, #8
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	68d2      	ldr	r2, [r2, #12]
 8004eee:	06d2      	lsls	r2, r2, #27
 8004ef0:	4311      	orrs	r1, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6852      	ldr	r2, [r2, #4]
 8004ef6:	3a01      	subs	r2, #1
 8004ef8:	0112      	lsls	r2, r2, #4
 8004efa:	430a      	orrs	r2, r1
 8004efc:	492d      	ldr	r1, [pc, #180]	; (8004fb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	614b      	str	r3, [r1, #20]
 8004f02:	e02d      	b.n	8004f60 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d115      	bne.n	8004f36 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f0a:	4b2a      	ldr	r3, [pc, #168]	; (8004fb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f0c:	695a      	ldr	r2, [r3, #20]
 8004f0e:	4b2b      	ldr	r3, [pc, #172]	; (8004fbc <RCCEx_PLLSAI2_Config+0x1e0>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	6892      	ldr	r2, [r2, #8]
 8004f16:	0211      	lsls	r1, r2, #8
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6912      	ldr	r2, [r2, #16]
 8004f1c:	0852      	lsrs	r2, r2, #1
 8004f1e:	3a01      	subs	r2, #1
 8004f20:	0552      	lsls	r2, r2, #21
 8004f22:	4311      	orrs	r1, r2
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	6852      	ldr	r2, [r2, #4]
 8004f28:	3a01      	subs	r2, #1
 8004f2a:	0112      	lsls	r2, r2, #4
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	4921      	ldr	r1, [pc, #132]	; (8004fb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	614b      	str	r3, [r1, #20]
 8004f34:	e014      	b.n	8004f60 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f36:	4b1f      	ldr	r3, [pc, #124]	; (8004fb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f38:	695a      	ldr	r2, [r3, #20]
 8004f3a:	4b21      	ldr	r3, [pc, #132]	; (8004fc0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6892      	ldr	r2, [r2, #8]
 8004f42:	0211      	lsls	r1, r2, #8
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6952      	ldr	r2, [r2, #20]
 8004f48:	0852      	lsrs	r2, r2, #1
 8004f4a:	3a01      	subs	r2, #1
 8004f4c:	0652      	lsls	r2, r2, #25
 8004f4e:	4311      	orrs	r1, r2
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6852      	ldr	r2, [r2, #4]
 8004f54:	3a01      	subs	r2, #1
 8004f56:	0112      	lsls	r2, r2, #4
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	4916      	ldr	r1, [pc, #88]	; (8004fb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f60:	4b14      	ldr	r3, [pc, #80]	; (8004fb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a13      	ldr	r2, [pc, #76]	; (8004fb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f6c:	f7fc f92c 	bl	80011c8 <HAL_GetTick>
 8004f70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f72:	e009      	b.n	8004f88 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f74:	f7fc f928 	bl	80011c8 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d902      	bls.n	8004f88 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	73fb      	strb	r3, [r7, #15]
          break;
 8004f86:	e005      	b.n	8004f94 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f88:	4b0a      	ldr	r3, [pc, #40]	; (8004fb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0ef      	beq.n	8004f74 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f9a:	4b06      	ldr	r3, [pc, #24]	; (8004fb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f9c:	695a      	ldr	r2, [r3, #20]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	4904      	ldr	r1, [pc, #16]	; (8004fb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	07ff800f 	.word	0x07ff800f
 8004fbc:	ff9f800f 	.word	0xff9f800f
 8004fc0:	f9ff800f 	.word	0xf9ff800f

08004fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e049      	b.n	800506a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fb ff3a 	bl	8000e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3304      	adds	r3, #4
 8005000:	4619      	mov	r1, r3
 8005002:	4610      	mov	r0, r2
 8005004:	f000 fab4 	bl	8005570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
	...

08005074 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b01      	cmp	r3, #1
 8005086:	d001      	beq.n	800508c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e04f      	b.n	800512c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0201 	orr.w	r2, r2, #1
 80050a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a23      	ldr	r2, [pc, #140]	; (8005138 <HAL_TIM_Base_Start_IT+0xc4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d01d      	beq.n	80050ea <HAL_TIM_Base_Start_IT+0x76>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b6:	d018      	beq.n	80050ea <HAL_TIM_Base_Start_IT+0x76>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a1f      	ldr	r2, [pc, #124]	; (800513c <HAL_TIM_Base_Start_IT+0xc8>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d013      	beq.n	80050ea <HAL_TIM_Base_Start_IT+0x76>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a1e      	ldr	r2, [pc, #120]	; (8005140 <HAL_TIM_Base_Start_IT+0xcc>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d00e      	beq.n	80050ea <HAL_TIM_Base_Start_IT+0x76>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a1c      	ldr	r2, [pc, #112]	; (8005144 <HAL_TIM_Base_Start_IT+0xd0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d009      	beq.n	80050ea <HAL_TIM_Base_Start_IT+0x76>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a1b      	ldr	r2, [pc, #108]	; (8005148 <HAL_TIM_Base_Start_IT+0xd4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d004      	beq.n	80050ea <HAL_TIM_Base_Start_IT+0x76>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a19      	ldr	r2, [pc, #100]	; (800514c <HAL_TIM_Base_Start_IT+0xd8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d115      	bne.n	8005116 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	4b17      	ldr	r3, [pc, #92]	; (8005150 <HAL_TIM_Base_Start_IT+0xdc>)
 80050f2:	4013      	ands	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2b06      	cmp	r3, #6
 80050fa:	d015      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0xb4>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005102:	d011      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 0201 	orr.w	r2, r2, #1
 8005112:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005114:	e008      	b.n	8005128 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f042 0201 	orr.w	r2, r2, #1
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	e000      	b.n	800512a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005128:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	40012c00 	.word	0x40012c00
 800513c:	40000400 	.word	0x40000400
 8005140:	40000800 	.word	0x40000800
 8005144:	40000c00 	.word	0x40000c00
 8005148:	40013400 	.word	0x40013400
 800514c:	40014000 	.word	0x40014000
 8005150:	00010007 	.word	0x00010007

08005154 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b02      	cmp	r3, #2
 8005168:	d122      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b02      	cmp	r3, #2
 8005176:	d11b      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f06f 0202 	mvn.w	r2, #2
 8005180:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f9cb 	bl	8005532 <HAL_TIM_IC_CaptureCallback>
 800519c:	e005      	b.n	80051aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f9bd 	bl	800551e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f9ce 	bl	8005546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f003 0304 	and.w	r3, r3, #4
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d122      	bne.n	8005204 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b04      	cmp	r3, #4
 80051ca:	d11b      	bne.n	8005204 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f06f 0204 	mvn.w	r2, #4
 80051d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2202      	movs	r2, #2
 80051da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f9a1 	bl	8005532 <HAL_TIM_IC_CaptureCallback>
 80051f0:	e005      	b.n	80051fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f993 	bl	800551e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f9a4 	bl	8005546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f003 0308 	and.w	r3, r3, #8
 800520e:	2b08      	cmp	r3, #8
 8005210:	d122      	bne.n	8005258 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f003 0308 	and.w	r3, r3, #8
 800521c:	2b08      	cmp	r3, #8
 800521e:	d11b      	bne.n	8005258 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f06f 0208 	mvn.w	r2, #8
 8005228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2204      	movs	r2, #4
 800522e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	f003 0303 	and.w	r3, r3, #3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f977 	bl	8005532 <HAL_TIM_IC_CaptureCallback>
 8005244:	e005      	b.n	8005252 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f969 	bl	800551e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f97a 	bl	8005546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	f003 0310 	and.w	r3, r3, #16
 8005262:	2b10      	cmp	r3, #16
 8005264:	d122      	bne.n	80052ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f003 0310 	and.w	r3, r3, #16
 8005270:	2b10      	cmp	r3, #16
 8005272:	d11b      	bne.n	80052ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f06f 0210 	mvn.w	r2, #16
 800527c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2208      	movs	r2, #8
 8005282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f94d 	bl	8005532 <HAL_TIM_IC_CaptureCallback>
 8005298:	e005      	b.n	80052a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f93f 	bl	800551e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f950 	bl	8005546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d10e      	bne.n	80052d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d107      	bne.n	80052d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f06f 0201 	mvn.w	r2, #1
 80052d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fb fca6 	bl	8000c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e2:	2b80      	cmp	r3, #128	; 0x80
 80052e4:	d10e      	bne.n	8005304 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f0:	2b80      	cmp	r3, #128	; 0x80
 80052f2:	d107      	bne.n	8005304 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fafc 	bl	80058fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005312:	d10e      	bne.n	8005332 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531e:	2b80      	cmp	r3, #128	; 0x80
 8005320:	d107      	bne.n	8005332 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800532a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 faef 	bl	8005910 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533c:	2b40      	cmp	r3, #64	; 0x40
 800533e:	d10e      	bne.n	800535e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534a:	2b40      	cmp	r3, #64	; 0x40
 800534c:	d107      	bne.n	800535e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f8fe 	bl	800555a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	f003 0320 	and.w	r3, r3, #32
 8005368:	2b20      	cmp	r3, #32
 800536a:	d10e      	bne.n	800538a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	f003 0320 	and.w	r3, r3, #32
 8005376:	2b20      	cmp	r3, #32
 8005378:	d107      	bne.n	800538a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f06f 0220 	mvn.w	r2, #32
 8005382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 faaf 	bl	80058e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800538a:	bf00      	nop
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b084      	sub	sp, #16
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <HAL_TIM_ConfigClockSource+0x18>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e0b5      	b.n	8005516 <HAL_TIM_ConfigClockSource+0x184>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2202      	movs	r2, #2
 80053b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053cc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053d4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053e6:	d03e      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0xd4>
 80053e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ec:	f200 8087 	bhi.w	80054fe <HAL_TIM_ConfigClockSource+0x16c>
 80053f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f4:	f000 8085 	beq.w	8005502 <HAL_TIM_ConfigClockSource+0x170>
 80053f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053fc:	d87f      	bhi.n	80054fe <HAL_TIM_ConfigClockSource+0x16c>
 80053fe:	2b70      	cmp	r3, #112	; 0x70
 8005400:	d01a      	beq.n	8005438 <HAL_TIM_ConfigClockSource+0xa6>
 8005402:	2b70      	cmp	r3, #112	; 0x70
 8005404:	d87b      	bhi.n	80054fe <HAL_TIM_ConfigClockSource+0x16c>
 8005406:	2b60      	cmp	r3, #96	; 0x60
 8005408:	d050      	beq.n	80054ac <HAL_TIM_ConfigClockSource+0x11a>
 800540a:	2b60      	cmp	r3, #96	; 0x60
 800540c:	d877      	bhi.n	80054fe <HAL_TIM_ConfigClockSource+0x16c>
 800540e:	2b50      	cmp	r3, #80	; 0x50
 8005410:	d03c      	beq.n	800548c <HAL_TIM_ConfigClockSource+0xfa>
 8005412:	2b50      	cmp	r3, #80	; 0x50
 8005414:	d873      	bhi.n	80054fe <HAL_TIM_ConfigClockSource+0x16c>
 8005416:	2b40      	cmp	r3, #64	; 0x40
 8005418:	d058      	beq.n	80054cc <HAL_TIM_ConfigClockSource+0x13a>
 800541a:	2b40      	cmp	r3, #64	; 0x40
 800541c:	d86f      	bhi.n	80054fe <HAL_TIM_ConfigClockSource+0x16c>
 800541e:	2b30      	cmp	r3, #48	; 0x30
 8005420:	d064      	beq.n	80054ec <HAL_TIM_ConfigClockSource+0x15a>
 8005422:	2b30      	cmp	r3, #48	; 0x30
 8005424:	d86b      	bhi.n	80054fe <HAL_TIM_ConfigClockSource+0x16c>
 8005426:	2b20      	cmp	r3, #32
 8005428:	d060      	beq.n	80054ec <HAL_TIM_ConfigClockSource+0x15a>
 800542a:	2b20      	cmp	r3, #32
 800542c:	d867      	bhi.n	80054fe <HAL_TIM_ConfigClockSource+0x16c>
 800542e:	2b00      	cmp	r3, #0
 8005430:	d05c      	beq.n	80054ec <HAL_TIM_ConfigClockSource+0x15a>
 8005432:	2b10      	cmp	r3, #16
 8005434:	d05a      	beq.n	80054ec <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005436:	e062      	b.n	80054fe <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6818      	ldr	r0, [r3, #0]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	6899      	ldr	r1, [r3, #8]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f000 f9a6 	bl	8005798 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800545a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	609a      	str	r2, [r3, #8]
      break;
 8005464:	e04e      	b.n	8005504 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	6899      	ldr	r1, [r3, #8]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f000 f98f 	bl	8005798 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005488:	609a      	str	r2, [r3, #8]
      break;
 800548a:	e03b      	b.n	8005504 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6818      	ldr	r0, [r3, #0]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	6859      	ldr	r1, [r3, #4]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	461a      	mov	r2, r3
 800549a:	f000 f903 	bl	80056a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2150      	movs	r1, #80	; 0x50
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 f95c 	bl	8005762 <TIM_ITRx_SetConfig>
      break;
 80054aa:	e02b      	b.n	8005504 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6818      	ldr	r0, [r3, #0]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	6859      	ldr	r1, [r3, #4]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	461a      	mov	r2, r3
 80054ba:	f000 f922 	bl	8005702 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2160      	movs	r1, #96	; 0x60
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 f94c 	bl	8005762 <TIM_ITRx_SetConfig>
      break;
 80054ca:	e01b      	b.n	8005504 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6818      	ldr	r0, [r3, #0]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	6859      	ldr	r1, [r3, #4]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	461a      	mov	r2, r3
 80054da:	f000 f8e3 	bl	80056a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2140      	movs	r1, #64	; 0x40
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 f93c 	bl	8005762 <TIM_ITRx_SetConfig>
      break;
 80054ea:	e00b      	b.n	8005504 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4619      	mov	r1, r3
 80054f6:	4610      	mov	r0, r2
 80054f8:	f000 f933 	bl	8005762 <TIM_ITRx_SetConfig>
        break;
 80054fc:	e002      	b.n	8005504 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80054fe:	bf00      	nop
 8005500:	e000      	b.n	8005504 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005502:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005526:	bf00      	nop
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005532:	b480      	push	{r7}
 8005534:	b083      	sub	sp, #12
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005546:	b480      	push	{r7}
 8005548:	b083      	sub	sp, #12
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
	...

08005570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a40      	ldr	r2, [pc, #256]	; (8005684 <TIM_Base_SetConfig+0x114>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d013      	beq.n	80055b0 <TIM_Base_SetConfig+0x40>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558e:	d00f      	beq.n	80055b0 <TIM_Base_SetConfig+0x40>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a3d      	ldr	r2, [pc, #244]	; (8005688 <TIM_Base_SetConfig+0x118>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00b      	beq.n	80055b0 <TIM_Base_SetConfig+0x40>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a3c      	ldr	r2, [pc, #240]	; (800568c <TIM_Base_SetConfig+0x11c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d007      	beq.n	80055b0 <TIM_Base_SetConfig+0x40>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a3b      	ldr	r2, [pc, #236]	; (8005690 <TIM_Base_SetConfig+0x120>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d003      	beq.n	80055b0 <TIM_Base_SetConfig+0x40>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a3a      	ldr	r2, [pc, #232]	; (8005694 <TIM_Base_SetConfig+0x124>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d108      	bne.n	80055c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4313      	orrs	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a2f      	ldr	r2, [pc, #188]	; (8005684 <TIM_Base_SetConfig+0x114>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d01f      	beq.n	800560a <TIM_Base_SetConfig+0x9a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d0:	d01b      	beq.n	800560a <TIM_Base_SetConfig+0x9a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a2c      	ldr	r2, [pc, #176]	; (8005688 <TIM_Base_SetConfig+0x118>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d017      	beq.n	800560a <TIM_Base_SetConfig+0x9a>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a2b      	ldr	r2, [pc, #172]	; (800568c <TIM_Base_SetConfig+0x11c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d013      	beq.n	800560a <TIM_Base_SetConfig+0x9a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a2a      	ldr	r2, [pc, #168]	; (8005690 <TIM_Base_SetConfig+0x120>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d00f      	beq.n	800560a <TIM_Base_SetConfig+0x9a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a29      	ldr	r2, [pc, #164]	; (8005694 <TIM_Base_SetConfig+0x124>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d00b      	beq.n	800560a <TIM_Base_SetConfig+0x9a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a28      	ldr	r2, [pc, #160]	; (8005698 <TIM_Base_SetConfig+0x128>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d007      	beq.n	800560a <TIM_Base_SetConfig+0x9a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a27      	ldr	r2, [pc, #156]	; (800569c <TIM_Base_SetConfig+0x12c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d003      	beq.n	800560a <TIM_Base_SetConfig+0x9a>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a26      	ldr	r2, [pc, #152]	; (80056a0 <TIM_Base_SetConfig+0x130>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d108      	bne.n	800561c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	4313      	orrs	r3, r2
 800561a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a10      	ldr	r2, [pc, #64]	; (8005684 <TIM_Base_SetConfig+0x114>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d00f      	beq.n	8005668 <TIM_Base_SetConfig+0xf8>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a12      	ldr	r2, [pc, #72]	; (8005694 <TIM_Base_SetConfig+0x124>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00b      	beq.n	8005668 <TIM_Base_SetConfig+0xf8>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a11      	ldr	r2, [pc, #68]	; (8005698 <TIM_Base_SetConfig+0x128>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d007      	beq.n	8005668 <TIM_Base_SetConfig+0xf8>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a10      	ldr	r2, [pc, #64]	; (800569c <TIM_Base_SetConfig+0x12c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d003      	beq.n	8005668 <TIM_Base_SetConfig+0xf8>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a0f      	ldr	r2, [pc, #60]	; (80056a0 <TIM_Base_SetConfig+0x130>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d103      	bne.n	8005670 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	615a      	str	r2, [r3, #20]
}
 8005676:	bf00      	nop
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	40012c00 	.word	0x40012c00
 8005688:	40000400 	.word	0x40000400
 800568c:	40000800 	.word	0x40000800
 8005690:	40000c00 	.word	0x40000c00
 8005694:	40013400 	.word	0x40013400
 8005698:	40014000 	.word	0x40014000
 800569c:	40014400 	.word	0x40014400
 80056a0:	40014800 	.word	0x40014800

080056a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b087      	sub	sp, #28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	f023 0201 	bic.w	r2, r3, #1
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	011b      	lsls	r3, r3, #4
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f023 030a 	bic.w	r3, r3, #10
 80056e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	621a      	str	r2, [r3, #32]
}
 80056f6:	bf00      	nop
 80056f8:	371c      	adds	r7, #28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005702:	b480      	push	{r7}
 8005704:	b087      	sub	sp, #28
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	f023 0210 	bic.w	r2, r3, #16
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800572c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	031b      	lsls	r3, r3, #12
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800573e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	4313      	orrs	r3, r2
 8005748:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	621a      	str	r2, [r3, #32]
}
 8005756:	bf00      	nop
 8005758:	371c      	adds	r7, #28
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005762:	b480      	push	{r7}
 8005764:	b085      	sub	sp, #20
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005778:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	f043 0307 	orr.w	r3, r3, #7
 8005784:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	609a      	str	r2, [r3, #8]
}
 800578c:	bf00      	nop
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	021a      	lsls	r2, r3, #8
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	431a      	orrs	r2, r3
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	4313      	orrs	r3, r2
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	609a      	str	r2, [r3, #8]
}
 80057cc:	bf00      	nop
 80057ce:	371c      	adds	r7, #28
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e068      	b.n	80058c2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a2e      	ldr	r2, [pc, #184]	; (80058d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d004      	beq.n	8005824 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a2d      	ldr	r2, [pc, #180]	; (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d108      	bne.n	8005836 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800582a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4313      	orrs	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4313      	orrs	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a1e      	ldr	r2, [pc, #120]	; (80058d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d01d      	beq.n	8005896 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005862:	d018      	beq.n	8005896 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a1b      	ldr	r2, [pc, #108]	; (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d013      	beq.n	8005896 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a1a      	ldr	r2, [pc, #104]	; (80058dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d00e      	beq.n	8005896 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a18      	ldr	r2, [pc, #96]	; (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d009      	beq.n	8005896 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a13      	ldr	r2, [pc, #76]	; (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d004      	beq.n	8005896 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a14      	ldr	r2, [pc, #80]	; (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d10c      	bne.n	80058b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800589c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	40012c00 	.word	0x40012c00
 80058d4:	40013400 	.word	0x40013400
 80058d8:	40000400 	.word	0x40000400
 80058dc:	40000800 	.word	0x40000800
 80058e0:	40000c00 	.word	0x40000c00
 80058e4:	40014000 	.word	0x40014000

080058e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e042      	b.n	80059bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800593c:	2b00      	cmp	r3, #0
 800593e:	d106      	bne.n	800594e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f7fb faaf 	bl	8000eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2224      	movs	r2, #36	; 0x24
 8005952:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0201 	bic.w	r2, r2, #1
 8005964:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fb04 	bl	8005f74 <UART_SetConfig>
 800596c:	4603      	mov	r3, r0
 800596e:	2b01      	cmp	r3, #1
 8005970:	d101      	bne.n	8005976 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e022      	b.n	80059bc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fdc2 	bl	8006508 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005992:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f042 0201 	orr.w	r2, r2, #1
 80059b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 fe49 	bl	800664c <UART_CheckIdleState>
 80059ba:	4603      	mov	r3, r0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	4613      	mov	r3, r2
 80059d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059d8:	2b20      	cmp	r3, #32
 80059da:	d168      	bne.n	8005aae <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d002      	beq.n	80059e8 <HAL_UART_Transmit_IT+0x24>
 80059e2:	88fb      	ldrh	r3, [r7, #6]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e061      	b.n	8005ab0 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d101      	bne.n	80059fa <HAL_UART_Transmit_IT+0x36>
 80059f6:	2302      	movs	r3, #2
 80059f8:	e05a      	b.n	8005ab0 <HAL_UART_Transmit_IT+0xec>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	88fa      	ldrh	r2, [r7, #6]
 8005a0c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	88fa      	ldrh	r2, [r7, #6]
 8005a14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2221      	movs	r2, #33	; 0x21
 8005a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#if defined(USART_CR1_FIFOEN)
    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a36:	d11c      	bne.n	8005a72 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a40:	d107      	bne.n	8005a52 <HAL_UART_Transmit_IT+0x8e>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d103      	bne.n	8005a52 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4a1b      	ldr	r2, [pc, #108]	; (8005abc <HAL_UART_Transmit_IT+0xf8>)
 8005a4e:	675a      	str	r2, [r3, #116]	; 0x74
 8005a50:	e002      	b.n	8005a58 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4a1a      	ldr	r2, [pc, #104]	; (8005ac0 <HAL_UART_Transmit_IT+0xfc>)
 8005a56:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689a      	ldr	r2, [r3, #8]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005a6e:	609a      	str	r2, [r3, #8]
 8005a70:	e01b      	b.n	8005aaa <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a7a:	d107      	bne.n	8005a8c <HAL_UART_Transmit_IT+0xc8>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d103      	bne.n	8005a8c <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4a0f      	ldr	r2, [pc, #60]	; (8005ac4 <HAL_UART_Transmit_IT+0x100>)
 8005a88:	675a      	str	r2, [r3, #116]	; 0x74
 8005a8a:	e002      	b.n	8005a92 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4a0e      	ldr	r2, [pc, #56]	; (8005ac8 <HAL_UART_Transmit_IT+0x104>)
 8005a90:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005aa8:	601a      	str	r2, [r3, #0]

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	e000      	b.n	8005ab0 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8005aae:	2302      	movs	r3, #2
  }
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	080069ff 	.word	0x080069ff
 8005ac0:	08006965 	.word	0x08006965
 8005ac4:	080068e7 	.word	0x080068e7
 8005ac8:	08006873 	.word	0x08006873

08005acc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b088      	sub	sp, #32
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005aec:	69fa      	ldr	r2, [r7, #28]
 8005aee:	f640 030f 	movw	r3, #2063	; 0x80f
 8005af2:	4013      	ands	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d118      	bne.n	8005b2e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	f003 0320 	and.w	r3, r3, #32
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d013      	beq.n	8005b2e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d104      	bne.n	8005b1a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d009      	beq.n	8005b2e <HAL_UART_IRQHandler+0x62>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 81fb 	beq.w	8005f1a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	4798      	blx	r3
      }
      return;
 8005b2c:	e1f5      	b.n	8005f1a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 80ef 	beq.w	8005d14 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4b73      	ldr	r3, [pc, #460]	; (8005d08 <HAL_UART_IRQHandler+0x23c>)
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d105      	bne.n	8005b4c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	4b72      	ldr	r3, [pc, #456]	; (8005d0c <HAL_UART_IRQHandler+0x240>)
 8005b44:	4013      	ands	r3, r2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 80e4 	beq.w	8005d14 <HAL_UART_IRQHandler+0x248>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d010      	beq.n	8005b78 <HAL_UART_IRQHandler+0xac>
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00b      	beq.n	8005b78 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2201      	movs	r2, #1
 8005b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b6e:	f043 0201 	orr.w	r2, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d010      	beq.n	8005ba4 <HAL_UART_IRQHandler+0xd8>
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00b      	beq.n	8005ba4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2202      	movs	r2, #2
 8005b92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b9a:	f043 0204 	orr.w	r2, r3, #4
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	f003 0304 	and.w	r3, r3, #4
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d010      	beq.n	8005bd0 <HAL_UART_IRQHandler+0x104>
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00b      	beq.n	8005bd0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2204      	movs	r2, #4
 8005bbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bc6:	f043 0202 	orr.w	r2, r3, #2
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	f003 0308 	and.w	r3, r3, #8
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d015      	beq.n	8005c06 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	f003 0320 	and.w	r3, r3, #32
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d104      	bne.n	8005bee <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	4b48      	ldr	r3, [pc, #288]	; (8005d08 <HAL_UART_IRQHandler+0x23c>)
 8005be8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00b      	beq.n	8005c06 <HAL_UART_IRQHandler+0x13a>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2208      	movs	r2, #8
 8005bf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bfc:	f043 0208 	orr.w	r2, r3, #8
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d011      	beq.n	8005c34 <HAL_UART_IRQHandler+0x168>
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00c      	beq.n	8005c34 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c2a:	f043 0220 	orr.w	r2, r3, #32
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 816f 	beq.w	8005f1e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	f003 0320 	and.w	r3, r3, #32
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d011      	beq.n	8005c6e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	f003 0320 	and.w	r3, r3, #32
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d104      	bne.n	8005c5e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d007      	beq.n	8005c6e <HAL_UART_IRQHandler+0x1a2>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c74:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c80:	2b40      	cmp	r3, #64	; 0x40
 8005c82:	d004      	beq.n	8005c8e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d031      	beq.n	8005cf2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fda7 	bl	80067e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9e:	2b40      	cmp	r3, #64	; 0x40
 8005ca0:	d123      	bne.n	8005cea <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cb0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d013      	beq.n	8005ce2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cbe:	4a14      	ldr	r2, [pc, #80]	; (8005d10 <HAL_UART_IRQHandler+0x244>)
 8005cc0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fd f8b9 	bl	8002e3e <HAL_DMA_Abort_IT>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d017      	beq.n	8005d02 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005cdc:	4610      	mov	r0, r2
 8005cde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce0:	e00f      	b.n	8005d02 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f930 	bl	8005f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce8:	e00b      	b.n	8005d02 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f92c 	bl	8005f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf0:	e007      	b.n	8005d02 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f928 	bl	8005f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005d00:	e10d      	b.n	8005f1e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d02:	bf00      	nop
    return;
 8005d04:	e10b      	b.n	8005f1e <HAL_UART_IRQHandler+0x452>
 8005d06:	bf00      	nop
 8005d08:	10000001 	.word	0x10000001
 8005d0c:	04000120 	.word	0x04000120
 8005d10:	08006847 	.word	0x08006847

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	f040 80ab 	bne.w	8005e74 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	f003 0310 	and.w	r3, r3, #16
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 80a5 	beq.w	8005e74 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	f003 0310 	and.w	r3, r3, #16
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 809f 	beq.w	8005e74 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2210      	movs	r2, #16
 8005d3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d48:	2b40      	cmp	r3, #64	; 0x40
 8005d4a:	d155      	bne.n	8005df8 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8005d56:	893b      	ldrh	r3, [r7, #8]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 80e2 	beq.w	8005f22 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d64:	893a      	ldrh	r2, [r7, #8]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	f080 80db 	bcs.w	8005f22 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	893a      	ldrh	r2, [r7, #8]
 8005d70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0320 	and.w	r3, r3, #32
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d12b      	bne.n	8005ddc <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d92:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689a      	ldr	r2, [r3, #8]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0201 	bic.w	r2, r2, #1
 8005da2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689a      	ldr	r2, [r3, #8]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005db2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f022 0210 	bic.w	r2, r2, #16
 8005dd0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7fc ffd5 	bl	8002d86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	4619      	mov	r1, r3
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f8b3 	bl	8005f5c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005df6:	e094      	b.n	8005f22 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f000 8087 	beq.w	8005f26 <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8005e18:	897b      	ldrh	r3, [r7, #10]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 8083 	beq.w	8005f26 <HAL_UART_IRQHandler+0x45a>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e2e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6812      	ldr	r2, [r2, #0]
 8005e3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e3e:	f023 0301 	bic.w	r3, r3, #1
 8005e42:	6093      	str	r3, [r2, #8]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2220      	movs	r2, #32
 8005e48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0210 	bic.w	r2, r2, #16
 8005e66:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e68:	897b      	ldrh	r3, [r7, #10]
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f875 	bl	8005f5c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005e72:	e058      	b.n	8005f26 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00d      	beq.n	8005e9a <HAL_UART_IRQHandler+0x3ce>
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d008      	beq.n	8005e9a <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005e90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fe1f 	bl	8006ad6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e98:	e048      	b.n	8005f2c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d012      	beq.n	8005eca <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d104      	bne.n	8005eb8 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d008      	beq.n	8005eca <HAL_UART_IRQHandler+0x3fe>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d034      	beq.n	8005f2a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	4798      	blx	r3
    }
    return;
 8005ec8:	e02f      	b.n	8005f2a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d008      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x41a>
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 fddf 	bl	8006aa2 <UART_EndTransmit_IT>
    return;
 8005ee4:	e022      	b.n	8005f2c <HAL_UART_IRQHandler+0x460>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d008      	beq.n	8005f02 <HAL_UART_IRQHandler+0x436>
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fdff 	bl	8006afe <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f00:	e014      	b.n	8005f2c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00f      	beq.n	8005f2c <HAL_UART_IRQHandler+0x460>
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	da0c      	bge.n	8005f2c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 fde9 	bl	8006aea <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f18:	e008      	b.n	8005f2c <HAL_UART_IRQHandler+0x460>
      return;
 8005f1a:	bf00      	nop
 8005f1c:	e006      	b.n	8005f2c <HAL_UART_IRQHandler+0x460>
    return;
 8005f1e:	bf00      	nop
 8005f20:	e004      	b.n	8005f2c <HAL_UART_IRQHandler+0x460>
      return;
 8005f22:	bf00      	nop
 8005f24:	e002      	b.n	8005f2c <HAL_UART_IRQHandler+0x460>
      return;
 8005f26:	bf00      	nop
 8005f28:	e000      	b.n	8005f2c <HAL_UART_IRQHandler+0x460>
    return;
 8005f2a:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8005f2c:	3720      	adds	r7, #32
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop

08005f34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	460b      	mov	r3, r1
 8005f66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f74:	b5b0      	push	{r4, r5, r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	431a      	orrs	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	69db      	ldr	r3, [r3, #28]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	4bb1      	ldr	r3, [pc, #708]	; (8006264 <UART_SetConfig+0x2f0>)
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	6812      	ldr	r2, [r2, #0]
 8005fa6:	69f9      	ldr	r1, [r7, #28]
 8005fa8:	430b      	orrs	r3, r1
 8005faa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68da      	ldr	r2, [r3, #12]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4aa6      	ldr	r2, [pc, #664]	; (8006268 <UART_SetConfig+0x2f4>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d004      	beq.n	8005fdc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	69fa      	ldr	r2, [r7, #28]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005fe6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	6812      	ldr	r2, [r2, #0]
 8005fee:	69f9      	ldr	r1, [r7, #28]
 8005ff0:	430b      	orrs	r3, r1
 8005ff2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffa:	f023 010f 	bic.w	r1, r3, #15
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a97      	ldr	r2, [pc, #604]	; (800626c <UART_SetConfig+0x2f8>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d120      	bne.n	8006056 <UART_SetConfig+0xe2>
 8006014:	4b96      	ldr	r3, [pc, #600]	; (8006270 <UART_SetConfig+0x2fc>)
 8006016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601a:	f003 0303 	and.w	r3, r3, #3
 800601e:	2b03      	cmp	r3, #3
 8006020:	d816      	bhi.n	8006050 <UART_SetConfig+0xdc>
 8006022:	a201      	add	r2, pc, #4	; (adr r2, 8006028 <UART_SetConfig+0xb4>)
 8006024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006028:	08006039 	.word	0x08006039
 800602c:	08006045 	.word	0x08006045
 8006030:	0800603f 	.word	0x0800603f
 8006034:	0800604b 	.word	0x0800604b
 8006038:	2301      	movs	r3, #1
 800603a:	76fb      	strb	r3, [r7, #27]
 800603c:	e0e7      	b.n	800620e <UART_SetConfig+0x29a>
 800603e:	2302      	movs	r3, #2
 8006040:	76fb      	strb	r3, [r7, #27]
 8006042:	e0e4      	b.n	800620e <UART_SetConfig+0x29a>
 8006044:	2304      	movs	r3, #4
 8006046:	76fb      	strb	r3, [r7, #27]
 8006048:	e0e1      	b.n	800620e <UART_SetConfig+0x29a>
 800604a:	2308      	movs	r3, #8
 800604c:	76fb      	strb	r3, [r7, #27]
 800604e:	e0de      	b.n	800620e <UART_SetConfig+0x29a>
 8006050:	2310      	movs	r3, #16
 8006052:	76fb      	strb	r3, [r7, #27]
 8006054:	e0db      	b.n	800620e <UART_SetConfig+0x29a>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a86      	ldr	r2, [pc, #536]	; (8006274 <UART_SetConfig+0x300>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d132      	bne.n	80060c6 <UART_SetConfig+0x152>
 8006060:	4b83      	ldr	r3, [pc, #524]	; (8006270 <UART_SetConfig+0x2fc>)
 8006062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006066:	f003 030c 	and.w	r3, r3, #12
 800606a:	2b0c      	cmp	r3, #12
 800606c:	d828      	bhi.n	80060c0 <UART_SetConfig+0x14c>
 800606e:	a201      	add	r2, pc, #4	; (adr r2, 8006074 <UART_SetConfig+0x100>)
 8006070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006074:	080060a9 	.word	0x080060a9
 8006078:	080060c1 	.word	0x080060c1
 800607c:	080060c1 	.word	0x080060c1
 8006080:	080060c1 	.word	0x080060c1
 8006084:	080060b5 	.word	0x080060b5
 8006088:	080060c1 	.word	0x080060c1
 800608c:	080060c1 	.word	0x080060c1
 8006090:	080060c1 	.word	0x080060c1
 8006094:	080060af 	.word	0x080060af
 8006098:	080060c1 	.word	0x080060c1
 800609c:	080060c1 	.word	0x080060c1
 80060a0:	080060c1 	.word	0x080060c1
 80060a4:	080060bb 	.word	0x080060bb
 80060a8:	2300      	movs	r3, #0
 80060aa:	76fb      	strb	r3, [r7, #27]
 80060ac:	e0af      	b.n	800620e <UART_SetConfig+0x29a>
 80060ae:	2302      	movs	r3, #2
 80060b0:	76fb      	strb	r3, [r7, #27]
 80060b2:	e0ac      	b.n	800620e <UART_SetConfig+0x29a>
 80060b4:	2304      	movs	r3, #4
 80060b6:	76fb      	strb	r3, [r7, #27]
 80060b8:	e0a9      	b.n	800620e <UART_SetConfig+0x29a>
 80060ba:	2308      	movs	r3, #8
 80060bc:	76fb      	strb	r3, [r7, #27]
 80060be:	e0a6      	b.n	800620e <UART_SetConfig+0x29a>
 80060c0:	2310      	movs	r3, #16
 80060c2:	76fb      	strb	r3, [r7, #27]
 80060c4:	e0a3      	b.n	800620e <UART_SetConfig+0x29a>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a6b      	ldr	r2, [pc, #428]	; (8006278 <UART_SetConfig+0x304>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d120      	bne.n	8006112 <UART_SetConfig+0x19e>
 80060d0:	4b67      	ldr	r3, [pc, #412]	; (8006270 <UART_SetConfig+0x2fc>)
 80060d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060da:	2b30      	cmp	r3, #48	; 0x30
 80060dc:	d013      	beq.n	8006106 <UART_SetConfig+0x192>
 80060de:	2b30      	cmp	r3, #48	; 0x30
 80060e0:	d814      	bhi.n	800610c <UART_SetConfig+0x198>
 80060e2:	2b20      	cmp	r3, #32
 80060e4:	d009      	beq.n	80060fa <UART_SetConfig+0x186>
 80060e6:	2b20      	cmp	r3, #32
 80060e8:	d810      	bhi.n	800610c <UART_SetConfig+0x198>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d002      	beq.n	80060f4 <UART_SetConfig+0x180>
 80060ee:	2b10      	cmp	r3, #16
 80060f0:	d006      	beq.n	8006100 <UART_SetConfig+0x18c>
 80060f2:	e00b      	b.n	800610c <UART_SetConfig+0x198>
 80060f4:	2300      	movs	r3, #0
 80060f6:	76fb      	strb	r3, [r7, #27]
 80060f8:	e089      	b.n	800620e <UART_SetConfig+0x29a>
 80060fa:	2302      	movs	r3, #2
 80060fc:	76fb      	strb	r3, [r7, #27]
 80060fe:	e086      	b.n	800620e <UART_SetConfig+0x29a>
 8006100:	2304      	movs	r3, #4
 8006102:	76fb      	strb	r3, [r7, #27]
 8006104:	e083      	b.n	800620e <UART_SetConfig+0x29a>
 8006106:	2308      	movs	r3, #8
 8006108:	76fb      	strb	r3, [r7, #27]
 800610a:	e080      	b.n	800620e <UART_SetConfig+0x29a>
 800610c:	2310      	movs	r3, #16
 800610e:	76fb      	strb	r3, [r7, #27]
 8006110:	e07d      	b.n	800620e <UART_SetConfig+0x29a>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a59      	ldr	r2, [pc, #356]	; (800627c <UART_SetConfig+0x308>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d120      	bne.n	800615e <UART_SetConfig+0x1ea>
 800611c:	4b54      	ldr	r3, [pc, #336]	; (8006270 <UART_SetConfig+0x2fc>)
 800611e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006122:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006126:	2bc0      	cmp	r3, #192	; 0xc0
 8006128:	d013      	beq.n	8006152 <UART_SetConfig+0x1de>
 800612a:	2bc0      	cmp	r3, #192	; 0xc0
 800612c:	d814      	bhi.n	8006158 <UART_SetConfig+0x1e4>
 800612e:	2b80      	cmp	r3, #128	; 0x80
 8006130:	d009      	beq.n	8006146 <UART_SetConfig+0x1d2>
 8006132:	2b80      	cmp	r3, #128	; 0x80
 8006134:	d810      	bhi.n	8006158 <UART_SetConfig+0x1e4>
 8006136:	2b00      	cmp	r3, #0
 8006138:	d002      	beq.n	8006140 <UART_SetConfig+0x1cc>
 800613a:	2b40      	cmp	r3, #64	; 0x40
 800613c:	d006      	beq.n	800614c <UART_SetConfig+0x1d8>
 800613e:	e00b      	b.n	8006158 <UART_SetConfig+0x1e4>
 8006140:	2300      	movs	r3, #0
 8006142:	76fb      	strb	r3, [r7, #27]
 8006144:	e063      	b.n	800620e <UART_SetConfig+0x29a>
 8006146:	2302      	movs	r3, #2
 8006148:	76fb      	strb	r3, [r7, #27]
 800614a:	e060      	b.n	800620e <UART_SetConfig+0x29a>
 800614c:	2304      	movs	r3, #4
 800614e:	76fb      	strb	r3, [r7, #27]
 8006150:	e05d      	b.n	800620e <UART_SetConfig+0x29a>
 8006152:	2308      	movs	r3, #8
 8006154:	76fb      	strb	r3, [r7, #27]
 8006156:	e05a      	b.n	800620e <UART_SetConfig+0x29a>
 8006158:	2310      	movs	r3, #16
 800615a:	76fb      	strb	r3, [r7, #27]
 800615c:	e057      	b.n	800620e <UART_SetConfig+0x29a>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a47      	ldr	r2, [pc, #284]	; (8006280 <UART_SetConfig+0x30c>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d125      	bne.n	80061b4 <UART_SetConfig+0x240>
 8006168:	4b41      	ldr	r3, [pc, #260]	; (8006270 <UART_SetConfig+0x2fc>)
 800616a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006172:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006176:	d017      	beq.n	80061a8 <UART_SetConfig+0x234>
 8006178:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800617c:	d817      	bhi.n	80061ae <UART_SetConfig+0x23a>
 800617e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006182:	d00b      	beq.n	800619c <UART_SetConfig+0x228>
 8006184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006188:	d811      	bhi.n	80061ae <UART_SetConfig+0x23a>
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <UART_SetConfig+0x222>
 800618e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006192:	d006      	beq.n	80061a2 <UART_SetConfig+0x22e>
 8006194:	e00b      	b.n	80061ae <UART_SetConfig+0x23a>
 8006196:	2300      	movs	r3, #0
 8006198:	76fb      	strb	r3, [r7, #27]
 800619a:	e038      	b.n	800620e <UART_SetConfig+0x29a>
 800619c:	2302      	movs	r3, #2
 800619e:	76fb      	strb	r3, [r7, #27]
 80061a0:	e035      	b.n	800620e <UART_SetConfig+0x29a>
 80061a2:	2304      	movs	r3, #4
 80061a4:	76fb      	strb	r3, [r7, #27]
 80061a6:	e032      	b.n	800620e <UART_SetConfig+0x29a>
 80061a8:	2308      	movs	r3, #8
 80061aa:	76fb      	strb	r3, [r7, #27]
 80061ac:	e02f      	b.n	800620e <UART_SetConfig+0x29a>
 80061ae:	2310      	movs	r3, #16
 80061b0:	76fb      	strb	r3, [r7, #27]
 80061b2:	e02c      	b.n	800620e <UART_SetConfig+0x29a>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a2b      	ldr	r2, [pc, #172]	; (8006268 <UART_SetConfig+0x2f4>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d125      	bne.n	800620a <UART_SetConfig+0x296>
 80061be:	4b2c      	ldr	r3, [pc, #176]	; (8006270 <UART_SetConfig+0x2fc>)
 80061c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061cc:	d017      	beq.n	80061fe <UART_SetConfig+0x28a>
 80061ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061d2:	d817      	bhi.n	8006204 <UART_SetConfig+0x290>
 80061d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061d8:	d00b      	beq.n	80061f2 <UART_SetConfig+0x27e>
 80061da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061de:	d811      	bhi.n	8006204 <UART_SetConfig+0x290>
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d003      	beq.n	80061ec <UART_SetConfig+0x278>
 80061e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061e8:	d006      	beq.n	80061f8 <UART_SetConfig+0x284>
 80061ea:	e00b      	b.n	8006204 <UART_SetConfig+0x290>
 80061ec:	2300      	movs	r3, #0
 80061ee:	76fb      	strb	r3, [r7, #27]
 80061f0:	e00d      	b.n	800620e <UART_SetConfig+0x29a>
 80061f2:	2302      	movs	r3, #2
 80061f4:	76fb      	strb	r3, [r7, #27]
 80061f6:	e00a      	b.n	800620e <UART_SetConfig+0x29a>
 80061f8:	2304      	movs	r3, #4
 80061fa:	76fb      	strb	r3, [r7, #27]
 80061fc:	e007      	b.n	800620e <UART_SetConfig+0x29a>
 80061fe:	2308      	movs	r3, #8
 8006200:	76fb      	strb	r3, [r7, #27]
 8006202:	e004      	b.n	800620e <UART_SetConfig+0x29a>
 8006204:	2310      	movs	r3, #16
 8006206:	76fb      	strb	r3, [r7, #27]
 8006208:	e001      	b.n	800620e <UART_SetConfig+0x29a>
 800620a:	2310      	movs	r3, #16
 800620c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a15      	ldr	r2, [pc, #84]	; (8006268 <UART_SetConfig+0x2f4>)
 8006214:	4293      	cmp	r3, r2
 8006216:	f040 809f 	bne.w	8006358 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800621a:	7efb      	ldrb	r3, [r7, #27]
 800621c:	2b08      	cmp	r3, #8
 800621e:	d837      	bhi.n	8006290 <UART_SetConfig+0x31c>
 8006220:	a201      	add	r2, pc, #4	; (adr r2, 8006228 <UART_SetConfig+0x2b4>)
 8006222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006226:	bf00      	nop
 8006228:	0800624d 	.word	0x0800624d
 800622c:	08006291 	.word	0x08006291
 8006230:	08006255 	.word	0x08006255
 8006234:	08006291 	.word	0x08006291
 8006238:	0800625b 	.word	0x0800625b
 800623c:	08006291 	.word	0x08006291
 8006240:	08006291 	.word	0x08006291
 8006244:	08006291 	.word	0x08006291
 8006248:	08006289 	.word	0x08006289
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800624c:	f7fe f878 	bl	8004340 <HAL_RCC_GetPCLK1Freq>
 8006250:	6178      	str	r0, [r7, #20]
        break;
 8006252:	e022      	b.n	800629a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006254:	4b0b      	ldr	r3, [pc, #44]	; (8006284 <UART_SetConfig+0x310>)
 8006256:	617b      	str	r3, [r7, #20]
        break;
 8006258:	e01f      	b.n	800629a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800625a:	f7fd ffd9 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 800625e:	6178      	str	r0, [r7, #20]
        break;
 8006260:	e01b      	b.n	800629a <UART_SetConfig+0x326>
 8006262:	bf00      	nop
 8006264:	cfff69f3 	.word	0xcfff69f3
 8006268:	40008000 	.word	0x40008000
 800626c:	40013800 	.word	0x40013800
 8006270:	40021000 	.word	0x40021000
 8006274:	40004400 	.word	0x40004400
 8006278:	40004800 	.word	0x40004800
 800627c:	40004c00 	.word	0x40004c00
 8006280:	40005000 	.word	0x40005000
 8006284:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800628c:	617b      	str	r3, [r7, #20]
        break;
 800628e:	e004      	b.n	800629a <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	76bb      	strb	r3, [r7, #26]
        break;
 8006298:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 811b 	beq.w	80064d8 <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	4a96      	ldr	r2, [pc, #600]	; (8006500 <UART_SetConfig+0x58c>)
 80062a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062ac:	461a      	mov	r2, r3
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80062b4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	4613      	mov	r3, r2
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	4413      	add	r3, r2
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d305      	bcc.n	80062d2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d902      	bls.n	80062d8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	76bb      	strb	r3, [r7, #26]
 80062d6:	e0ff      	b.n	80064d8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	4618      	mov	r0, r3
 80062dc:	f04f 0100 	mov.w	r1, #0
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	4a86      	ldr	r2, [pc, #536]	; (8006500 <UART_SetConfig+0x58c>)
 80062e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	f04f 0300 	mov.w	r3, #0
 80062f0:	f7f9 ffd6 	bl	80002a0 <__aeabi_uldivmod>
 80062f4:	4602      	mov	r2, r0
 80062f6:	460b      	mov	r3, r1
 80062f8:	4610      	mov	r0, r2
 80062fa:	4619      	mov	r1, r3
 80062fc:	f04f 0200 	mov.w	r2, #0
 8006300:	f04f 0300 	mov.w	r3, #0
 8006304:	020b      	lsls	r3, r1, #8
 8006306:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800630a:	0202      	lsls	r2, r0, #8
 800630c:	6879      	ldr	r1, [r7, #4]
 800630e:	6849      	ldr	r1, [r1, #4]
 8006310:	0849      	lsrs	r1, r1, #1
 8006312:	4608      	mov	r0, r1
 8006314:	f04f 0100 	mov.w	r1, #0
 8006318:	1814      	adds	r4, r2, r0
 800631a:	eb43 0501 	adc.w	r5, r3, r1
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	461a      	mov	r2, r3
 8006324:	f04f 0300 	mov.w	r3, #0
 8006328:	4620      	mov	r0, r4
 800632a:	4629      	mov	r1, r5
 800632c:	f7f9 ffb8 	bl	80002a0 <__aeabi_uldivmod>
 8006330:	4602      	mov	r2, r0
 8006332:	460b      	mov	r3, r1
 8006334:	4613      	mov	r3, r2
 8006336:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800633e:	d308      	bcc.n	8006352 <UART_SetConfig+0x3de>
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006346:	d204      	bcs.n	8006352 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	60da      	str	r2, [r3, #12]
 8006350:	e0c2      	b.n	80064d8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	76bb      	strb	r3, [r7, #26]
 8006356:	e0bf      	b.n	80064d8 <UART_SetConfig+0x564>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	69db      	ldr	r3, [r3, #28]
 800635c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006360:	d165      	bne.n	800642e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8006362:	7efb      	ldrb	r3, [r7, #27]
 8006364:	2b08      	cmp	r3, #8
 8006366:	d828      	bhi.n	80063ba <UART_SetConfig+0x446>
 8006368:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <UART_SetConfig+0x3fc>)
 800636a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636e:	bf00      	nop
 8006370:	08006395 	.word	0x08006395
 8006374:	0800639d 	.word	0x0800639d
 8006378:	080063a5 	.word	0x080063a5
 800637c:	080063bb 	.word	0x080063bb
 8006380:	080063ab 	.word	0x080063ab
 8006384:	080063bb 	.word	0x080063bb
 8006388:	080063bb 	.word	0x080063bb
 800638c:	080063bb 	.word	0x080063bb
 8006390:	080063b3 	.word	0x080063b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006394:	f7fd ffd4 	bl	8004340 <HAL_RCC_GetPCLK1Freq>
 8006398:	6178      	str	r0, [r7, #20]
        break;
 800639a:	e013      	b.n	80063c4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800639c:	f7fd ffe6 	bl	800436c <HAL_RCC_GetPCLK2Freq>
 80063a0:	6178      	str	r0, [r7, #20]
        break;
 80063a2:	e00f      	b.n	80063c4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063a4:	4b57      	ldr	r3, [pc, #348]	; (8006504 <UART_SetConfig+0x590>)
 80063a6:	617b      	str	r3, [r7, #20]
        break;
 80063a8:	e00c      	b.n	80063c4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063aa:	f7fd ff31 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 80063ae:	6178      	str	r0, [r7, #20]
        break;
 80063b0:	e008      	b.n	80063c4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063b6:	617b      	str	r3, [r7, #20]
        break;
 80063b8:	e004      	b.n	80063c4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	76bb      	strb	r3, [r7, #26]
        break;
 80063c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f000 8086 	beq.w	80064d8 <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	4a4b      	ldr	r2, [pc, #300]	; (8006500 <UART_SetConfig+0x58c>)
 80063d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063d6:	461a      	mov	r2, r3
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	fbb3 f3f2 	udiv	r3, r3, r2
 80063de:	005a      	lsls	r2, r3, #1
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	085b      	lsrs	r3, r3, #1
 80063e6:	441a      	add	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	2b0f      	cmp	r3, #15
 80063f8:	d916      	bls.n	8006428 <UART_SetConfig+0x4b4>
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006400:	d212      	bcs.n	8006428 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	b29b      	uxth	r3, r3
 8006406:	f023 030f 	bic.w	r3, r3, #15
 800640a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	085b      	lsrs	r3, r3, #1
 8006410:	b29b      	uxth	r3, r3
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	b29a      	uxth	r2, r3
 8006418:	89fb      	ldrh	r3, [r7, #14]
 800641a:	4313      	orrs	r3, r2
 800641c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	89fa      	ldrh	r2, [r7, #14]
 8006424:	60da      	str	r2, [r3, #12]
 8006426:	e057      	b.n	80064d8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	76bb      	strb	r3, [r7, #26]
 800642c:	e054      	b.n	80064d8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800642e:	7efb      	ldrb	r3, [r7, #27]
 8006430:	2b08      	cmp	r3, #8
 8006432:	d828      	bhi.n	8006486 <UART_SetConfig+0x512>
 8006434:	a201      	add	r2, pc, #4	; (adr r2, 800643c <UART_SetConfig+0x4c8>)
 8006436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643a:	bf00      	nop
 800643c:	08006461 	.word	0x08006461
 8006440:	08006469 	.word	0x08006469
 8006444:	08006471 	.word	0x08006471
 8006448:	08006487 	.word	0x08006487
 800644c:	08006477 	.word	0x08006477
 8006450:	08006487 	.word	0x08006487
 8006454:	08006487 	.word	0x08006487
 8006458:	08006487 	.word	0x08006487
 800645c:	0800647f 	.word	0x0800647f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006460:	f7fd ff6e 	bl	8004340 <HAL_RCC_GetPCLK1Freq>
 8006464:	6178      	str	r0, [r7, #20]
        break;
 8006466:	e013      	b.n	8006490 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006468:	f7fd ff80 	bl	800436c <HAL_RCC_GetPCLK2Freq>
 800646c:	6178      	str	r0, [r7, #20]
        break;
 800646e:	e00f      	b.n	8006490 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006470:	4b24      	ldr	r3, [pc, #144]	; (8006504 <UART_SetConfig+0x590>)
 8006472:	617b      	str	r3, [r7, #20]
        break;
 8006474:	e00c      	b.n	8006490 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006476:	f7fd fecb 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 800647a:	6178      	str	r0, [r7, #20]
        break;
 800647c:	e008      	b.n	8006490 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800647e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006482:	617b      	str	r3, [r7, #20]
        break;
 8006484:	e004      	b.n	8006490 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	76bb      	strb	r3, [r7, #26]
        break;
 800648e:	bf00      	nop
    }

    if (pclk != 0U)
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d020      	beq.n	80064d8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	4a19      	ldr	r2, [pc, #100]	; (8006500 <UART_SetConfig+0x58c>)
 800649c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064a0:	461a      	mov	r2, r3
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	fbb3 f2f2 	udiv	r2, r3, r2
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	085b      	lsrs	r3, r3, #1
 80064ae:	441a      	add	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	2b0f      	cmp	r3, #15
 80064c0:	d908      	bls.n	80064d4 <UART_SetConfig+0x560>
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c8:	d204      	bcs.n	80064d4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	60da      	str	r2, [r3, #12]
 80064d2:	e001      	b.n	80064d8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80064f4:	7ebb      	ldrb	r3, [r7, #26]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3720      	adds	r7, #32
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bdb0      	pop	{r4, r5, r7, pc}
 80064fe:	bf00      	nop
 8006500:	08007648 	.word	0x08007648
 8006504:	00f42400 	.word	0x00f42400

08006508 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00a      	beq.n	8006532 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	430a      	orrs	r2, r1
 8006530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00a      	beq.n	8006554 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	430a      	orrs	r2, r1
 8006552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006558:	f003 0304 	and.w	r3, r3, #4
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00a      	beq.n	8006576 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657a:	f003 0308 	and.w	r3, r3, #8
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00a      	beq.n	8006598 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659c:	f003 0310 	and.w	r3, r3, #16
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00a      	beq.n	80065ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065be:	f003 0320 	and.w	r3, r3, #32
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00a      	beq.n	80065dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d01a      	beq.n	800661e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006606:	d10a      	bne.n	800661e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	605a      	str	r2, [r3, #4]
  }
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af02      	add	r7, sp, #8
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800665c:	f7fa fdb4 	bl	80011c8 <HAL_GetTick>
 8006660:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0308 	and.w	r3, r3, #8
 800666c:	2b08      	cmp	r3, #8
 800666e:	d10e      	bne.n	800668e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006670:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f82f 	bl	80066e2 <UART_WaitOnFlagUntilTimeout>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e025      	b.n	80066da <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	2b04      	cmp	r3, #4
 800669a:	d10e      	bne.n	80066ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800669c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f819 	bl	80066e2 <UART_WaitOnFlagUntilTimeout>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e00f      	b.n	80066da <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2220      	movs	r2, #32
 80066be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2220      	movs	r2, #32
 80066c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b084      	sub	sp, #16
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	60f8      	str	r0, [r7, #12]
 80066ea:	60b9      	str	r1, [r7, #8]
 80066ec:	603b      	str	r3, [r7, #0]
 80066ee:	4613      	mov	r3, r2
 80066f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066f2:	e062      	b.n	80067ba <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fa:	d05e      	beq.n	80067ba <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066fc:	f7fa fd64 	bl	80011c8 <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	429a      	cmp	r2, r3
 800670a:	d302      	bcc.n	8006712 <UART_WaitOnFlagUntilTimeout+0x30>
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d11d      	bne.n	800674e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006720:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689a      	ldr	r2, [r3, #8]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f022 0201 	bic.w	r2, r2, #1
 8006730:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2220      	movs	r2, #32
 8006736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2220      	movs	r2, #32
 800673e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e045      	b.n	80067da <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0304 	and.w	r3, r3, #4
 8006758:	2b00      	cmp	r3, #0
 800675a:	d02e      	beq.n	80067ba <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	69db      	ldr	r3, [r3, #28]
 8006762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800676a:	d126      	bne.n	80067ba <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006774:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006784:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 0201 	bic.w	r2, r2, #1
 8006794:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2220      	movs	r2, #32
 800679a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2220      	movs	r2, #32
 80067a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2220      	movs	r2, #32
 80067aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e00f      	b.n	80067da <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69da      	ldr	r2, [r3, #28]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	4013      	ands	r3, r2
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	bf0c      	ite	eq
 80067ca:	2301      	moveq	r3, #1
 80067cc:	2300      	movne	r3, #0
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	461a      	mov	r2, r3
 80067d2:	79fb      	ldrb	r3, [r7, #7]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d08d      	beq.n	80066f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80067f8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	6812      	ldr	r2, [r2, #0]
 8006804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006808:	f023 0301 	bic.w	r3, r3, #1
 800680c:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006812:	2b01      	cmp	r3, #1
 8006814:	d107      	bne.n	8006826 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 0210 	bic.w	r2, r2, #16
 8006824:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2220      	movs	r2, #32
 800682a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	671a      	str	r2, [r3, #112]	; 0x70
}
 800683a:	bf00      	nop
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b084      	sub	sp, #16
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006852:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f7ff fb6f 	bl	8005f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800686a:	bf00      	nop
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006880:	2b21      	cmp	r3, #33	; 0x21
 8006882:	d12a      	bne.n	80068da <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800688a:	b29b      	uxth	r3, r3
 800688c:	2b00      	cmp	r3, #0
 800688e:	d110      	bne.n	80068b2 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800689e:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068ae:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80068b0:	e013      	b.n	80068da <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b6:	781a      	ldrb	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	3b01      	subs	r3, #1
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80068da:	bf00      	nop
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b085      	sub	sp, #20
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068f4:	2b21      	cmp	r3, #33	; 0x21
 80068f6:	d12f      	bne.n	8006958 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80068fe:	b29b      	uxth	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	d110      	bne.n	8006926 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006912:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006922:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006924:	e018      	b.n	8006958 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800692a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	881b      	ldrh	r3, [r3, #0]
 8006930:	461a      	mov	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800693a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006940:	1c9a      	adds	r2, r3, #2
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800694c:	b29b      	uxth	r3, r3
 800694e:	3b01      	subs	r3, #1
 8006950:	b29a      	uxth	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8006958:	bf00      	nop
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006972:	2b21      	cmp	r3, #33	; 0x21
 8006974:	d13d      	bne.n	80069f2 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800697c:	81fb      	strh	r3, [r7, #14]
 800697e:	e035      	b.n	80069ec <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006986:	b29b      	uxth	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d111      	bne.n	80069b0 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689a      	ldr	r2, [r3, #8]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800699a:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069aa:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 80069ac:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 80069ae:	e020      	b.n	80069f2 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d013      	beq.n	80069e6 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069c2:	781a      	ldrb	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80069da:	b29b      	uxth	r3, r3
 80069dc:	3b01      	subs	r3, #1
 80069de:	b29a      	uxth	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80069e6:	89fb      	ldrh	r3, [r7, #14]
 80069e8:	3b01      	subs	r3, #1
 80069ea:	81fb      	strh	r3, [r7, #14]
 80069ec:	89fb      	ldrh	r3, [r7, #14]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1c6      	bne.n	8006980 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 80069f2:	bf00      	nop
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b085      	sub	sp, #20
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a0c:	2b21      	cmp	r3, #33	; 0x21
 8006a0e:	d142      	bne.n	8006a96 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006a16:	81fb      	strh	r3, [r7, #14]
 8006a18:	e03a      	b.n	8006a90 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d111      	bne.n	8006a4a <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689a      	ldr	r2, [r3, #8]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006a34:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a44:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8006a46:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8006a48:	e025      	b.n	8006a96 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	69db      	ldr	r3, [r3, #28]
 8006a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d018      	beq.n	8006a8a <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a5c:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	461a      	mov	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a6c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a72:	1c9a      	adds	r2, r3, #2
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	3b01      	subs	r3, #1
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006a8a:	89fb      	ldrh	r3, [r7, #14]
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	81fb      	strh	r3, [r7, #14]
 8006a90:	89fb      	ldrh	r3, [r7, #14]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1c1      	bne.n	8006a1a <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8006a96:	bf00      	nop
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b082      	sub	sp, #8
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ab8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2220      	movs	r2, #32
 8006abe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f7ff fa33 	bl	8005f34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ace:	bf00      	nop
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b083      	sub	sp, #12
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ade:	bf00      	nop
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006af2:	bf00      	nop
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b083      	sub	sp, #12
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006b06:	bf00      	nop
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b085      	sub	sp, #20
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d101      	bne.n	8006b28 <HAL_UARTEx_DisableFifoMode+0x16>
 8006b24:	2302      	movs	r3, #2
 8006b26:	e027      	b.n	8006b78 <HAL_UARTEx_DisableFifoMode+0x66>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2224      	movs	r2, #36	; 0x24
 8006b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f022 0201 	bic.w	r2, r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006b56:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d101      	bne.n	8006b9c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006b98:	2302      	movs	r3, #2
 8006b9a:	e02d      	b.n	8006bf8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2224      	movs	r2, #36	; 0x24
 8006ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f022 0201 	bic.w	r2, r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f84f 	bl	8006c7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2220      	movs	r2, #32
 8006bea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d101      	bne.n	8006c18 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c14:	2302      	movs	r3, #2
 8006c16:	e02d      	b.n	8006c74 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2224      	movs	r2, #36	; 0x24
 8006c24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f022 0201 	bic.w	r2, r2, #1
 8006c3e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f811 	bl	8006c7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d108      	bne.n	8006c9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006c9c:	e031      	b.n	8006d02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006c9e:	2308      	movs	r3, #8
 8006ca0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ca2:	2308      	movs	r3, #8
 8006ca4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	0e5b      	lsrs	r3, r3, #25
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	f003 0307 	and.w	r3, r3, #7
 8006cb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	0f5b      	lsrs	r3, r3, #29
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	f003 0307 	and.w	r3, r3, #7
 8006cc4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cc6:	7bbb      	ldrb	r3, [r7, #14]
 8006cc8:	7b3a      	ldrb	r2, [r7, #12]
 8006cca:	4911      	ldr	r1, [pc, #68]	; (8006d10 <UARTEx_SetNbDataToProcess+0x94>)
 8006ccc:	5c8a      	ldrb	r2, [r1, r2]
 8006cce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006cd2:	7b3a      	ldrb	r2, [r7, #12]
 8006cd4:	490f      	ldr	r1, [pc, #60]	; (8006d14 <UARTEx_SetNbDataToProcess+0x98>)
 8006cd6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
 8006ce6:	7b7a      	ldrb	r2, [r7, #13]
 8006ce8:	4909      	ldr	r1, [pc, #36]	; (8006d10 <UARTEx_SetNbDataToProcess+0x94>)
 8006cea:	5c8a      	ldrb	r2, [r1, r2]
 8006cec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006cf0:	7b7a      	ldrb	r2, [r7, #13]
 8006cf2:	4908      	ldr	r1, [pc, #32]	; (8006d14 <UARTEx_SetNbDataToProcess+0x98>)
 8006cf4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cf6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006d02:	bf00      	nop
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	08007660 	.word	0x08007660
 8006d14:	08007668 	.word	0x08007668

08006d18 <__errno>:
 8006d18:	4b01      	ldr	r3, [pc, #4]	; (8006d20 <__errno+0x8>)
 8006d1a:	6818      	ldr	r0, [r3, #0]
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	2000000c 	.word	0x2000000c

08006d24 <__libc_init_array>:
 8006d24:	b570      	push	{r4, r5, r6, lr}
 8006d26:	4d0d      	ldr	r5, [pc, #52]	; (8006d5c <__libc_init_array+0x38>)
 8006d28:	4c0d      	ldr	r4, [pc, #52]	; (8006d60 <__libc_init_array+0x3c>)
 8006d2a:	1b64      	subs	r4, r4, r5
 8006d2c:	10a4      	asrs	r4, r4, #2
 8006d2e:	2600      	movs	r6, #0
 8006d30:	42a6      	cmp	r6, r4
 8006d32:	d109      	bne.n	8006d48 <__libc_init_array+0x24>
 8006d34:	4d0b      	ldr	r5, [pc, #44]	; (8006d64 <__libc_init_array+0x40>)
 8006d36:	4c0c      	ldr	r4, [pc, #48]	; (8006d68 <__libc_init_array+0x44>)
 8006d38:	f000 fc4e 	bl	80075d8 <_init>
 8006d3c:	1b64      	subs	r4, r4, r5
 8006d3e:	10a4      	asrs	r4, r4, #2
 8006d40:	2600      	movs	r6, #0
 8006d42:	42a6      	cmp	r6, r4
 8006d44:	d105      	bne.n	8006d52 <__libc_init_array+0x2e>
 8006d46:	bd70      	pop	{r4, r5, r6, pc}
 8006d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d4c:	4798      	blx	r3
 8006d4e:	3601      	adds	r6, #1
 8006d50:	e7ee      	b.n	8006d30 <__libc_init_array+0xc>
 8006d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d56:	4798      	blx	r3
 8006d58:	3601      	adds	r6, #1
 8006d5a:	e7f2      	b.n	8006d42 <__libc_init_array+0x1e>
 8006d5c:	080076ac 	.word	0x080076ac
 8006d60:	080076ac 	.word	0x080076ac
 8006d64:	080076ac 	.word	0x080076ac
 8006d68:	080076b0 	.word	0x080076b0

08006d6c <memset>:
 8006d6c:	4402      	add	r2, r0
 8006d6e:	4603      	mov	r3, r0
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d100      	bne.n	8006d76 <memset+0xa>
 8006d74:	4770      	bx	lr
 8006d76:	f803 1b01 	strb.w	r1, [r3], #1
 8006d7a:	e7f9      	b.n	8006d70 <memset+0x4>

08006d7c <siprintf>:
 8006d7c:	b40e      	push	{r1, r2, r3}
 8006d7e:	b500      	push	{lr}
 8006d80:	b09c      	sub	sp, #112	; 0x70
 8006d82:	ab1d      	add	r3, sp, #116	; 0x74
 8006d84:	9002      	str	r0, [sp, #8]
 8006d86:	9006      	str	r0, [sp, #24]
 8006d88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d8c:	4809      	ldr	r0, [pc, #36]	; (8006db4 <siprintf+0x38>)
 8006d8e:	9107      	str	r1, [sp, #28]
 8006d90:	9104      	str	r1, [sp, #16]
 8006d92:	4909      	ldr	r1, [pc, #36]	; (8006db8 <siprintf+0x3c>)
 8006d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d98:	9105      	str	r1, [sp, #20]
 8006d9a:	6800      	ldr	r0, [r0, #0]
 8006d9c:	9301      	str	r3, [sp, #4]
 8006d9e:	a902      	add	r1, sp, #8
 8006da0:	f000 f868 	bl	8006e74 <_svfiprintf_r>
 8006da4:	9b02      	ldr	r3, [sp, #8]
 8006da6:	2200      	movs	r2, #0
 8006da8:	701a      	strb	r2, [r3, #0]
 8006daa:	b01c      	add	sp, #112	; 0x70
 8006dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8006db0:	b003      	add	sp, #12
 8006db2:	4770      	bx	lr
 8006db4:	2000000c 	.word	0x2000000c
 8006db8:	ffff0208 	.word	0xffff0208

08006dbc <__ssputs_r>:
 8006dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc0:	688e      	ldr	r6, [r1, #8]
 8006dc2:	429e      	cmp	r6, r3
 8006dc4:	4682      	mov	sl, r0
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	4690      	mov	r8, r2
 8006dca:	461f      	mov	r7, r3
 8006dcc:	d838      	bhi.n	8006e40 <__ssputs_r+0x84>
 8006dce:	898a      	ldrh	r2, [r1, #12]
 8006dd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006dd4:	d032      	beq.n	8006e3c <__ssputs_r+0x80>
 8006dd6:	6825      	ldr	r5, [r4, #0]
 8006dd8:	6909      	ldr	r1, [r1, #16]
 8006dda:	eba5 0901 	sub.w	r9, r5, r1
 8006dde:	6965      	ldr	r5, [r4, #20]
 8006de0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006de4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006de8:	3301      	adds	r3, #1
 8006dea:	444b      	add	r3, r9
 8006dec:	106d      	asrs	r5, r5, #1
 8006dee:	429d      	cmp	r5, r3
 8006df0:	bf38      	it	cc
 8006df2:	461d      	movcc	r5, r3
 8006df4:	0553      	lsls	r3, r2, #21
 8006df6:	d531      	bpl.n	8006e5c <__ssputs_r+0xa0>
 8006df8:	4629      	mov	r1, r5
 8006dfa:	f000 fb47 	bl	800748c <_malloc_r>
 8006dfe:	4606      	mov	r6, r0
 8006e00:	b950      	cbnz	r0, 8006e18 <__ssputs_r+0x5c>
 8006e02:	230c      	movs	r3, #12
 8006e04:	f8ca 3000 	str.w	r3, [sl]
 8006e08:	89a3      	ldrh	r3, [r4, #12]
 8006e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e0e:	81a3      	strh	r3, [r4, #12]
 8006e10:	f04f 30ff 	mov.w	r0, #4294967295
 8006e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e18:	6921      	ldr	r1, [r4, #16]
 8006e1a:	464a      	mov	r2, r9
 8006e1c:	f000 fabe 	bl	800739c <memcpy>
 8006e20:	89a3      	ldrh	r3, [r4, #12]
 8006e22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e2a:	81a3      	strh	r3, [r4, #12]
 8006e2c:	6126      	str	r6, [r4, #16]
 8006e2e:	6165      	str	r5, [r4, #20]
 8006e30:	444e      	add	r6, r9
 8006e32:	eba5 0509 	sub.w	r5, r5, r9
 8006e36:	6026      	str	r6, [r4, #0]
 8006e38:	60a5      	str	r5, [r4, #8]
 8006e3a:	463e      	mov	r6, r7
 8006e3c:	42be      	cmp	r6, r7
 8006e3e:	d900      	bls.n	8006e42 <__ssputs_r+0x86>
 8006e40:	463e      	mov	r6, r7
 8006e42:	4632      	mov	r2, r6
 8006e44:	6820      	ldr	r0, [r4, #0]
 8006e46:	4641      	mov	r1, r8
 8006e48:	f000 fab6 	bl	80073b8 <memmove>
 8006e4c:	68a3      	ldr	r3, [r4, #8]
 8006e4e:	6822      	ldr	r2, [r4, #0]
 8006e50:	1b9b      	subs	r3, r3, r6
 8006e52:	4432      	add	r2, r6
 8006e54:	60a3      	str	r3, [r4, #8]
 8006e56:	6022      	str	r2, [r4, #0]
 8006e58:	2000      	movs	r0, #0
 8006e5a:	e7db      	b.n	8006e14 <__ssputs_r+0x58>
 8006e5c:	462a      	mov	r2, r5
 8006e5e:	f000 fb6f 	bl	8007540 <_realloc_r>
 8006e62:	4606      	mov	r6, r0
 8006e64:	2800      	cmp	r0, #0
 8006e66:	d1e1      	bne.n	8006e2c <__ssputs_r+0x70>
 8006e68:	6921      	ldr	r1, [r4, #16]
 8006e6a:	4650      	mov	r0, sl
 8006e6c:	f000 fabe 	bl	80073ec <_free_r>
 8006e70:	e7c7      	b.n	8006e02 <__ssputs_r+0x46>
	...

08006e74 <_svfiprintf_r>:
 8006e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e78:	4698      	mov	r8, r3
 8006e7a:	898b      	ldrh	r3, [r1, #12]
 8006e7c:	061b      	lsls	r3, r3, #24
 8006e7e:	b09d      	sub	sp, #116	; 0x74
 8006e80:	4607      	mov	r7, r0
 8006e82:	460d      	mov	r5, r1
 8006e84:	4614      	mov	r4, r2
 8006e86:	d50e      	bpl.n	8006ea6 <_svfiprintf_r+0x32>
 8006e88:	690b      	ldr	r3, [r1, #16]
 8006e8a:	b963      	cbnz	r3, 8006ea6 <_svfiprintf_r+0x32>
 8006e8c:	2140      	movs	r1, #64	; 0x40
 8006e8e:	f000 fafd 	bl	800748c <_malloc_r>
 8006e92:	6028      	str	r0, [r5, #0]
 8006e94:	6128      	str	r0, [r5, #16]
 8006e96:	b920      	cbnz	r0, 8006ea2 <_svfiprintf_r+0x2e>
 8006e98:	230c      	movs	r3, #12
 8006e9a:	603b      	str	r3, [r7, #0]
 8006e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea0:	e0d1      	b.n	8007046 <_svfiprintf_r+0x1d2>
 8006ea2:	2340      	movs	r3, #64	; 0x40
 8006ea4:	616b      	str	r3, [r5, #20]
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8006eaa:	2320      	movs	r3, #32
 8006eac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006eb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006eb4:	2330      	movs	r3, #48	; 0x30
 8006eb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007060 <_svfiprintf_r+0x1ec>
 8006eba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ebe:	f04f 0901 	mov.w	r9, #1
 8006ec2:	4623      	mov	r3, r4
 8006ec4:	469a      	mov	sl, r3
 8006ec6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006eca:	b10a      	cbz	r2, 8006ed0 <_svfiprintf_r+0x5c>
 8006ecc:	2a25      	cmp	r2, #37	; 0x25
 8006ece:	d1f9      	bne.n	8006ec4 <_svfiprintf_r+0x50>
 8006ed0:	ebba 0b04 	subs.w	fp, sl, r4
 8006ed4:	d00b      	beq.n	8006eee <_svfiprintf_r+0x7a>
 8006ed6:	465b      	mov	r3, fp
 8006ed8:	4622      	mov	r2, r4
 8006eda:	4629      	mov	r1, r5
 8006edc:	4638      	mov	r0, r7
 8006ede:	f7ff ff6d 	bl	8006dbc <__ssputs_r>
 8006ee2:	3001      	adds	r0, #1
 8006ee4:	f000 80aa 	beq.w	800703c <_svfiprintf_r+0x1c8>
 8006ee8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eea:	445a      	add	r2, fp
 8006eec:	9209      	str	r2, [sp, #36]	; 0x24
 8006eee:	f89a 3000 	ldrb.w	r3, [sl]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f000 80a2 	beq.w	800703c <_svfiprintf_r+0x1c8>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	f04f 32ff 	mov.w	r2, #4294967295
 8006efe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f02:	f10a 0a01 	add.w	sl, sl, #1
 8006f06:	9304      	str	r3, [sp, #16]
 8006f08:	9307      	str	r3, [sp, #28]
 8006f0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f0e:	931a      	str	r3, [sp, #104]	; 0x68
 8006f10:	4654      	mov	r4, sl
 8006f12:	2205      	movs	r2, #5
 8006f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f18:	4851      	ldr	r0, [pc, #324]	; (8007060 <_svfiprintf_r+0x1ec>)
 8006f1a:	f7f9 f971 	bl	8000200 <memchr>
 8006f1e:	9a04      	ldr	r2, [sp, #16]
 8006f20:	b9d8      	cbnz	r0, 8006f5a <_svfiprintf_r+0xe6>
 8006f22:	06d0      	lsls	r0, r2, #27
 8006f24:	bf44      	itt	mi
 8006f26:	2320      	movmi	r3, #32
 8006f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f2c:	0711      	lsls	r1, r2, #28
 8006f2e:	bf44      	itt	mi
 8006f30:	232b      	movmi	r3, #43	; 0x2b
 8006f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f36:	f89a 3000 	ldrb.w	r3, [sl]
 8006f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8006f3c:	d015      	beq.n	8006f6a <_svfiprintf_r+0xf6>
 8006f3e:	9a07      	ldr	r2, [sp, #28]
 8006f40:	4654      	mov	r4, sl
 8006f42:	2000      	movs	r0, #0
 8006f44:	f04f 0c0a 	mov.w	ip, #10
 8006f48:	4621      	mov	r1, r4
 8006f4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f4e:	3b30      	subs	r3, #48	; 0x30
 8006f50:	2b09      	cmp	r3, #9
 8006f52:	d94e      	bls.n	8006ff2 <_svfiprintf_r+0x17e>
 8006f54:	b1b0      	cbz	r0, 8006f84 <_svfiprintf_r+0x110>
 8006f56:	9207      	str	r2, [sp, #28]
 8006f58:	e014      	b.n	8006f84 <_svfiprintf_r+0x110>
 8006f5a:	eba0 0308 	sub.w	r3, r0, r8
 8006f5e:	fa09 f303 	lsl.w	r3, r9, r3
 8006f62:	4313      	orrs	r3, r2
 8006f64:	9304      	str	r3, [sp, #16]
 8006f66:	46a2      	mov	sl, r4
 8006f68:	e7d2      	b.n	8006f10 <_svfiprintf_r+0x9c>
 8006f6a:	9b03      	ldr	r3, [sp, #12]
 8006f6c:	1d19      	adds	r1, r3, #4
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	9103      	str	r1, [sp, #12]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	bfbb      	ittet	lt
 8006f76:	425b      	neglt	r3, r3
 8006f78:	f042 0202 	orrlt.w	r2, r2, #2
 8006f7c:	9307      	strge	r3, [sp, #28]
 8006f7e:	9307      	strlt	r3, [sp, #28]
 8006f80:	bfb8      	it	lt
 8006f82:	9204      	strlt	r2, [sp, #16]
 8006f84:	7823      	ldrb	r3, [r4, #0]
 8006f86:	2b2e      	cmp	r3, #46	; 0x2e
 8006f88:	d10c      	bne.n	8006fa4 <_svfiprintf_r+0x130>
 8006f8a:	7863      	ldrb	r3, [r4, #1]
 8006f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8006f8e:	d135      	bne.n	8006ffc <_svfiprintf_r+0x188>
 8006f90:	9b03      	ldr	r3, [sp, #12]
 8006f92:	1d1a      	adds	r2, r3, #4
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	9203      	str	r2, [sp, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	bfb8      	it	lt
 8006f9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fa0:	3402      	adds	r4, #2
 8006fa2:	9305      	str	r3, [sp, #20]
 8006fa4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007070 <_svfiprintf_r+0x1fc>
 8006fa8:	7821      	ldrb	r1, [r4, #0]
 8006faa:	2203      	movs	r2, #3
 8006fac:	4650      	mov	r0, sl
 8006fae:	f7f9 f927 	bl	8000200 <memchr>
 8006fb2:	b140      	cbz	r0, 8006fc6 <_svfiprintf_r+0x152>
 8006fb4:	2340      	movs	r3, #64	; 0x40
 8006fb6:	eba0 000a 	sub.w	r0, r0, sl
 8006fba:	fa03 f000 	lsl.w	r0, r3, r0
 8006fbe:	9b04      	ldr	r3, [sp, #16]
 8006fc0:	4303      	orrs	r3, r0
 8006fc2:	3401      	adds	r4, #1
 8006fc4:	9304      	str	r3, [sp, #16]
 8006fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fca:	4826      	ldr	r0, [pc, #152]	; (8007064 <_svfiprintf_r+0x1f0>)
 8006fcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fd0:	2206      	movs	r2, #6
 8006fd2:	f7f9 f915 	bl	8000200 <memchr>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	d038      	beq.n	800704c <_svfiprintf_r+0x1d8>
 8006fda:	4b23      	ldr	r3, [pc, #140]	; (8007068 <_svfiprintf_r+0x1f4>)
 8006fdc:	bb1b      	cbnz	r3, 8007026 <_svfiprintf_r+0x1b2>
 8006fde:	9b03      	ldr	r3, [sp, #12]
 8006fe0:	3307      	adds	r3, #7
 8006fe2:	f023 0307 	bic.w	r3, r3, #7
 8006fe6:	3308      	adds	r3, #8
 8006fe8:	9303      	str	r3, [sp, #12]
 8006fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fec:	4433      	add	r3, r6
 8006fee:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff0:	e767      	b.n	8006ec2 <_svfiprintf_r+0x4e>
 8006ff2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	2001      	movs	r0, #1
 8006ffa:	e7a5      	b.n	8006f48 <_svfiprintf_r+0xd4>
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	3401      	adds	r4, #1
 8007000:	9305      	str	r3, [sp, #20]
 8007002:	4619      	mov	r1, r3
 8007004:	f04f 0c0a 	mov.w	ip, #10
 8007008:	4620      	mov	r0, r4
 800700a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800700e:	3a30      	subs	r2, #48	; 0x30
 8007010:	2a09      	cmp	r2, #9
 8007012:	d903      	bls.n	800701c <_svfiprintf_r+0x1a8>
 8007014:	2b00      	cmp	r3, #0
 8007016:	d0c5      	beq.n	8006fa4 <_svfiprintf_r+0x130>
 8007018:	9105      	str	r1, [sp, #20]
 800701a:	e7c3      	b.n	8006fa4 <_svfiprintf_r+0x130>
 800701c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007020:	4604      	mov	r4, r0
 8007022:	2301      	movs	r3, #1
 8007024:	e7f0      	b.n	8007008 <_svfiprintf_r+0x194>
 8007026:	ab03      	add	r3, sp, #12
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	462a      	mov	r2, r5
 800702c:	4b0f      	ldr	r3, [pc, #60]	; (800706c <_svfiprintf_r+0x1f8>)
 800702e:	a904      	add	r1, sp, #16
 8007030:	4638      	mov	r0, r7
 8007032:	f3af 8000 	nop.w
 8007036:	1c42      	adds	r2, r0, #1
 8007038:	4606      	mov	r6, r0
 800703a:	d1d6      	bne.n	8006fea <_svfiprintf_r+0x176>
 800703c:	89ab      	ldrh	r3, [r5, #12]
 800703e:	065b      	lsls	r3, r3, #25
 8007040:	f53f af2c 	bmi.w	8006e9c <_svfiprintf_r+0x28>
 8007044:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007046:	b01d      	add	sp, #116	; 0x74
 8007048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800704c:	ab03      	add	r3, sp, #12
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	462a      	mov	r2, r5
 8007052:	4b06      	ldr	r3, [pc, #24]	; (800706c <_svfiprintf_r+0x1f8>)
 8007054:	a904      	add	r1, sp, #16
 8007056:	4638      	mov	r0, r7
 8007058:	f000 f87a 	bl	8007150 <_printf_i>
 800705c:	e7eb      	b.n	8007036 <_svfiprintf_r+0x1c2>
 800705e:	bf00      	nop
 8007060:	08007670 	.word	0x08007670
 8007064:	0800767a 	.word	0x0800767a
 8007068:	00000000 	.word	0x00000000
 800706c:	08006dbd 	.word	0x08006dbd
 8007070:	08007676 	.word	0x08007676

08007074 <_printf_common>:
 8007074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007078:	4616      	mov	r6, r2
 800707a:	4699      	mov	r9, r3
 800707c:	688a      	ldr	r2, [r1, #8]
 800707e:	690b      	ldr	r3, [r1, #16]
 8007080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007084:	4293      	cmp	r3, r2
 8007086:	bfb8      	it	lt
 8007088:	4613      	movlt	r3, r2
 800708a:	6033      	str	r3, [r6, #0]
 800708c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007090:	4607      	mov	r7, r0
 8007092:	460c      	mov	r4, r1
 8007094:	b10a      	cbz	r2, 800709a <_printf_common+0x26>
 8007096:	3301      	adds	r3, #1
 8007098:	6033      	str	r3, [r6, #0]
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	0699      	lsls	r1, r3, #26
 800709e:	bf42      	ittt	mi
 80070a0:	6833      	ldrmi	r3, [r6, #0]
 80070a2:	3302      	addmi	r3, #2
 80070a4:	6033      	strmi	r3, [r6, #0]
 80070a6:	6825      	ldr	r5, [r4, #0]
 80070a8:	f015 0506 	ands.w	r5, r5, #6
 80070ac:	d106      	bne.n	80070bc <_printf_common+0x48>
 80070ae:	f104 0a19 	add.w	sl, r4, #25
 80070b2:	68e3      	ldr	r3, [r4, #12]
 80070b4:	6832      	ldr	r2, [r6, #0]
 80070b6:	1a9b      	subs	r3, r3, r2
 80070b8:	42ab      	cmp	r3, r5
 80070ba:	dc26      	bgt.n	800710a <_printf_common+0x96>
 80070bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070c0:	1e13      	subs	r3, r2, #0
 80070c2:	6822      	ldr	r2, [r4, #0]
 80070c4:	bf18      	it	ne
 80070c6:	2301      	movne	r3, #1
 80070c8:	0692      	lsls	r2, r2, #26
 80070ca:	d42b      	bmi.n	8007124 <_printf_common+0xb0>
 80070cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070d0:	4649      	mov	r1, r9
 80070d2:	4638      	mov	r0, r7
 80070d4:	47c0      	blx	r8
 80070d6:	3001      	adds	r0, #1
 80070d8:	d01e      	beq.n	8007118 <_printf_common+0xa4>
 80070da:	6823      	ldr	r3, [r4, #0]
 80070dc:	68e5      	ldr	r5, [r4, #12]
 80070de:	6832      	ldr	r2, [r6, #0]
 80070e0:	f003 0306 	and.w	r3, r3, #6
 80070e4:	2b04      	cmp	r3, #4
 80070e6:	bf08      	it	eq
 80070e8:	1aad      	subeq	r5, r5, r2
 80070ea:	68a3      	ldr	r3, [r4, #8]
 80070ec:	6922      	ldr	r2, [r4, #16]
 80070ee:	bf0c      	ite	eq
 80070f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070f4:	2500      	movne	r5, #0
 80070f6:	4293      	cmp	r3, r2
 80070f8:	bfc4      	itt	gt
 80070fa:	1a9b      	subgt	r3, r3, r2
 80070fc:	18ed      	addgt	r5, r5, r3
 80070fe:	2600      	movs	r6, #0
 8007100:	341a      	adds	r4, #26
 8007102:	42b5      	cmp	r5, r6
 8007104:	d11a      	bne.n	800713c <_printf_common+0xc8>
 8007106:	2000      	movs	r0, #0
 8007108:	e008      	b.n	800711c <_printf_common+0xa8>
 800710a:	2301      	movs	r3, #1
 800710c:	4652      	mov	r2, sl
 800710e:	4649      	mov	r1, r9
 8007110:	4638      	mov	r0, r7
 8007112:	47c0      	blx	r8
 8007114:	3001      	adds	r0, #1
 8007116:	d103      	bne.n	8007120 <_printf_common+0xac>
 8007118:	f04f 30ff 	mov.w	r0, #4294967295
 800711c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007120:	3501      	adds	r5, #1
 8007122:	e7c6      	b.n	80070b2 <_printf_common+0x3e>
 8007124:	18e1      	adds	r1, r4, r3
 8007126:	1c5a      	adds	r2, r3, #1
 8007128:	2030      	movs	r0, #48	; 0x30
 800712a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800712e:	4422      	add	r2, r4
 8007130:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007134:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007138:	3302      	adds	r3, #2
 800713a:	e7c7      	b.n	80070cc <_printf_common+0x58>
 800713c:	2301      	movs	r3, #1
 800713e:	4622      	mov	r2, r4
 8007140:	4649      	mov	r1, r9
 8007142:	4638      	mov	r0, r7
 8007144:	47c0      	blx	r8
 8007146:	3001      	adds	r0, #1
 8007148:	d0e6      	beq.n	8007118 <_printf_common+0xa4>
 800714a:	3601      	adds	r6, #1
 800714c:	e7d9      	b.n	8007102 <_printf_common+0x8e>
	...

08007150 <_printf_i>:
 8007150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007154:	460c      	mov	r4, r1
 8007156:	4691      	mov	r9, r2
 8007158:	7e27      	ldrb	r7, [r4, #24]
 800715a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800715c:	2f78      	cmp	r7, #120	; 0x78
 800715e:	4680      	mov	r8, r0
 8007160:	469a      	mov	sl, r3
 8007162:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007166:	d807      	bhi.n	8007178 <_printf_i+0x28>
 8007168:	2f62      	cmp	r7, #98	; 0x62
 800716a:	d80a      	bhi.n	8007182 <_printf_i+0x32>
 800716c:	2f00      	cmp	r7, #0
 800716e:	f000 80d8 	beq.w	8007322 <_printf_i+0x1d2>
 8007172:	2f58      	cmp	r7, #88	; 0x58
 8007174:	f000 80a3 	beq.w	80072be <_printf_i+0x16e>
 8007178:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800717c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007180:	e03a      	b.n	80071f8 <_printf_i+0xa8>
 8007182:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007186:	2b15      	cmp	r3, #21
 8007188:	d8f6      	bhi.n	8007178 <_printf_i+0x28>
 800718a:	a001      	add	r0, pc, #4	; (adr r0, 8007190 <_printf_i+0x40>)
 800718c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007190:	080071e9 	.word	0x080071e9
 8007194:	080071fd 	.word	0x080071fd
 8007198:	08007179 	.word	0x08007179
 800719c:	08007179 	.word	0x08007179
 80071a0:	08007179 	.word	0x08007179
 80071a4:	08007179 	.word	0x08007179
 80071a8:	080071fd 	.word	0x080071fd
 80071ac:	08007179 	.word	0x08007179
 80071b0:	08007179 	.word	0x08007179
 80071b4:	08007179 	.word	0x08007179
 80071b8:	08007179 	.word	0x08007179
 80071bc:	08007309 	.word	0x08007309
 80071c0:	0800722d 	.word	0x0800722d
 80071c4:	080072eb 	.word	0x080072eb
 80071c8:	08007179 	.word	0x08007179
 80071cc:	08007179 	.word	0x08007179
 80071d0:	0800732b 	.word	0x0800732b
 80071d4:	08007179 	.word	0x08007179
 80071d8:	0800722d 	.word	0x0800722d
 80071dc:	08007179 	.word	0x08007179
 80071e0:	08007179 	.word	0x08007179
 80071e4:	080072f3 	.word	0x080072f3
 80071e8:	680b      	ldr	r3, [r1, #0]
 80071ea:	1d1a      	adds	r2, r3, #4
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	600a      	str	r2, [r1, #0]
 80071f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80071f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071f8:	2301      	movs	r3, #1
 80071fa:	e0a3      	b.n	8007344 <_printf_i+0x1f4>
 80071fc:	6825      	ldr	r5, [r4, #0]
 80071fe:	6808      	ldr	r0, [r1, #0]
 8007200:	062e      	lsls	r6, r5, #24
 8007202:	f100 0304 	add.w	r3, r0, #4
 8007206:	d50a      	bpl.n	800721e <_printf_i+0xce>
 8007208:	6805      	ldr	r5, [r0, #0]
 800720a:	600b      	str	r3, [r1, #0]
 800720c:	2d00      	cmp	r5, #0
 800720e:	da03      	bge.n	8007218 <_printf_i+0xc8>
 8007210:	232d      	movs	r3, #45	; 0x2d
 8007212:	426d      	negs	r5, r5
 8007214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007218:	485e      	ldr	r0, [pc, #376]	; (8007394 <_printf_i+0x244>)
 800721a:	230a      	movs	r3, #10
 800721c:	e019      	b.n	8007252 <_printf_i+0x102>
 800721e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007222:	6805      	ldr	r5, [r0, #0]
 8007224:	600b      	str	r3, [r1, #0]
 8007226:	bf18      	it	ne
 8007228:	b22d      	sxthne	r5, r5
 800722a:	e7ef      	b.n	800720c <_printf_i+0xbc>
 800722c:	680b      	ldr	r3, [r1, #0]
 800722e:	6825      	ldr	r5, [r4, #0]
 8007230:	1d18      	adds	r0, r3, #4
 8007232:	6008      	str	r0, [r1, #0]
 8007234:	0628      	lsls	r0, r5, #24
 8007236:	d501      	bpl.n	800723c <_printf_i+0xec>
 8007238:	681d      	ldr	r5, [r3, #0]
 800723a:	e002      	b.n	8007242 <_printf_i+0xf2>
 800723c:	0669      	lsls	r1, r5, #25
 800723e:	d5fb      	bpl.n	8007238 <_printf_i+0xe8>
 8007240:	881d      	ldrh	r5, [r3, #0]
 8007242:	4854      	ldr	r0, [pc, #336]	; (8007394 <_printf_i+0x244>)
 8007244:	2f6f      	cmp	r7, #111	; 0x6f
 8007246:	bf0c      	ite	eq
 8007248:	2308      	moveq	r3, #8
 800724a:	230a      	movne	r3, #10
 800724c:	2100      	movs	r1, #0
 800724e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007252:	6866      	ldr	r6, [r4, #4]
 8007254:	60a6      	str	r6, [r4, #8]
 8007256:	2e00      	cmp	r6, #0
 8007258:	bfa2      	ittt	ge
 800725a:	6821      	ldrge	r1, [r4, #0]
 800725c:	f021 0104 	bicge.w	r1, r1, #4
 8007260:	6021      	strge	r1, [r4, #0]
 8007262:	b90d      	cbnz	r5, 8007268 <_printf_i+0x118>
 8007264:	2e00      	cmp	r6, #0
 8007266:	d04d      	beq.n	8007304 <_printf_i+0x1b4>
 8007268:	4616      	mov	r6, r2
 800726a:	fbb5 f1f3 	udiv	r1, r5, r3
 800726e:	fb03 5711 	mls	r7, r3, r1, r5
 8007272:	5dc7      	ldrb	r7, [r0, r7]
 8007274:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007278:	462f      	mov	r7, r5
 800727a:	42bb      	cmp	r3, r7
 800727c:	460d      	mov	r5, r1
 800727e:	d9f4      	bls.n	800726a <_printf_i+0x11a>
 8007280:	2b08      	cmp	r3, #8
 8007282:	d10b      	bne.n	800729c <_printf_i+0x14c>
 8007284:	6823      	ldr	r3, [r4, #0]
 8007286:	07df      	lsls	r7, r3, #31
 8007288:	d508      	bpl.n	800729c <_printf_i+0x14c>
 800728a:	6923      	ldr	r3, [r4, #16]
 800728c:	6861      	ldr	r1, [r4, #4]
 800728e:	4299      	cmp	r1, r3
 8007290:	bfde      	ittt	le
 8007292:	2330      	movle	r3, #48	; 0x30
 8007294:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007298:	f106 36ff 	addle.w	r6, r6, #4294967295
 800729c:	1b92      	subs	r2, r2, r6
 800729e:	6122      	str	r2, [r4, #16]
 80072a0:	f8cd a000 	str.w	sl, [sp]
 80072a4:	464b      	mov	r3, r9
 80072a6:	aa03      	add	r2, sp, #12
 80072a8:	4621      	mov	r1, r4
 80072aa:	4640      	mov	r0, r8
 80072ac:	f7ff fee2 	bl	8007074 <_printf_common>
 80072b0:	3001      	adds	r0, #1
 80072b2:	d14c      	bne.n	800734e <_printf_i+0x1fe>
 80072b4:	f04f 30ff 	mov.w	r0, #4294967295
 80072b8:	b004      	add	sp, #16
 80072ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072be:	4835      	ldr	r0, [pc, #212]	; (8007394 <_printf_i+0x244>)
 80072c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80072c4:	6823      	ldr	r3, [r4, #0]
 80072c6:	680e      	ldr	r6, [r1, #0]
 80072c8:	061f      	lsls	r7, r3, #24
 80072ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80072ce:	600e      	str	r6, [r1, #0]
 80072d0:	d514      	bpl.n	80072fc <_printf_i+0x1ac>
 80072d2:	07d9      	lsls	r1, r3, #31
 80072d4:	bf44      	itt	mi
 80072d6:	f043 0320 	orrmi.w	r3, r3, #32
 80072da:	6023      	strmi	r3, [r4, #0]
 80072dc:	b91d      	cbnz	r5, 80072e6 <_printf_i+0x196>
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	f023 0320 	bic.w	r3, r3, #32
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	2310      	movs	r3, #16
 80072e8:	e7b0      	b.n	800724c <_printf_i+0xfc>
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	f043 0320 	orr.w	r3, r3, #32
 80072f0:	6023      	str	r3, [r4, #0]
 80072f2:	2378      	movs	r3, #120	; 0x78
 80072f4:	4828      	ldr	r0, [pc, #160]	; (8007398 <_printf_i+0x248>)
 80072f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072fa:	e7e3      	b.n	80072c4 <_printf_i+0x174>
 80072fc:	065e      	lsls	r6, r3, #25
 80072fe:	bf48      	it	mi
 8007300:	b2ad      	uxthmi	r5, r5
 8007302:	e7e6      	b.n	80072d2 <_printf_i+0x182>
 8007304:	4616      	mov	r6, r2
 8007306:	e7bb      	b.n	8007280 <_printf_i+0x130>
 8007308:	680b      	ldr	r3, [r1, #0]
 800730a:	6826      	ldr	r6, [r4, #0]
 800730c:	6960      	ldr	r0, [r4, #20]
 800730e:	1d1d      	adds	r5, r3, #4
 8007310:	600d      	str	r5, [r1, #0]
 8007312:	0635      	lsls	r5, r6, #24
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	d501      	bpl.n	800731c <_printf_i+0x1cc>
 8007318:	6018      	str	r0, [r3, #0]
 800731a:	e002      	b.n	8007322 <_printf_i+0x1d2>
 800731c:	0671      	lsls	r1, r6, #25
 800731e:	d5fb      	bpl.n	8007318 <_printf_i+0x1c8>
 8007320:	8018      	strh	r0, [r3, #0]
 8007322:	2300      	movs	r3, #0
 8007324:	6123      	str	r3, [r4, #16]
 8007326:	4616      	mov	r6, r2
 8007328:	e7ba      	b.n	80072a0 <_printf_i+0x150>
 800732a:	680b      	ldr	r3, [r1, #0]
 800732c:	1d1a      	adds	r2, r3, #4
 800732e:	600a      	str	r2, [r1, #0]
 8007330:	681e      	ldr	r6, [r3, #0]
 8007332:	6862      	ldr	r2, [r4, #4]
 8007334:	2100      	movs	r1, #0
 8007336:	4630      	mov	r0, r6
 8007338:	f7f8 ff62 	bl	8000200 <memchr>
 800733c:	b108      	cbz	r0, 8007342 <_printf_i+0x1f2>
 800733e:	1b80      	subs	r0, r0, r6
 8007340:	6060      	str	r0, [r4, #4]
 8007342:	6863      	ldr	r3, [r4, #4]
 8007344:	6123      	str	r3, [r4, #16]
 8007346:	2300      	movs	r3, #0
 8007348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800734c:	e7a8      	b.n	80072a0 <_printf_i+0x150>
 800734e:	6923      	ldr	r3, [r4, #16]
 8007350:	4632      	mov	r2, r6
 8007352:	4649      	mov	r1, r9
 8007354:	4640      	mov	r0, r8
 8007356:	47d0      	blx	sl
 8007358:	3001      	adds	r0, #1
 800735a:	d0ab      	beq.n	80072b4 <_printf_i+0x164>
 800735c:	6823      	ldr	r3, [r4, #0]
 800735e:	079b      	lsls	r3, r3, #30
 8007360:	d413      	bmi.n	800738a <_printf_i+0x23a>
 8007362:	68e0      	ldr	r0, [r4, #12]
 8007364:	9b03      	ldr	r3, [sp, #12]
 8007366:	4298      	cmp	r0, r3
 8007368:	bfb8      	it	lt
 800736a:	4618      	movlt	r0, r3
 800736c:	e7a4      	b.n	80072b8 <_printf_i+0x168>
 800736e:	2301      	movs	r3, #1
 8007370:	4632      	mov	r2, r6
 8007372:	4649      	mov	r1, r9
 8007374:	4640      	mov	r0, r8
 8007376:	47d0      	blx	sl
 8007378:	3001      	adds	r0, #1
 800737a:	d09b      	beq.n	80072b4 <_printf_i+0x164>
 800737c:	3501      	adds	r5, #1
 800737e:	68e3      	ldr	r3, [r4, #12]
 8007380:	9903      	ldr	r1, [sp, #12]
 8007382:	1a5b      	subs	r3, r3, r1
 8007384:	42ab      	cmp	r3, r5
 8007386:	dcf2      	bgt.n	800736e <_printf_i+0x21e>
 8007388:	e7eb      	b.n	8007362 <_printf_i+0x212>
 800738a:	2500      	movs	r5, #0
 800738c:	f104 0619 	add.w	r6, r4, #25
 8007390:	e7f5      	b.n	800737e <_printf_i+0x22e>
 8007392:	bf00      	nop
 8007394:	08007681 	.word	0x08007681
 8007398:	08007692 	.word	0x08007692

0800739c <memcpy>:
 800739c:	440a      	add	r2, r1
 800739e:	4291      	cmp	r1, r2
 80073a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80073a4:	d100      	bne.n	80073a8 <memcpy+0xc>
 80073a6:	4770      	bx	lr
 80073a8:	b510      	push	{r4, lr}
 80073aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073b2:	4291      	cmp	r1, r2
 80073b4:	d1f9      	bne.n	80073aa <memcpy+0xe>
 80073b6:	bd10      	pop	{r4, pc}

080073b8 <memmove>:
 80073b8:	4288      	cmp	r0, r1
 80073ba:	b510      	push	{r4, lr}
 80073bc:	eb01 0402 	add.w	r4, r1, r2
 80073c0:	d902      	bls.n	80073c8 <memmove+0x10>
 80073c2:	4284      	cmp	r4, r0
 80073c4:	4623      	mov	r3, r4
 80073c6:	d807      	bhi.n	80073d8 <memmove+0x20>
 80073c8:	1e43      	subs	r3, r0, #1
 80073ca:	42a1      	cmp	r1, r4
 80073cc:	d008      	beq.n	80073e0 <memmove+0x28>
 80073ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073d6:	e7f8      	b.n	80073ca <memmove+0x12>
 80073d8:	4402      	add	r2, r0
 80073da:	4601      	mov	r1, r0
 80073dc:	428a      	cmp	r2, r1
 80073de:	d100      	bne.n	80073e2 <memmove+0x2a>
 80073e0:	bd10      	pop	{r4, pc}
 80073e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073ea:	e7f7      	b.n	80073dc <memmove+0x24>

080073ec <_free_r>:
 80073ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073ee:	2900      	cmp	r1, #0
 80073f0:	d048      	beq.n	8007484 <_free_r+0x98>
 80073f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073f6:	9001      	str	r0, [sp, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f1a1 0404 	sub.w	r4, r1, #4
 80073fe:	bfb8      	it	lt
 8007400:	18e4      	addlt	r4, r4, r3
 8007402:	f000 f8d3 	bl	80075ac <__malloc_lock>
 8007406:	4a20      	ldr	r2, [pc, #128]	; (8007488 <_free_r+0x9c>)
 8007408:	9801      	ldr	r0, [sp, #4]
 800740a:	6813      	ldr	r3, [r2, #0]
 800740c:	4615      	mov	r5, r2
 800740e:	b933      	cbnz	r3, 800741e <_free_r+0x32>
 8007410:	6063      	str	r3, [r4, #4]
 8007412:	6014      	str	r4, [r2, #0]
 8007414:	b003      	add	sp, #12
 8007416:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800741a:	f000 b8cd 	b.w	80075b8 <__malloc_unlock>
 800741e:	42a3      	cmp	r3, r4
 8007420:	d90b      	bls.n	800743a <_free_r+0x4e>
 8007422:	6821      	ldr	r1, [r4, #0]
 8007424:	1862      	adds	r2, r4, r1
 8007426:	4293      	cmp	r3, r2
 8007428:	bf04      	itt	eq
 800742a:	681a      	ldreq	r2, [r3, #0]
 800742c:	685b      	ldreq	r3, [r3, #4]
 800742e:	6063      	str	r3, [r4, #4]
 8007430:	bf04      	itt	eq
 8007432:	1852      	addeq	r2, r2, r1
 8007434:	6022      	streq	r2, [r4, #0]
 8007436:	602c      	str	r4, [r5, #0]
 8007438:	e7ec      	b.n	8007414 <_free_r+0x28>
 800743a:	461a      	mov	r2, r3
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	b10b      	cbz	r3, 8007444 <_free_r+0x58>
 8007440:	42a3      	cmp	r3, r4
 8007442:	d9fa      	bls.n	800743a <_free_r+0x4e>
 8007444:	6811      	ldr	r1, [r2, #0]
 8007446:	1855      	adds	r5, r2, r1
 8007448:	42a5      	cmp	r5, r4
 800744a:	d10b      	bne.n	8007464 <_free_r+0x78>
 800744c:	6824      	ldr	r4, [r4, #0]
 800744e:	4421      	add	r1, r4
 8007450:	1854      	adds	r4, r2, r1
 8007452:	42a3      	cmp	r3, r4
 8007454:	6011      	str	r1, [r2, #0]
 8007456:	d1dd      	bne.n	8007414 <_free_r+0x28>
 8007458:	681c      	ldr	r4, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	6053      	str	r3, [r2, #4]
 800745e:	4421      	add	r1, r4
 8007460:	6011      	str	r1, [r2, #0]
 8007462:	e7d7      	b.n	8007414 <_free_r+0x28>
 8007464:	d902      	bls.n	800746c <_free_r+0x80>
 8007466:	230c      	movs	r3, #12
 8007468:	6003      	str	r3, [r0, #0]
 800746a:	e7d3      	b.n	8007414 <_free_r+0x28>
 800746c:	6825      	ldr	r5, [r4, #0]
 800746e:	1961      	adds	r1, r4, r5
 8007470:	428b      	cmp	r3, r1
 8007472:	bf04      	itt	eq
 8007474:	6819      	ldreq	r1, [r3, #0]
 8007476:	685b      	ldreq	r3, [r3, #4]
 8007478:	6063      	str	r3, [r4, #4]
 800747a:	bf04      	itt	eq
 800747c:	1949      	addeq	r1, r1, r5
 800747e:	6021      	streq	r1, [r4, #0]
 8007480:	6054      	str	r4, [r2, #4]
 8007482:	e7c7      	b.n	8007414 <_free_r+0x28>
 8007484:	b003      	add	sp, #12
 8007486:	bd30      	pop	{r4, r5, pc}
 8007488:	200000a4 	.word	0x200000a4

0800748c <_malloc_r>:
 800748c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748e:	1ccd      	adds	r5, r1, #3
 8007490:	f025 0503 	bic.w	r5, r5, #3
 8007494:	3508      	adds	r5, #8
 8007496:	2d0c      	cmp	r5, #12
 8007498:	bf38      	it	cc
 800749a:	250c      	movcc	r5, #12
 800749c:	2d00      	cmp	r5, #0
 800749e:	4606      	mov	r6, r0
 80074a0:	db01      	blt.n	80074a6 <_malloc_r+0x1a>
 80074a2:	42a9      	cmp	r1, r5
 80074a4:	d903      	bls.n	80074ae <_malloc_r+0x22>
 80074a6:	230c      	movs	r3, #12
 80074a8:	6033      	str	r3, [r6, #0]
 80074aa:	2000      	movs	r0, #0
 80074ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074ae:	f000 f87d 	bl	80075ac <__malloc_lock>
 80074b2:	4921      	ldr	r1, [pc, #132]	; (8007538 <_malloc_r+0xac>)
 80074b4:	680a      	ldr	r2, [r1, #0]
 80074b6:	4614      	mov	r4, r2
 80074b8:	b99c      	cbnz	r4, 80074e2 <_malloc_r+0x56>
 80074ba:	4f20      	ldr	r7, [pc, #128]	; (800753c <_malloc_r+0xb0>)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	b923      	cbnz	r3, 80074ca <_malloc_r+0x3e>
 80074c0:	4621      	mov	r1, r4
 80074c2:	4630      	mov	r0, r6
 80074c4:	f000 f862 	bl	800758c <_sbrk_r>
 80074c8:	6038      	str	r0, [r7, #0]
 80074ca:	4629      	mov	r1, r5
 80074cc:	4630      	mov	r0, r6
 80074ce:	f000 f85d 	bl	800758c <_sbrk_r>
 80074d2:	1c43      	adds	r3, r0, #1
 80074d4:	d123      	bne.n	800751e <_malloc_r+0x92>
 80074d6:	230c      	movs	r3, #12
 80074d8:	6033      	str	r3, [r6, #0]
 80074da:	4630      	mov	r0, r6
 80074dc:	f000 f86c 	bl	80075b8 <__malloc_unlock>
 80074e0:	e7e3      	b.n	80074aa <_malloc_r+0x1e>
 80074e2:	6823      	ldr	r3, [r4, #0]
 80074e4:	1b5b      	subs	r3, r3, r5
 80074e6:	d417      	bmi.n	8007518 <_malloc_r+0x8c>
 80074e8:	2b0b      	cmp	r3, #11
 80074ea:	d903      	bls.n	80074f4 <_malloc_r+0x68>
 80074ec:	6023      	str	r3, [r4, #0]
 80074ee:	441c      	add	r4, r3
 80074f0:	6025      	str	r5, [r4, #0]
 80074f2:	e004      	b.n	80074fe <_malloc_r+0x72>
 80074f4:	6863      	ldr	r3, [r4, #4]
 80074f6:	42a2      	cmp	r2, r4
 80074f8:	bf0c      	ite	eq
 80074fa:	600b      	streq	r3, [r1, #0]
 80074fc:	6053      	strne	r3, [r2, #4]
 80074fe:	4630      	mov	r0, r6
 8007500:	f000 f85a 	bl	80075b8 <__malloc_unlock>
 8007504:	f104 000b 	add.w	r0, r4, #11
 8007508:	1d23      	adds	r3, r4, #4
 800750a:	f020 0007 	bic.w	r0, r0, #7
 800750e:	1ac2      	subs	r2, r0, r3
 8007510:	d0cc      	beq.n	80074ac <_malloc_r+0x20>
 8007512:	1a1b      	subs	r3, r3, r0
 8007514:	50a3      	str	r3, [r4, r2]
 8007516:	e7c9      	b.n	80074ac <_malloc_r+0x20>
 8007518:	4622      	mov	r2, r4
 800751a:	6864      	ldr	r4, [r4, #4]
 800751c:	e7cc      	b.n	80074b8 <_malloc_r+0x2c>
 800751e:	1cc4      	adds	r4, r0, #3
 8007520:	f024 0403 	bic.w	r4, r4, #3
 8007524:	42a0      	cmp	r0, r4
 8007526:	d0e3      	beq.n	80074f0 <_malloc_r+0x64>
 8007528:	1a21      	subs	r1, r4, r0
 800752a:	4630      	mov	r0, r6
 800752c:	f000 f82e 	bl	800758c <_sbrk_r>
 8007530:	3001      	adds	r0, #1
 8007532:	d1dd      	bne.n	80074f0 <_malloc_r+0x64>
 8007534:	e7cf      	b.n	80074d6 <_malloc_r+0x4a>
 8007536:	bf00      	nop
 8007538:	200000a4 	.word	0x200000a4
 800753c:	200000a8 	.word	0x200000a8

08007540 <_realloc_r>:
 8007540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007542:	4607      	mov	r7, r0
 8007544:	4614      	mov	r4, r2
 8007546:	460e      	mov	r6, r1
 8007548:	b921      	cbnz	r1, 8007554 <_realloc_r+0x14>
 800754a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800754e:	4611      	mov	r1, r2
 8007550:	f7ff bf9c 	b.w	800748c <_malloc_r>
 8007554:	b922      	cbnz	r2, 8007560 <_realloc_r+0x20>
 8007556:	f7ff ff49 	bl	80073ec <_free_r>
 800755a:	4625      	mov	r5, r4
 800755c:	4628      	mov	r0, r5
 800755e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007560:	f000 f830 	bl	80075c4 <_malloc_usable_size_r>
 8007564:	42a0      	cmp	r0, r4
 8007566:	d20f      	bcs.n	8007588 <_realloc_r+0x48>
 8007568:	4621      	mov	r1, r4
 800756a:	4638      	mov	r0, r7
 800756c:	f7ff ff8e 	bl	800748c <_malloc_r>
 8007570:	4605      	mov	r5, r0
 8007572:	2800      	cmp	r0, #0
 8007574:	d0f2      	beq.n	800755c <_realloc_r+0x1c>
 8007576:	4631      	mov	r1, r6
 8007578:	4622      	mov	r2, r4
 800757a:	f7ff ff0f 	bl	800739c <memcpy>
 800757e:	4631      	mov	r1, r6
 8007580:	4638      	mov	r0, r7
 8007582:	f7ff ff33 	bl	80073ec <_free_r>
 8007586:	e7e9      	b.n	800755c <_realloc_r+0x1c>
 8007588:	4635      	mov	r5, r6
 800758a:	e7e7      	b.n	800755c <_realloc_r+0x1c>

0800758c <_sbrk_r>:
 800758c:	b538      	push	{r3, r4, r5, lr}
 800758e:	4d06      	ldr	r5, [pc, #24]	; (80075a8 <_sbrk_r+0x1c>)
 8007590:	2300      	movs	r3, #0
 8007592:	4604      	mov	r4, r0
 8007594:	4608      	mov	r0, r1
 8007596:	602b      	str	r3, [r5, #0]
 8007598:	f7f9 fd1c 	bl	8000fd4 <_sbrk>
 800759c:	1c43      	adds	r3, r0, #1
 800759e:	d102      	bne.n	80075a6 <_sbrk_r+0x1a>
 80075a0:	682b      	ldr	r3, [r5, #0]
 80075a2:	b103      	cbz	r3, 80075a6 <_sbrk_r+0x1a>
 80075a4:	6023      	str	r3, [r4, #0]
 80075a6:	bd38      	pop	{r3, r4, r5, pc}
 80075a8:	200002d4 	.word	0x200002d4

080075ac <__malloc_lock>:
 80075ac:	4801      	ldr	r0, [pc, #4]	; (80075b4 <__malloc_lock+0x8>)
 80075ae:	f000 b811 	b.w	80075d4 <__retarget_lock_acquire_recursive>
 80075b2:	bf00      	nop
 80075b4:	200002dc 	.word	0x200002dc

080075b8 <__malloc_unlock>:
 80075b8:	4801      	ldr	r0, [pc, #4]	; (80075c0 <__malloc_unlock+0x8>)
 80075ba:	f000 b80c 	b.w	80075d6 <__retarget_lock_release_recursive>
 80075be:	bf00      	nop
 80075c0:	200002dc 	.word	0x200002dc

080075c4 <_malloc_usable_size_r>:
 80075c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075c8:	1f18      	subs	r0, r3, #4
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	bfbc      	itt	lt
 80075ce:	580b      	ldrlt	r3, [r1, r0]
 80075d0:	18c0      	addlt	r0, r0, r3
 80075d2:	4770      	bx	lr

080075d4 <__retarget_lock_acquire_recursive>:
 80075d4:	4770      	bx	lr

080075d6 <__retarget_lock_release_recursive>:
 80075d6:	4770      	bx	lr

080075d8 <_init>:
 80075d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075da:	bf00      	nop
 80075dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075de:	bc08      	pop	{r3}
 80075e0:	469e      	mov	lr, r3
 80075e2:	4770      	bx	lr

080075e4 <_fini>:
 80075e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e6:	bf00      	nop
 80075e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ea:	bc08      	pop	{r3}
 80075ec:	469e      	mov	lr, r3
 80075ee:	4770      	bx	lr
